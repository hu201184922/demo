/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.huatai.web.thrift.web;

import com.huatai.web.thrift.bean.ResponseBeanDto;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-08")
public class BkfwService {

	public interface Iface {

		public ResponseBeanDto getRegTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getBlockMenu(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getBlockTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getBlockOrgTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto myBlockList(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto deleteBlock(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto saveBlock(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto editBlock(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getMainTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getSubTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getBaseTrend(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getCoreTrend(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getMainTrend(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getSubsTrend(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getDistTrend(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getOrgsTrend(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getTorgTrend(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getSpecTrend(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto setDefTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto tallestCow(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto orgCompareParam(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto orgCompare(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto exportBill(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto downloadBill(java.lang.String json) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void getRegTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getBlockMenu(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getBlockTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getBlockOrgTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void myBlockList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void deleteBlock(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void saveBlock(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void editBlock(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getMainTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getSubTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getBaseTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getCoreTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getMainTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getSubsTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getDistTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrgsTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getTorgTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getSpecTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void setDefTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void tallestCow(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void orgCompareParam(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void orgCompare(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void exportBill(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void downloadBill(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public ResponseBeanDto getRegTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getRegTarget(json);
			return recv_getRegTarget();
		}

		public void send_getRegTarget(java.lang.String json) throws org.apache.thrift.TException {
			getRegTarget_args args = new getRegTarget_args();
			args.setJson(json);
			sendBase("getRegTarget", args);
		}

		public ResponseBeanDto recv_getRegTarget() throws org.apache.thrift.TException {
			getRegTarget_result result = new getRegTarget_result();
			receiveBase(result, "getRegTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getRegTarget failed: unknown result");
		}

		public ResponseBeanDto getBlockMenu(java.lang.String json) throws org.apache.thrift.TException {
			send_getBlockMenu(json);
			return recv_getBlockMenu();
		}

		public void send_getBlockMenu(java.lang.String json) throws org.apache.thrift.TException {
			getBlockMenu_args args = new getBlockMenu_args();
			args.setJson(json);
			sendBase("getBlockMenu", args);
		}

		public ResponseBeanDto recv_getBlockMenu() throws org.apache.thrift.TException {
			getBlockMenu_result result = new getBlockMenu_result();
			receiveBase(result, "getBlockMenu");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getBlockMenu failed: unknown result");
		}

		public ResponseBeanDto getBlockTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getBlockTarget(json);
			return recv_getBlockTarget();
		}

		public void send_getBlockTarget(java.lang.String json) throws org.apache.thrift.TException {
			getBlockTarget_args args = new getBlockTarget_args();
			args.setJson(json);
			sendBase("getBlockTarget", args);
		}

		public ResponseBeanDto recv_getBlockTarget() throws org.apache.thrift.TException {
			getBlockTarget_result result = new getBlockTarget_result();
			receiveBase(result, "getBlockTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getBlockTarget failed: unknown result");
		}

		public ResponseBeanDto getBlockOrgTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getBlockOrgTarget(json);
			return recv_getBlockOrgTarget();
		}

		public void send_getBlockOrgTarget(java.lang.String json) throws org.apache.thrift.TException {
			getBlockOrgTarget_args args = new getBlockOrgTarget_args();
			args.setJson(json);
			sendBase("getBlockOrgTarget", args);
		}

		public ResponseBeanDto recv_getBlockOrgTarget() throws org.apache.thrift.TException {
			getBlockOrgTarget_result result = new getBlockOrgTarget_result();
			receiveBase(result, "getBlockOrgTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getBlockOrgTarget failed: unknown result");
		}

		public ResponseBeanDto myBlockList(java.lang.String json) throws org.apache.thrift.TException {
			send_myBlockList(json);
			return recv_myBlockList();
		}

		public void send_myBlockList(java.lang.String json) throws org.apache.thrift.TException {
			myBlockList_args args = new myBlockList_args();
			args.setJson(json);
			sendBase("myBlockList", args);
		}

		public ResponseBeanDto recv_myBlockList() throws org.apache.thrift.TException {
			myBlockList_result result = new myBlockList_result();
			receiveBase(result, "myBlockList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"myBlockList failed: unknown result");
		}

		public ResponseBeanDto deleteBlock(java.lang.String json) throws org.apache.thrift.TException {
			send_deleteBlock(json);
			return recv_deleteBlock();
		}

		public void send_deleteBlock(java.lang.String json) throws org.apache.thrift.TException {
			deleteBlock_args args = new deleteBlock_args();
			args.setJson(json);
			sendBase("deleteBlock", args);
		}

		public ResponseBeanDto recv_deleteBlock() throws org.apache.thrift.TException {
			deleteBlock_result result = new deleteBlock_result();
			receiveBase(result, "deleteBlock");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"deleteBlock failed: unknown result");
		}

		public ResponseBeanDto getTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getTarget(json);
			return recv_getTarget();
		}

		public void send_getTarget(java.lang.String json) throws org.apache.thrift.TException {
			getTarget_args args = new getTarget_args();
			args.setJson(json);
			sendBase("getTarget", args);
		}

		public ResponseBeanDto recv_getTarget() throws org.apache.thrift.TException {
			getTarget_result result = new getTarget_result();
			receiveBase(result, "getTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getTarget failed: unknown result");
		}

		public ResponseBeanDto saveBlock(java.lang.String json) throws org.apache.thrift.TException {
			send_saveBlock(json);
			return recv_saveBlock();
		}

		public void send_saveBlock(java.lang.String json) throws org.apache.thrift.TException {
			saveBlock_args args = new saveBlock_args();
			args.setJson(json);
			sendBase("saveBlock", args);
		}

		public ResponseBeanDto recv_saveBlock() throws org.apache.thrift.TException {
			saveBlock_result result = new saveBlock_result();
			receiveBase(result, "saveBlock");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"saveBlock failed: unknown result");
		}

		public ResponseBeanDto editBlock(java.lang.String json) throws org.apache.thrift.TException {
			send_editBlock(json);
			return recv_editBlock();
		}

		public void send_editBlock(java.lang.String json) throws org.apache.thrift.TException {
			editBlock_args args = new editBlock_args();
			args.setJson(json);
			sendBase("editBlock", args);
		}

		public ResponseBeanDto recv_editBlock() throws org.apache.thrift.TException {
			editBlock_result result = new editBlock_result();
			receiveBase(result, "editBlock");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"editBlock failed: unknown result");
		}

		public ResponseBeanDto getMainTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getMainTarget(json);
			return recv_getMainTarget();
		}

		public void send_getMainTarget(java.lang.String json) throws org.apache.thrift.TException {
			getMainTarget_args args = new getMainTarget_args();
			args.setJson(json);
			sendBase("getMainTarget", args);
		}

		public ResponseBeanDto recv_getMainTarget() throws org.apache.thrift.TException {
			getMainTarget_result result = new getMainTarget_result();
			receiveBase(result, "getMainTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getMainTarget failed: unknown result");
		}

		public ResponseBeanDto getSubTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getSubTarget(json);
			return recv_getSubTarget();
		}

		public void send_getSubTarget(java.lang.String json) throws org.apache.thrift.TException {
			getSubTarget_args args = new getSubTarget_args();
			args.setJson(json);
			sendBase("getSubTarget", args);
		}

		public ResponseBeanDto recv_getSubTarget() throws org.apache.thrift.TException {
			getSubTarget_result result = new getSubTarget_result();
			receiveBase(result, "getSubTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getSubTarget failed: unknown result");
		}

		public ResponseBeanDto getBaseTrend(java.lang.String json) throws org.apache.thrift.TException {
			send_getBaseTrend(json);
			return recv_getBaseTrend();
		}

		public void send_getBaseTrend(java.lang.String json) throws org.apache.thrift.TException {
			getBaseTrend_args args = new getBaseTrend_args();
			args.setJson(json);
			sendBase("getBaseTrend", args);
		}

		public ResponseBeanDto recv_getBaseTrend() throws org.apache.thrift.TException {
			getBaseTrend_result result = new getBaseTrend_result();
			receiveBase(result, "getBaseTrend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getBaseTrend failed: unknown result");
		}

		public ResponseBeanDto getCoreTrend(java.lang.String json) throws org.apache.thrift.TException {
			send_getCoreTrend(json);
			return recv_getCoreTrend();
		}

		public void send_getCoreTrend(java.lang.String json) throws org.apache.thrift.TException {
			getCoreTrend_args args = new getCoreTrend_args();
			args.setJson(json);
			sendBase("getCoreTrend", args);
		}

		public ResponseBeanDto recv_getCoreTrend() throws org.apache.thrift.TException {
			getCoreTrend_result result = new getCoreTrend_result();
			receiveBase(result, "getCoreTrend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCoreTrend failed: unknown result");
		}

		public ResponseBeanDto getMainTrend(java.lang.String json) throws org.apache.thrift.TException {
			send_getMainTrend(json);
			return recv_getMainTrend();
		}

		public void send_getMainTrend(java.lang.String json) throws org.apache.thrift.TException {
			getMainTrend_args args = new getMainTrend_args();
			args.setJson(json);
			sendBase("getMainTrend", args);
		}

		public ResponseBeanDto recv_getMainTrend() throws org.apache.thrift.TException {
			getMainTrend_result result = new getMainTrend_result();
			receiveBase(result, "getMainTrend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getMainTrend failed: unknown result");
		}

		public ResponseBeanDto getSubsTrend(java.lang.String json) throws org.apache.thrift.TException {
			send_getSubsTrend(json);
			return recv_getSubsTrend();
		}

		public void send_getSubsTrend(java.lang.String json) throws org.apache.thrift.TException {
			getSubsTrend_args args = new getSubsTrend_args();
			args.setJson(json);
			sendBase("getSubsTrend", args);
		}

		public ResponseBeanDto recv_getSubsTrend() throws org.apache.thrift.TException {
			getSubsTrend_result result = new getSubsTrend_result();
			receiveBase(result, "getSubsTrend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getSubsTrend failed: unknown result");
		}

		public ResponseBeanDto getDistTrend(java.lang.String json) throws org.apache.thrift.TException {
			send_getDistTrend(json);
			return recv_getDistTrend();
		}

		public void send_getDistTrend(java.lang.String json) throws org.apache.thrift.TException {
			getDistTrend_args args = new getDistTrend_args();
			args.setJson(json);
			sendBase("getDistTrend", args);
		}

		public ResponseBeanDto recv_getDistTrend() throws org.apache.thrift.TException {
			getDistTrend_result result = new getDistTrend_result();
			receiveBase(result, "getDistTrend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getDistTrend failed: unknown result");
		}

		public ResponseBeanDto getOrgsTrend(java.lang.String json) throws org.apache.thrift.TException {
			send_getOrgsTrend(json);
			return recv_getOrgsTrend();
		}

		public void send_getOrgsTrend(java.lang.String json) throws org.apache.thrift.TException {
			getOrgsTrend_args args = new getOrgsTrend_args();
			args.setJson(json);
			sendBase("getOrgsTrend", args);
		}

		public ResponseBeanDto recv_getOrgsTrend() throws org.apache.thrift.TException {
			getOrgsTrend_result result = new getOrgsTrend_result();
			receiveBase(result, "getOrgsTrend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrgsTrend failed: unknown result");
		}

		public ResponseBeanDto getTorgTrend(java.lang.String json) throws org.apache.thrift.TException {
			send_getTorgTrend(json);
			return recv_getTorgTrend();
		}

		public void send_getTorgTrend(java.lang.String json) throws org.apache.thrift.TException {
			getTorgTrend_args args = new getTorgTrend_args();
			args.setJson(json);
			sendBase("getTorgTrend", args);
		}

		public ResponseBeanDto recv_getTorgTrend() throws org.apache.thrift.TException {
			getTorgTrend_result result = new getTorgTrend_result();
			receiveBase(result, "getTorgTrend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getTorgTrend failed: unknown result");
		}

		public ResponseBeanDto getSpecTrend(java.lang.String json) throws org.apache.thrift.TException {
			send_getSpecTrend(json);
			return recv_getSpecTrend();
		}

		public void send_getSpecTrend(java.lang.String json) throws org.apache.thrift.TException {
			getSpecTrend_args args = new getSpecTrend_args();
			args.setJson(json);
			sendBase("getSpecTrend", args);
		}

		public ResponseBeanDto recv_getSpecTrend() throws org.apache.thrift.TException {
			getSpecTrend_result result = new getSpecTrend_result();
			receiveBase(result, "getSpecTrend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getSpecTrend failed: unknown result");
		}

		public ResponseBeanDto setDefTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_setDefTarget(json);
			return recv_setDefTarget();
		}

		public void send_setDefTarget(java.lang.String json) throws org.apache.thrift.TException {
			setDefTarget_args args = new setDefTarget_args();
			args.setJson(json);
			sendBase("setDefTarget", args);
		}

		public ResponseBeanDto recv_setDefTarget() throws org.apache.thrift.TException {
			setDefTarget_result result = new setDefTarget_result();
			receiveBase(result, "setDefTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setDefTarget failed: unknown result");
		}

		public ResponseBeanDto tallestCow(java.lang.String json) throws org.apache.thrift.TException {
			send_tallestCow(json);
			return recv_tallestCow();
		}

		public void send_tallestCow(java.lang.String json) throws org.apache.thrift.TException {
			tallestCow_args args = new tallestCow_args();
			args.setJson(json);
			sendBase("tallestCow", args);
		}

		public ResponseBeanDto recv_tallestCow() throws org.apache.thrift.TException {
			tallestCow_result result = new tallestCow_result();
			receiveBase(result, "tallestCow");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"tallestCow failed: unknown result");
		}

		public ResponseBeanDto orgCompareParam(java.lang.String json) throws org.apache.thrift.TException {
			send_orgCompareParam(json);
			return recv_orgCompareParam();
		}

		public void send_orgCompareParam(java.lang.String json) throws org.apache.thrift.TException {
			orgCompareParam_args args = new orgCompareParam_args();
			args.setJson(json);
			sendBase("orgCompareParam", args);
		}

		public ResponseBeanDto recv_orgCompareParam() throws org.apache.thrift.TException {
			orgCompareParam_result result = new orgCompareParam_result();
			receiveBase(result, "orgCompareParam");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"orgCompareParam failed: unknown result");
		}

		public ResponseBeanDto orgCompare(java.lang.String json) throws org.apache.thrift.TException {
			send_orgCompare(json);
			return recv_orgCompare();
		}

		public void send_orgCompare(java.lang.String json) throws org.apache.thrift.TException {
			orgCompare_args args = new orgCompare_args();
			args.setJson(json);
			sendBase("orgCompare", args);
		}

		public ResponseBeanDto recv_orgCompare() throws org.apache.thrift.TException {
			orgCompare_result result = new orgCompare_result();
			receiveBase(result, "orgCompare");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"orgCompare failed: unknown result");
		}

		public ResponseBeanDto exportBill(java.lang.String json) throws org.apache.thrift.TException {
			send_exportBill(json);
			return recv_exportBill();
		}

		public void send_exportBill(java.lang.String json) throws org.apache.thrift.TException {
			exportBill_args args = new exportBill_args();
			args.setJson(json);
			sendBase("exportBill", args);
		}

		public ResponseBeanDto recv_exportBill() throws org.apache.thrift.TException {
			exportBill_result result = new exportBill_result();
			receiveBase(result, "exportBill");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"exportBill failed: unknown result");
		}

		public ResponseBeanDto downloadBill(java.lang.String json) throws org.apache.thrift.TException {
			send_downloadBill(json);
			return recv_downloadBill();
		}

		public void send_downloadBill(java.lang.String json) throws org.apache.thrift.TException {
			downloadBill_args args = new downloadBill_args();
			args.setJson(json);
			sendBase("downloadBill", args);
		}

		public ResponseBeanDto recv_downloadBill() throws org.apache.thrift.TException {
			downloadBill_result result = new downloadBill_result();
			receiveBase(result, "downloadBill");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"downloadBill failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getRegTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getRegTarget_call method_call = new getRegTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getRegTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getRegTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getRegTarget_args args = new getRegTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getRegTarget();
			}
		}

		public void getBlockMenu(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getBlockMenu_call method_call = new getBlockMenu_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getBlockMenu_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getBlockMenu_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlockMenu",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getBlockMenu_args args = new getBlockMenu_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getBlockMenu();
			}
		}

		public void getBlockTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getBlockTarget_call method_call = new getBlockTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getBlockTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getBlockTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlockTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getBlockTarget_args args = new getBlockTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getBlockTarget();
			}
		}

		public void getBlockOrgTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getBlockOrgTarget_call method_call = new getBlockOrgTarget_call(json, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getBlockOrgTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getBlockOrgTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlockOrgTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getBlockOrgTarget_args args = new getBlockOrgTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getBlockOrgTarget();
			}
		}

		public void myBlockList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			myBlockList_call method_call = new myBlockList_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class myBlockList_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public myBlockList_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("myBlockList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				myBlockList_args args = new myBlockList_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_myBlockList();
			}
		}

		public void deleteBlock(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			deleteBlock_call method_call = new deleteBlock_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class deleteBlock_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public deleteBlock_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBlock",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				deleteBlock_args args = new deleteBlock_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_deleteBlock();
			}
		}

		public void getTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getTarget_call method_call = new getTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getTarget_args args = new getTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getTarget();
			}
		}

		public void saveBlock(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			saveBlock_call method_call = new saveBlock_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class saveBlock_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public saveBlock_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBlock",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				saveBlock_args args = new saveBlock_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_saveBlock();
			}
		}

		public void editBlock(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			editBlock_call method_call = new editBlock_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class editBlock_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public editBlock_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editBlock",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				editBlock_args args = new editBlock_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_editBlock();
			}
		}

		public void getMainTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getMainTarget_call method_call = new getMainTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getMainTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getMainTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMainTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getMainTarget_args args = new getMainTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getMainTarget();
			}
		}

		public void getSubTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getSubTarget_call method_call = new getSubTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getSubTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getSubTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getSubTarget_args args = new getSubTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getSubTarget();
			}
		}

		public void getBaseTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getBaseTrend_call method_call = new getBaseTrend_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getBaseTrend_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getBaseTrend_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBaseTrend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getBaseTrend_args args = new getBaseTrend_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getBaseTrend();
			}
		}

		public void getCoreTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCoreTrend_call method_call = new getCoreTrend_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCoreTrend_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getCoreTrend_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCoreTrend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCoreTrend_args args = new getCoreTrend_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCoreTrend();
			}
		}

		public void getMainTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getMainTrend_call method_call = new getMainTrend_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getMainTrend_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getMainTrend_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMainTrend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getMainTrend_args args = new getMainTrend_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getMainTrend();
			}
		}

		public void getSubsTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getSubsTrend_call method_call = new getSubsTrend_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getSubsTrend_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getSubsTrend_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubsTrend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getSubsTrend_args args = new getSubsTrend_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getSubsTrend();
			}
		}

		public void getDistTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getDistTrend_call method_call = new getDistTrend_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getDistTrend_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getDistTrend_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDistTrend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getDistTrend_args args = new getDistTrend_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getDistTrend();
			}
		}

		public void getOrgsTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrgsTrend_call method_call = new getOrgsTrend_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrgsTrend_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getOrgsTrend_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgsTrend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrgsTrend_args args = new getOrgsTrend_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrgsTrend();
			}
		}

		public void getTorgTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getTorgTrend_call method_call = new getTorgTrend_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getTorgTrend_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getTorgTrend_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTorgTrend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getTorgTrend_args args = new getTorgTrend_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getTorgTrend();
			}
		}

		public void getSpecTrend(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getSpecTrend_call method_call = new getSpecTrend_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getSpecTrend_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getSpecTrend_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpecTrend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getSpecTrend_args args = new getSpecTrend_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getSpecTrend();
			}
		}

		public void setDefTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setDefTarget_call method_call = new setDefTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setDefTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public setDefTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDefTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setDefTarget_args args = new setDefTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setDefTarget();
			}
		}

		public void tallestCow(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			tallestCow_call method_call = new tallestCow_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class tallestCow_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public tallestCow_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tallestCow",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				tallestCow_args args = new tallestCow_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_tallestCow();
			}
		}

		public void orgCompareParam(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			orgCompareParam_call method_call = new orgCompareParam_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class orgCompareParam_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public orgCompareParam_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orgCompareParam",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				orgCompareParam_args args = new orgCompareParam_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_orgCompareParam();
			}
		}

		public void orgCompare(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			orgCompare_call method_call = new orgCompare_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class orgCompare_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public orgCompare_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orgCompare",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				orgCompare_args args = new orgCompare_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_orgCompare();
			}
		}

		public void exportBill(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			exportBill_call method_call = new exportBill_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class exportBill_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public exportBill_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportBill",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				exportBill_args args = new exportBill_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_exportBill();
			}
		}

		public void downloadBill(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			downloadBill_call method_call = new downloadBill_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class downloadBill_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public downloadBill_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("downloadBill",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				downloadBill_args args = new downloadBill_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_downloadBill();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getRegTarget", new getRegTarget());
			processMap.put("getBlockMenu", new getBlockMenu());
			processMap.put("getBlockTarget", new getBlockTarget());
			processMap.put("getBlockOrgTarget", new getBlockOrgTarget());
			processMap.put("myBlockList", new myBlockList());
			processMap.put("deleteBlock", new deleteBlock());
			processMap.put("getTarget", new getTarget());
			processMap.put("saveBlock", new saveBlock());
			processMap.put("editBlock", new editBlock());
			processMap.put("getMainTarget", new getMainTarget());
			processMap.put("getSubTarget", new getSubTarget());
			processMap.put("getBaseTrend", new getBaseTrend());
			processMap.put("getCoreTrend", new getCoreTrend());
			processMap.put("getMainTrend", new getMainTrend());
			processMap.put("getSubsTrend", new getSubsTrend());
			processMap.put("getDistTrend", new getDistTrend());
			processMap.put("getOrgsTrend", new getOrgsTrend());
			processMap.put("getTorgTrend", new getTorgTrend());
			processMap.put("getSpecTrend", new getSpecTrend());
			processMap.put("setDefTarget", new setDefTarget());
			processMap.put("tallestCow", new tallestCow());
			processMap.put("orgCompareParam", new orgCompareParam());
			processMap.put("orgCompare", new orgCompare());
			processMap.put("exportBill", new exportBill());
			processMap.put("downloadBill", new downloadBill());
			return processMap;
		}

		public static class getRegTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getRegTarget_args> {
			public getRegTarget() {
				super("getRegTarget");
			}

			public getRegTarget_args getEmptyArgsInstance() {
				return new getRegTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getRegTarget_result getResult(I iface, getRegTarget_args args) throws org.apache.thrift.TException {
				getRegTarget_result result = new getRegTarget_result();
				result.success = iface.getRegTarget(args.json);
				return result;
			}
		}

		public static class getBlockMenu<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getBlockMenu_args> {
			public getBlockMenu() {
				super("getBlockMenu");
			}

			public getBlockMenu_args getEmptyArgsInstance() {
				return new getBlockMenu_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getBlockMenu_result getResult(I iface, getBlockMenu_args args) throws org.apache.thrift.TException {
				getBlockMenu_result result = new getBlockMenu_result();
				result.success = iface.getBlockMenu(args.json);
				return result;
			}
		}

		public static class getBlockTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getBlockTarget_args> {
			public getBlockTarget() {
				super("getBlockTarget");
			}

			public getBlockTarget_args getEmptyArgsInstance() {
				return new getBlockTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getBlockTarget_result getResult(I iface, getBlockTarget_args args)
					throws org.apache.thrift.TException {
				getBlockTarget_result result = new getBlockTarget_result();
				result.success = iface.getBlockTarget(args.json);
				return result;
			}
		}

		public static class getBlockOrgTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getBlockOrgTarget_args> {
			public getBlockOrgTarget() {
				super("getBlockOrgTarget");
			}

			public getBlockOrgTarget_args getEmptyArgsInstance() {
				return new getBlockOrgTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getBlockOrgTarget_result getResult(I iface, getBlockOrgTarget_args args)
					throws org.apache.thrift.TException {
				getBlockOrgTarget_result result = new getBlockOrgTarget_result();
				result.success = iface.getBlockOrgTarget(args.json);
				return result;
			}
		}

		public static class myBlockList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, myBlockList_args> {
			public myBlockList() {
				super("myBlockList");
			}

			public myBlockList_args getEmptyArgsInstance() {
				return new myBlockList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public myBlockList_result getResult(I iface, myBlockList_args args) throws org.apache.thrift.TException {
				myBlockList_result result = new myBlockList_result();
				result.success = iface.myBlockList(args.json);
				return result;
			}
		}

		public static class deleteBlock<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, deleteBlock_args> {
			public deleteBlock() {
				super("deleteBlock");
			}

			public deleteBlock_args getEmptyArgsInstance() {
				return new deleteBlock_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public deleteBlock_result getResult(I iface, deleteBlock_args args) throws org.apache.thrift.TException {
				deleteBlock_result result = new deleteBlock_result();
				result.success = iface.deleteBlock(args.json);
				return result;
			}
		}

		public static class getTarget<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTarget_args> {
			public getTarget() {
				super("getTarget");
			}

			public getTarget_args getEmptyArgsInstance() {
				return new getTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getTarget_result getResult(I iface, getTarget_args args) throws org.apache.thrift.TException {
				getTarget_result result = new getTarget_result();
				result.success = iface.getTarget(args.json);
				return result;
			}
		}

		public static class saveBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBlock_args> {
			public saveBlock() {
				super("saveBlock");
			}

			public saveBlock_args getEmptyArgsInstance() {
				return new saveBlock_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public saveBlock_result getResult(I iface, saveBlock_args args) throws org.apache.thrift.TException {
				saveBlock_result result = new saveBlock_result();
				result.success = iface.saveBlock(args.json);
				return result;
			}
		}

		public static class editBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editBlock_args> {
			public editBlock() {
				super("editBlock");
			}

			public editBlock_args getEmptyArgsInstance() {
				return new editBlock_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public editBlock_result getResult(I iface, editBlock_args args) throws org.apache.thrift.TException {
				editBlock_result result = new editBlock_result();
				result.success = iface.editBlock(args.json);
				return result;
			}
		}

		public static class getMainTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getMainTarget_args> {
			public getMainTarget() {
				super("getMainTarget");
			}

			public getMainTarget_args getEmptyArgsInstance() {
				return new getMainTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getMainTarget_result getResult(I iface, getMainTarget_args args)
					throws org.apache.thrift.TException {
				getMainTarget_result result = new getMainTarget_result();
				result.success = iface.getMainTarget(args.json);
				return result;
			}
		}

		public static class getSubTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getSubTarget_args> {
			public getSubTarget() {
				super("getSubTarget");
			}

			public getSubTarget_args getEmptyArgsInstance() {
				return new getSubTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getSubTarget_result getResult(I iface, getSubTarget_args args) throws org.apache.thrift.TException {
				getSubTarget_result result = new getSubTarget_result();
				result.success = iface.getSubTarget(args.json);
				return result;
			}
		}

		public static class getBaseTrend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getBaseTrend_args> {
			public getBaseTrend() {
				super("getBaseTrend");
			}

			public getBaseTrend_args getEmptyArgsInstance() {
				return new getBaseTrend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getBaseTrend_result getResult(I iface, getBaseTrend_args args) throws org.apache.thrift.TException {
				getBaseTrend_result result = new getBaseTrend_result();
				result.success = iface.getBaseTrend(args.json);
				return result;
			}
		}

		public static class getCoreTrend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCoreTrend_args> {
			public getCoreTrend() {
				super("getCoreTrend");
			}

			public getCoreTrend_args getEmptyArgsInstance() {
				return new getCoreTrend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getCoreTrend_result getResult(I iface, getCoreTrend_args args) throws org.apache.thrift.TException {
				getCoreTrend_result result = new getCoreTrend_result();
				result.success = iface.getCoreTrend(args.json);
				return result;
			}
		}

		public static class getMainTrend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getMainTrend_args> {
			public getMainTrend() {
				super("getMainTrend");
			}

			public getMainTrend_args getEmptyArgsInstance() {
				return new getMainTrend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getMainTrend_result getResult(I iface, getMainTrend_args args) throws org.apache.thrift.TException {
				getMainTrend_result result = new getMainTrend_result();
				result.success = iface.getMainTrend(args.json);
				return result;
			}
		}

		public static class getSubsTrend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getSubsTrend_args> {
			public getSubsTrend() {
				super("getSubsTrend");
			}

			public getSubsTrend_args getEmptyArgsInstance() {
				return new getSubsTrend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getSubsTrend_result getResult(I iface, getSubsTrend_args args) throws org.apache.thrift.TException {
				getSubsTrend_result result = new getSubsTrend_result();
				result.success = iface.getSubsTrend(args.json);
				return result;
			}
		}

		public static class getDistTrend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getDistTrend_args> {
			public getDistTrend() {
				super("getDistTrend");
			}

			public getDistTrend_args getEmptyArgsInstance() {
				return new getDistTrend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getDistTrend_result getResult(I iface, getDistTrend_args args) throws org.apache.thrift.TException {
				getDistTrend_result result = new getDistTrend_result();
				result.success = iface.getDistTrend(args.json);
				return result;
			}
		}

		public static class getOrgsTrend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrgsTrend_args> {
			public getOrgsTrend() {
				super("getOrgsTrend");
			}

			public getOrgsTrend_args getEmptyArgsInstance() {
				return new getOrgsTrend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getOrgsTrend_result getResult(I iface, getOrgsTrend_args args) throws org.apache.thrift.TException {
				getOrgsTrend_result result = new getOrgsTrend_result();
				result.success = iface.getOrgsTrend(args.json);
				return result;
			}
		}

		public static class getTorgTrend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getTorgTrend_args> {
			public getTorgTrend() {
				super("getTorgTrend");
			}

			public getTorgTrend_args getEmptyArgsInstance() {
				return new getTorgTrend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getTorgTrend_result getResult(I iface, getTorgTrend_args args) throws org.apache.thrift.TException {
				getTorgTrend_result result = new getTorgTrend_result();
				result.success = iface.getTorgTrend(args.json);
				return result;
			}
		}

		public static class getSpecTrend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getSpecTrend_args> {
			public getSpecTrend() {
				super("getSpecTrend");
			}

			public getSpecTrend_args getEmptyArgsInstance() {
				return new getSpecTrend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getSpecTrend_result getResult(I iface, getSpecTrend_args args) throws org.apache.thrift.TException {
				getSpecTrend_result result = new getSpecTrend_result();
				result.success = iface.getSpecTrend(args.json);
				return result;
			}
		}

		public static class setDefTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setDefTarget_args> {
			public setDefTarget() {
				super("setDefTarget");
			}

			public setDefTarget_args getEmptyArgsInstance() {
				return new setDefTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setDefTarget_result getResult(I iface, setDefTarget_args args) throws org.apache.thrift.TException {
				setDefTarget_result result = new setDefTarget_result();
				result.success = iface.setDefTarget(args.json);
				return result;
			}
		}

		public static class tallestCow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tallestCow_args> {
			public tallestCow() {
				super("tallestCow");
			}

			public tallestCow_args getEmptyArgsInstance() {
				return new tallestCow_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public tallestCow_result getResult(I iface, tallestCow_args args) throws org.apache.thrift.TException {
				tallestCow_result result = new tallestCow_result();
				result.success = iface.tallestCow(args.json);
				return result;
			}
		}

		public static class orgCompareParam<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, orgCompareParam_args> {
			public orgCompareParam() {
				super("orgCompareParam");
			}

			public orgCompareParam_args getEmptyArgsInstance() {
				return new orgCompareParam_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public orgCompareParam_result getResult(I iface, orgCompareParam_args args)
					throws org.apache.thrift.TException {
				orgCompareParam_result result = new orgCompareParam_result();
				result.success = iface.orgCompareParam(args.json);
				return result;
			}
		}

		public static class orgCompare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orgCompare_args> {
			public orgCompare() {
				super("orgCompare");
			}

			public orgCompare_args getEmptyArgsInstance() {
				return new orgCompare_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public orgCompare_result getResult(I iface, orgCompare_args args) throws org.apache.thrift.TException {
				orgCompare_result result = new orgCompare_result();
				result.success = iface.orgCompare(args.json);
				return result;
			}
		}

		public static class exportBill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportBill_args> {
			public exportBill() {
				super("exportBill");
			}

			public exportBill_args getEmptyArgsInstance() {
				return new exportBill_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public exportBill_result getResult(I iface, exportBill_args args) throws org.apache.thrift.TException {
				exportBill_result result = new exportBill_result();
				result.success = iface.exportBill(args.json);
				return result;
			}
		}

		public static class downloadBill<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, downloadBill_args> {
			public downloadBill() {
				super("downloadBill");
			}

			public downloadBill_args getEmptyArgsInstance() {
				return new downloadBill_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public downloadBill_result getResult(I iface, downloadBill_args args) throws org.apache.thrift.TException {
				downloadBill_result result = new downloadBill_result();
				result.success = iface.downloadBill(args.json);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getRegTarget", new getRegTarget());
			processMap.put("getBlockMenu", new getBlockMenu());
			processMap.put("getBlockTarget", new getBlockTarget());
			processMap.put("getBlockOrgTarget", new getBlockOrgTarget());
			processMap.put("myBlockList", new myBlockList());
			processMap.put("deleteBlock", new deleteBlock());
			processMap.put("getTarget", new getTarget());
			processMap.put("saveBlock", new saveBlock());
			processMap.put("editBlock", new editBlock());
			processMap.put("getMainTarget", new getMainTarget());
			processMap.put("getSubTarget", new getSubTarget());
			processMap.put("getBaseTrend", new getBaseTrend());
			processMap.put("getCoreTrend", new getCoreTrend());
			processMap.put("getMainTrend", new getMainTrend());
			processMap.put("getSubsTrend", new getSubsTrend());
			processMap.put("getDistTrend", new getDistTrend());
			processMap.put("getOrgsTrend", new getOrgsTrend());
			processMap.put("getTorgTrend", new getTorgTrend());
			processMap.put("getSpecTrend", new getSpecTrend());
			processMap.put("setDefTarget", new setDefTarget());
			processMap.put("tallestCow", new tallestCow());
			processMap.put("orgCompareParam", new orgCompareParam());
			processMap.put("orgCompare", new orgCompare());
			processMap.put("exportBill", new exportBill());
			processMap.put("downloadBill", new downloadBill());
			return processMap;
		}

		public static class getRegTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getRegTarget_args, ResponseBeanDto> {
			public getRegTarget() {
				super("getRegTarget");
			}

			public getRegTarget_args getEmptyArgsInstance() {
				return new getRegTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getRegTarget_result result = new getRegTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getRegTarget_result result = new getRegTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getRegTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getRegTarget(args.json, resultHandler);
			}
		}

		public static class getBlockMenu<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getBlockMenu_args, ResponseBeanDto> {
			public getBlockMenu() {
				super("getBlockMenu");
			}

			public getBlockMenu_args getEmptyArgsInstance() {
				return new getBlockMenu_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getBlockMenu_result result = new getBlockMenu_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getBlockMenu_result result = new getBlockMenu_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getBlockMenu_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getBlockMenu(args.json, resultHandler);
			}
		}

		public static class getBlockTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getBlockTarget_args, ResponseBeanDto> {
			public getBlockTarget() {
				super("getBlockTarget");
			}

			public getBlockTarget_args getEmptyArgsInstance() {
				return new getBlockTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getBlockTarget_result result = new getBlockTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getBlockTarget_result result = new getBlockTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getBlockTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getBlockTarget(args.json, resultHandler);
			}
		}

		public static class getBlockOrgTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getBlockOrgTarget_args, ResponseBeanDto> {
			public getBlockOrgTarget() {
				super("getBlockOrgTarget");
			}

			public getBlockOrgTarget_args getEmptyArgsInstance() {
				return new getBlockOrgTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getBlockOrgTarget_result result = new getBlockOrgTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getBlockOrgTarget_result result = new getBlockOrgTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getBlockOrgTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getBlockOrgTarget(args.json, resultHandler);
			}
		}

		public static class myBlockList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, myBlockList_args, ResponseBeanDto> {
			public myBlockList() {
				super("myBlockList");
			}

			public myBlockList_args getEmptyArgsInstance() {
				return new myBlockList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						myBlockList_result result = new myBlockList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						myBlockList_result result = new myBlockList_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, myBlockList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.myBlockList(args.json, resultHandler);
			}
		}

		public static class deleteBlock<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, deleteBlock_args, ResponseBeanDto> {
			public deleteBlock() {
				super("deleteBlock");
			}

			public deleteBlock_args getEmptyArgsInstance() {
				return new deleteBlock_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						deleteBlock_result result = new deleteBlock_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						deleteBlock_result result = new deleteBlock_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, deleteBlock_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.deleteBlock(args.json, resultHandler);
			}
		}

		public static class getTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getTarget_args, ResponseBeanDto> {
			public getTarget() {
				super("getTarget");
			}

			public getTarget_args getEmptyArgsInstance() {
				return new getTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getTarget_result result = new getTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getTarget_result result = new getTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getTarget(args.json, resultHandler);
			}
		}

		public static class saveBlock<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, saveBlock_args, ResponseBeanDto> {
			public saveBlock() {
				super("saveBlock");
			}

			public saveBlock_args getEmptyArgsInstance() {
				return new saveBlock_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						saveBlock_result result = new saveBlock_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						saveBlock_result result = new saveBlock_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, saveBlock_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.saveBlock(args.json, resultHandler);
			}
		}

		public static class editBlock<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, editBlock_args, ResponseBeanDto> {
			public editBlock() {
				super("editBlock");
			}

			public editBlock_args getEmptyArgsInstance() {
				return new editBlock_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						editBlock_result result = new editBlock_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						editBlock_result result = new editBlock_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, editBlock_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.editBlock(args.json, resultHandler);
			}
		}

		public static class getMainTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getMainTarget_args, ResponseBeanDto> {
			public getMainTarget() {
				super("getMainTarget");
			}

			public getMainTarget_args getEmptyArgsInstance() {
				return new getMainTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getMainTarget_result result = new getMainTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getMainTarget_result result = new getMainTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getMainTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getMainTarget(args.json, resultHandler);
			}
		}

		public static class getSubTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getSubTarget_args, ResponseBeanDto> {
			public getSubTarget() {
				super("getSubTarget");
			}

			public getSubTarget_args getEmptyArgsInstance() {
				return new getSubTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getSubTarget_result result = new getSubTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getSubTarget_result result = new getSubTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getSubTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getSubTarget(args.json, resultHandler);
			}
		}

		public static class getBaseTrend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getBaseTrend_args, ResponseBeanDto> {
			public getBaseTrend() {
				super("getBaseTrend");
			}

			public getBaseTrend_args getEmptyArgsInstance() {
				return new getBaseTrend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getBaseTrend_result result = new getBaseTrend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getBaseTrend_result result = new getBaseTrend_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getBaseTrend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getBaseTrend(args.json, resultHandler);
			}
		}

		public static class getCoreTrend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCoreTrend_args, ResponseBeanDto> {
			public getCoreTrend() {
				super("getCoreTrend");
			}

			public getCoreTrend_args getEmptyArgsInstance() {
				return new getCoreTrend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getCoreTrend_result result = new getCoreTrend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCoreTrend_result result = new getCoreTrend_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCoreTrend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCoreTrend(args.json, resultHandler);
			}
		}

		public static class getMainTrend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getMainTrend_args, ResponseBeanDto> {
			public getMainTrend() {
				super("getMainTrend");
			}

			public getMainTrend_args getEmptyArgsInstance() {
				return new getMainTrend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getMainTrend_result result = new getMainTrend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getMainTrend_result result = new getMainTrend_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getMainTrend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getMainTrend(args.json, resultHandler);
			}
		}

		public static class getSubsTrend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getSubsTrend_args, ResponseBeanDto> {
			public getSubsTrend() {
				super("getSubsTrend");
			}

			public getSubsTrend_args getEmptyArgsInstance() {
				return new getSubsTrend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getSubsTrend_result result = new getSubsTrend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getSubsTrend_result result = new getSubsTrend_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getSubsTrend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getSubsTrend(args.json, resultHandler);
			}
		}

		public static class getDistTrend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getDistTrend_args, ResponseBeanDto> {
			public getDistTrend() {
				super("getDistTrend");
			}

			public getDistTrend_args getEmptyArgsInstance() {
				return new getDistTrend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getDistTrend_result result = new getDistTrend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getDistTrend_result result = new getDistTrend_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getDistTrend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getDistTrend(args.json, resultHandler);
			}
		}

		public static class getOrgsTrend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrgsTrend_args, ResponseBeanDto> {
			public getOrgsTrend() {
				super("getOrgsTrend");
			}

			public getOrgsTrend_args getEmptyArgsInstance() {
				return new getOrgsTrend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getOrgsTrend_result result = new getOrgsTrend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrgsTrend_result result = new getOrgsTrend_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrgsTrend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrgsTrend(args.json, resultHandler);
			}
		}

		public static class getTorgTrend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getTorgTrend_args, ResponseBeanDto> {
			public getTorgTrend() {
				super("getTorgTrend");
			}

			public getTorgTrend_args getEmptyArgsInstance() {
				return new getTorgTrend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getTorgTrend_result result = new getTorgTrend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getTorgTrend_result result = new getTorgTrend_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getTorgTrend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getTorgTrend(args.json, resultHandler);
			}
		}

		public static class getSpecTrend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getSpecTrend_args, ResponseBeanDto> {
			public getSpecTrend() {
				super("getSpecTrend");
			}

			public getSpecTrend_args getEmptyArgsInstance() {
				return new getSpecTrend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getSpecTrend_result result = new getSpecTrend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getSpecTrend_result result = new getSpecTrend_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getSpecTrend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getSpecTrend(args.json, resultHandler);
			}
		}

		public static class setDefTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setDefTarget_args, ResponseBeanDto> {
			public setDefTarget() {
				super("setDefTarget");
			}

			public setDefTarget_args getEmptyArgsInstance() {
				return new setDefTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						setDefTarget_result result = new setDefTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setDefTarget_result result = new setDefTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setDefTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.setDefTarget(args.json, resultHandler);
			}
		}

		public static class tallestCow<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, tallestCow_args, ResponseBeanDto> {
			public tallestCow() {
				super("tallestCow");
			}

			public tallestCow_args getEmptyArgsInstance() {
				return new tallestCow_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						tallestCow_result result = new tallestCow_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						tallestCow_result result = new tallestCow_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, tallestCow_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.tallestCow(args.json, resultHandler);
			}
		}

		public static class orgCompareParam<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, orgCompareParam_args, ResponseBeanDto> {
			public orgCompareParam() {
				super("orgCompareParam");
			}

			public orgCompareParam_args getEmptyArgsInstance() {
				return new orgCompareParam_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						orgCompareParam_result result = new orgCompareParam_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						orgCompareParam_result result = new orgCompareParam_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, orgCompareParam_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.orgCompareParam(args.json, resultHandler);
			}
		}

		public static class orgCompare<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, orgCompare_args, ResponseBeanDto> {
			public orgCompare() {
				super("orgCompare");
			}

			public orgCompare_args getEmptyArgsInstance() {
				return new orgCompare_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						orgCompare_result result = new orgCompare_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						orgCompare_result result = new orgCompare_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, orgCompare_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.orgCompare(args.json, resultHandler);
			}
		}

		public static class exportBill<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, exportBill_args, ResponseBeanDto> {
			public exportBill() {
				super("exportBill");
			}

			public exportBill_args getEmptyArgsInstance() {
				return new exportBill_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						exportBill_result result = new exportBill_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						exportBill_result result = new exportBill_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, exportBill_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.exportBill(args.json, resultHandler);
			}
		}

		public static class downloadBill<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, downloadBill_args, ResponseBeanDto> {
			public downloadBill() {
				super("downloadBill");
			}

			public downloadBill_args getEmptyArgsInstance() {
				return new downloadBill_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						downloadBill_result result = new downloadBill_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						downloadBill_result result = new downloadBill_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, downloadBill_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.downloadBill(args.json, resultHandler);
			}
		}

	}

	public static class getRegTarget_args
			implements org.apache.thrift.TBase<getRegTarget_args, getRegTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getRegTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRegTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRegTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRegTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegTarget_args.class, metaDataMap);
		}

		public getRegTarget_args() {
		}

		public getRegTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRegTarget_args(getRegTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getRegTarget_args deepCopy() {
			return new getRegTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getRegTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRegTarget_args)
				return this.equals((getRegTarget_args) that);
			return false;
		}

		public boolean equals(getRegTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRegTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRegTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRegTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRegTarget_argsStandardScheme getScheme() {
				return new getRegTarget_argsStandardScheme();
			}
		}

		private static class getRegTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRegTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRegTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRegTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRegTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRegTarget_argsTupleScheme getScheme() {
				return new getRegTarget_argsTupleScheme();
			}
		}

		private static class getRegTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getRegTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRegTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRegTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getRegTarget_result
			implements org.apache.thrift.TBase<getRegTarget_result, getRegTarget_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getRegTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRegTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRegTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRegTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegTarget_result.class, metaDataMap);
		}

		public getRegTarget_result() {
		}

		public getRegTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRegTarget_result(getRegTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getRegTarget_result deepCopy() {
			return new getRegTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getRegTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRegTarget_result)
				return this.equals((getRegTarget_result) that);
			return false;
		}

		public boolean equals(getRegTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRegTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRegTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRegTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getRegTarget_resultStandardScheme getScheme() {
				return new getRegTarget_resultStandardScheme();
			}
		}

		private static class getRegTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRegTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRegTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRegTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRegTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRegTarget_resultTupleScheme getScheme() {
				return new getRegTarget_resultTupleScheme();
			}
		}

		private static class getRegTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getRegTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRegTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRegTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBlockMenu_args
			implements org.apache.thrift.TBase<getBlockMenu_args, getBlockMenu_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getBlockMenu_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBlockMenu_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBlockMenu_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBlockMenu_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlockMenu_args.class, metaDataMap);
		}

		public getBlockMenu_args() {
		}

		public getBlockMenu_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBlockMenu_args(getBlockMenu_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getBlockMenu_args deepCopy() {
			return new getBlockMenu_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getBlockMenu_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBlockMenu_args)
				return this.equals((getBlockMenu_args) that);
			return false;
		}

		public boolean equals(getBlockMenu_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBlockMenu_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBlockMenu_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBlockMenu_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockMenu_argsStandardScheme getScheme() {
				return new getBlockMenu_argsStandardScheme();
			}
		}

		private static class getBlockMenu_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBlockMenu_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBlockMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBlockMenu_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBlockMenu_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockMenu_argsTupleScheme getScheme() {
				return new getBlockMenu_argsTupleScheme();
			}
		}

		private static class getBlockMenu_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBlockMenu_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBlockMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBlockMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBlockMenu_result
			implements org.apache.thrift.TBase<getBlockMenu_result, getBlockMenu_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getBlockMenu_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBlockMenu_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBlockMenu_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBlockMenu_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlockMenu_result.class, metaDataMap);
		}

		public getBlockMenu_result() {
		}

		public getBlockMenu_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBlockMenu_result(getBlockMenu_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getBlockMenu_result deepCopy() {
			return new getBlockMenu_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getBlockMenu_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBlockMenu_result)
				return this.equals((getBlockMenu_result) that);
			return false;
		}

		public boolean equals(getBlockMenu_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBlockMenu_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBlockMenu_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBlockMenu_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockMenu_resultStandardScheme getScheme() {
				return new getBlockMenu_resultStandardScheme();
			}
		}

		private static class getBlockMenu_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBlockMenu_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBlockMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBlockMenu_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBlockMenu_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockMenu_resultTupleScheme getScheme() {
				return new getBlockMenu_resultTupleScheme();
			}
		}

		private static class getBlockMenu_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBlockMenu_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBlockMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBlockMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBlockTarget_args
			implements org.apache.thrift.TBase<getBlockTarget_args, getBlockTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getBlockTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBlockTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBlockTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBlockTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlockTarget_args.class, metaDataMap);
		}

		public getBlockTarget_args() {
		}

		public getBlockTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBlockTarget_args(getBlockTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getBlockTarget_args deepCopy() {
			return new getBlockTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getBlockTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBlockTarget_args)
				return this.equals((getBlockTarget_args) that);
			return false;
		}

		public boolean equals(getBlockTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBlockTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBlockTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBlockTarget_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockTarget_argsStandardScheme getScheme() {
				return new getBlockTarget_argsStandardScheme();
			}
		}

		private static class getBlockTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBlockTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBlockTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBlockTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBlockTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockTarget_argsTupleScheme getScheme() {
				return new getBlockTarget_argsTupleScheme();
			}
		}

		private static class getBlockTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBlockTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBlockTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBlockTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBlockTarget_result
			implements org.apache.thrift.TBase<getBlockTarget_result, getBlockTarget_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getBlockTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBlockTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBlockTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBlockTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlockTarget_result.class, metaDataMap);
		}

		public getBlockTarget_result() {
		}

		public getBlockTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBlockTarget_result(getBlockTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getBlockTarget_result deepCopy() {
			return new getBlockTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getBlockTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBlockTarget_result)
				return this.equals((getBlockTarget_result) that);
			return false;
		}

		public boolean equals(getBlockTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBlockTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBlockTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBlockTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockTarget_resultStandardScheme getScheme() {
				return new getBlockTarget_resultStandardScheme();
			}
		}

		private static class getBlockTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBlockTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBlockTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBlockTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBlockTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockTarget_resultTupleScheme getScheme() {
				return new getBlockTarget_resultTupleScheme();
			}
		}

		private static class getBlockTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBlockTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBlockTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBlockTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBlockOrgTarget_args
			implements org.apache.thrift.TBase<getBlockOrgTarget_args, getBlockOrgTarget_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getBlockOrgTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBlockOrgTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBlockOrgTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBlockOrgTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlockOrgTarget_args.class, metaDataMap);
		}

		public getBlockOrgTarget_args() {
		}

		public getBlockOrgTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBlockOrgTarget_args(getBlockOrgTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getBlockOrgTarget_args deepCopy() {
			return new getBlockOrgTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getBlockOrgTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBlockOrgTarget_args)
				return this.equals((getBlockOrgTarget_args) that);
			return false;
		}

		public boolean equals(getBlockOrgTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBlockOrgTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBlockOrgTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBlockOrgTarget_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockOrgTarget_argsStandardScheme getScheme() {
				return new getBlockOrgTarget_argsStandardScheme();
			}
		}

		private static class getBlockOrgTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBlockOrgTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBlockOrgTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBlockOrgTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBlockOrgTarget_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockOrgTarget_argsTupleScheme getScheme() {
				return new getBlockOrgTarget_argsTupleScheme();
			}
		}

		private static class getBlockOrgTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBlockOrgTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBlockOrgTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBlockOrgTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBlockOrgTarget_result
			implements org.apache.thrift.TBase<getBlockOrgTarget_result, getBlockOrgTarget_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getBlockOrgTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBlockOrgTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBlockOrgTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBlockOrgTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlockOrgTarget_result.class, metaDataMap);
		}

		public getBlockOrgTarget_result() {
		}

		public getBlockOrgTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBlockOrgTarget_result(getBlockOrgTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getBlockOrgTarget_result deepCopy() {
			return new getBlockOrgTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getBlockOrgTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBlockOrgTarget_result)
				return this.equals((getBlockOrgTarget_result) that);
			return false;
		}

		public boolean equals(getBlockOrgTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBlockOrgTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBlockOrgTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBlockOrgTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockOrgTarget_resultStandardScheme getScheme() {
				return new getBlockOrgTarget_resultStandardScheme();
			}
		}

		private static class getBlockOrgTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBlockOrgTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBlockOrgTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBlockOrgTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBlockOrgTarget_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBlockOrgTarget_resultTupleScheme getScheme() {
				return new getBlockOrgTarget_resultTupleScheme();
			}
		}

		private static class getBlockOrgTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBlockOrgTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBlockOrgTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBlockOrgTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class myBlockList_args implements org.apache.thrift.TBase<myBlockList_args, myBlockList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<myBlockList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"myBlockList_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new myBlockList_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new myBlockList_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myBlockList_args.class, metaDataMap);
		}

		public myBlockList_args() {
		}

		public myBlockList_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public myBlockList_args(myBlockList_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public myBlockList_args deepCopy() {
			return new myBlockList_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public myBlockList_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof myBlockList_args)
				return this.equals((myBlockList_args) that);
			return false;
		}

		public boolean equals(myBlockList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(myBlockList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("myBlockList_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class myBlockList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public myBlockList_argsStandardScheme getScheme() {
				return new myBlockList_argsStandardScheme();
			}
		}

		private static class myBlockList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<myBlockList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, myBlockList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, myBlockList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class myBlockList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public myBlockList_argsTupleScheme getScheme() {
				return new myBlockList_argsTupleScheme();
			}
		}

		private static class myBlockList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<myBlockList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, myBlockList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, myBlockList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class myBlockList_result
			implements org.apache.thrift.TBase<myBlockList_result, myBlockList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<myBlockList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"myBlockList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new myBlockList_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new myBlockList_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myBlockList_result.class, metaDataMap);
		}

		public myBlockList_result() {
		}

		public myBlockList_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public myBlockList_result(myBlockList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public myBlockList_result deepCopy() {
			return new myBlockList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public myBlockList_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof myBlockList_result)
				return this.equals((myBlockList_result) that);
			return false;
		}

		public boolean equals(myBlockList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(myBlockList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("myBlockList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class myBlockList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public myBlockList_resultStandardScheme getScheme() {
				return new myBlockList_resultStandardScheme();
			}
		}

		private static class myBlockList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<myBlockList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, myBlockList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, myBlockList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class myBlockList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public myBlockList_resultTupleScheme getScheme() {
				return new myBlockList_resultTupleScheme();
			}
		}

		private static class myBlockList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<myBlockList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, myBlockList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, myBlockList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class deleteBlock_args implements org.apache.thrift.TBase<deleteBlock_args, deleteBlock_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<deleteBlock_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteBlock_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteBlock_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteBlock_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBlock_args.class, metaDataMap);
		}

		public deleteBlock_args() {
		}

		public deleteBlock_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteBlock_args(deleteBlock_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public deleteBlock_args deepCopy() {
			return new deleteBlock_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public deleteBlock_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteBlock_args)
				return this.equals((deleteBlock_args) that);
			return false;
		}

		public boolean equals(deleteBlock_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(deleteBlock_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteBlock_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteBlock_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public deleteBlock_argsStandardScheme getScheme() {
				return new deleteBlock_argsStandardScheme();
			}
		}

		private static class deleteBlock_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<deleteBlock_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBlock_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteBlock_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public deleteBlock_argsTupleScheme getScheme() {
				return new deleteBlock_argsTupleScheme();
			}
		}

		private static class deleteBlock_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<deleteBlock_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, deleteBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, deleteBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class deleteBlock_result
			implements org.apache.thrift.TBase<deleteBlock_result, deleteBlock_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<deleteBlock_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteBlock_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteBlock_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteBlock_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBlock_result.class, metaDataMap);
		}

		public deleteBlock_result() {
		}

		public deleteBlock_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteBlock_result(deleteBlock_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public deleteBlock_result deepCopy() {
			return new deleteBlock_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public deleteBlock_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteBlock_result)
				return this.equals((deleteBlock_result) that);
			return false;
		}

		public boolean equals(deleteBlock_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(deleteBlock_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteBlock_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteBlock_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public deleteBlock_resultStandardScheme getScheme() {
				return new deleteBlock_resultStandardScheme();
			}
		}

		private static class deleteBlock_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<deleteBlock_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBlock_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteBlock_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public deleteBlock_resultTupleScheme getScheme() {
				return new deleteBlock_resultTupleScheme();
			}
		}

		private static class deleteBlock_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<deleteBlock_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, deleteBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, deleteBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTarget_args implements org.apache.thrift.TBase<getTarget_args, getTarget_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTarget_args.class, metaDataMap);
		}

		public getTarget_args() {
		}

		public getTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTarget_args(getTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getTarget_args deepCopy() {
			return new getTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTarget_args)
				return this.equals((getTarget_args) that);
			return false;
		}

		public boolean equals(getTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTarget_argsStandardScheme getScheme() {
				return new getTarget_argsStandardScheme();
			}
		}

		private static class getTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTarget_argsTupleScheme getScheme() {
				return new getTarget_argsTupleScheme();
			}
		}

		private static class getTarget_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTarget_result implements org.apache.thrift.TBase<getTarget_result, getTarget_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTarget_result.class, metaDataMap);
		}

		public getTarget_result() {
		}

		public getTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTarget_result(getTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getTarget_result deepCopy() {
			return new getTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTarget_result)
				return this.equals((getTarget_result) that);
			return false;
		}

		public boolean equals(getTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTarget_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTarget_resultStandardScheme getScheme() {
				return new getTarget_resultStandardScheme();
			}
		}

		private static class getTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTarget_resultTupleScheme getScheme() {
				return new getTarget_resultTupleScheme();
			}
		}

		private static class getTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class saveBlock_args implements org.apache.thrift.TBase<saveBlock_args, saveBlock_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<saveBlock_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"saveBlock_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveBlock_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveBlock_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBlock_args.class, metaDataMap);
		}

		public saveBlock_args() {
		}

		public saveBlock_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public saveBlock_args(saveBlock_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public saveBlock_args deepCopy() {
			return new saveBlock_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public saveBlock_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof saveBlock_args)
				return this.equals((saveBlock_args) that);
			return false;
		}

		public boolean equals(saveBlock_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(saveBlock_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("saveBlock_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class saveBlock_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public saveBlock_argsStandardScheme getScheme() {
				return new saveBlock_argsStandardScheme();
			}
		}

		private static class saveBlock_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<saveBlock_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, saveBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, saveBlock_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class saveBlock_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public saveBlock_argsTupleScheme getScheme() {
				return new saveBlock_argsTupleScheme();
			}
		}

		private static class saveBlock_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveBlock_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, saveBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, saveBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class saveBlock_result implements org.apache.thrift.TBase<saveBlock_result, saveBlock_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<saveBlock_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"saveBlock_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveBlock_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveBlock_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBlock_result.class, metaDataMap);
		}

		public saveBlock_result() {
		}

		public saveBlock_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public saveBlock_result(saveBlock_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public saveBlock_result deepCopy() {
			return new saveBlock_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public saveBlock_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof saveBlock_result)
				return this.equals((saveBlock_result) that);
			return false;
		}

		public boolean equals(saveBlock_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(saveBlock_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("saveBlock_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class saveBlock_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public saveBlock_resultStandardScheme getScheme() {
				return new saveBlock_resultStandardScheme();
			}
		}

		private static class saveBlock_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<saveBlock_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, saveBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, saveBlock_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class saveBlock_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public saveBlock_resultTupleScheme getScheme() {
				return new saveBlock_resultTupleScheme();
			}
		}

		private static class saveBlock_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<saveBlock_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, saveBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, saveBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class editBlock_args implements org.apache.thrift.TBase<editBlock_args, editBlock_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<editBlock_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"editBlock_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new editBlock_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new editBlock_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBlock_args.class, metaDataMap);
		}

		public editBlock_args() {
		}

		public editBlock_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public editBlock_args(editBlock_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public editBlock_args deepCopy() {
			return new editBlock_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public editBlock_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof editBlock_args)
				return this.equals((editBlock_args) that);
			return false;
		}

		public boolean equals(editBlock_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(editBlock_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("editBlock_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class editBlock_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public editBlock_argsStandardScheme getScheme() {
				return new editBlock_argsStandardScheme();
			}
		}

		private static class editBlock_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<editBlock_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, editBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, editBlock_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class editBlock_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public editBlock_argsTupleScheme getScheme() {
				return new editBlock_argsTupleScheme();
			}
		}

		private static class editBlock_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<editBlock_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, editBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, editBlock_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class editBlock_result implements org.apache.thrift.TBase<editBlock_result, editBlock_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<editBlock_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"editBlock_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new editBlock_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new editBlock_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBlock_result.class, metaDataMap);
		}

		public editBlock_result() {
		}

		public editBlock_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public editBlock_result(editBlock_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public editBlock_result deepCopy() {
			return new editBlock_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public editBlock_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof editBlock_result)
				return this.equals((editBlock_result) that);
			return false;
		}

		public boolean equals(editBlock_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(editBlock_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("editBlock_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class editBlock_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public editBlock_resultStandardScheme getScheme() {
				return new editBlock_resultStandardScheme();
			}
		}

		private static class editBlock_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<editBlock_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, editBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, editBlock_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class editBlock_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public editBlock_resultTupleScheme getScheme() {
				return new editBlock_resultTupleScheme();
			}
		}

		private static class editBlock_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<editBlock_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, editBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, editBlock_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMainTarget_args
			implements org.apache.thrift.TBase<getMainTarget_args, getMainTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMainTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMainTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMainTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMainTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainTarget_args.class, metaDataMap);
		}

		public getMainTarget_args() {
		}

		public getMainTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMainTarget_args(getMainTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getMainTarget_args deepCopy() {
			return new getMainTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getMainTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMainTarget_args)
				return this.equals((getMainTarget_args) that);
			return false;
		}

		public boolean equals(getMainTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMainTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMainTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMainTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTarget_argsStandardScheme getScheme() {
				return new getMainTarget_argsStandardScheme();
			}
		}

		private static class getMainTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMainTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMainTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMainTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMainTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTarget_argsTupleScheme getScheme() {
				return new getMainTarget_argsTupleScheme();
			}
		}

		private static class getMainTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMainTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMainTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMainTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMainTarget_result
			implements org.apache.thrift.TBase<getMainTarget_result, getMainTarget_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getMainTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMainTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMainTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMainTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainTarget_result.class, metaDataMap);
		}

		public getMainTarget_result() {
		}

		public getMainTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMainTarget_result(getMainTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getMainTarget_result deepCopy() {
			return new getMainTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getMainTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMainTarget_result)
				return this.equals((getMainTarget_result) that);
			return false;
		}

		public boolean equals(getMainTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMainTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMainTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMainTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTarget_resultStandardScheme getScheme() {
				return new getMainTarget_resultStandardScheme();
			}
		}

		private static class getMainTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMainTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMainTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMainTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMainTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTarget_resultTupleScheme getScheme() {
				return new getMainTarget_resultTupleScheme();
			}
		}

		private static class getMainTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMainTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMainTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMainTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubTarget_args
			implements org.apache.thrift.TBase<getSubTarget_args, getSubTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSubTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubTarget_args.class, metaDataMap);
		}

		public getSubTarget_args() {
		}

		public getSubTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubTarget_args(getSubTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getSubTarget_args deepCopy() {
			return new getSubTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getSubTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubTarget_args)
				return this.equals((getSubTarget_args) that);
			return false;
		}

		public boolean equals(getSubTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubTarget_argsStandardScheme getScheme() {
				return new getSubTarget_argsStandardScheme();
			}
		}

		private static class getSubTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubTarget_argsTupleScheme getScheme() {
				return new getSubTarget_argsTupleScheme();
			}
		}

		private static class getSubTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSubTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubTarget_result
			implements org.apache.thrift.TBase<getSubTarget_result, getSubTarget_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSubTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubTarget_result.class, metaDataMap);
		}

		public getSubTarget_result() {
		}

		public getSubTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubTarget_result(getSubTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getSubTarget_result deepCopy() {
			return new getSubTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getSubTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubTarget_result)
				return this.equals((getSubTarget_result) that);
			return false;
		}

		public boolean equals(getSubTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getSubTarget_resultStandardScheme getScheme() {
				return new getSubTarget_resultStandardScheme();
			}
		}

		private static class getSubTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubTarget_resultTupleScheme getScheme() {
				return new getSubTarget_resultTupleScheme();
			}
		}

		private static class getSubTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSubTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBaseTrend_args
			implements org.apache.thrift.TBase<getBaseTrend_args, getBaseTrend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getBaseTrend_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBaseTrend_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBaseTrend_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBaseTrend_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBaseTrend_args.class, metaDataMap);
		}

		public getBaseTrend_args() {
		}

		public getBaseTrend_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBaseTrend_args(getBaseTrend_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getBaseTrend_args deepCopy() {
			return new getBaseTrend_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getBaseTrend_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBaseTrend_args)
				return this.equals((getBaseTrend_args) that);
			return false;
		}

		public boolean equals(getBaseTrend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBaseTrend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBaseTrend_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBaseTrend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBaseTrend_argsStandardScheme getScheme() {
				return new getBaseTrend_argsStandardScheme();
			}
		}

		private static class getBaseTrend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBaseTrend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBaseTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBaseTrend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBaseTrend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBaseTrend_argsTupleScheme getScheme() {
				return new getBaseTrend_argsTupleScheme();
			}
		}

		private static class getBaseTrend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBaseTrend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBaseTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBaseTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getBaseTrend_result
			implements org.apache.thrift.TBase<getBaseTrend_result, getBaseTrend_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getBaseTrend_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBaseTrend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBaseTrend_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBaseTrend_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBaseTrend_result.class, metaDataMap);
		}

		public getBaseTrend_result() {
		}

		public getBaseTrend_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBaseTrend_result(getBaseTrend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getBaseTrend_result deepCopy() {
			return new getBaseTrend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getBaseTrend_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBaseTrend_result)
				return this.equals((getBaseTrend_result) that);
			return false;
		}

		public boolean equals(getBaseTrend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBaseTrend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBaseTrend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBaseTrend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getBaseTrend_resultStandardScheme getScheme() {
				return new getBaseTrend_resultStandardScheme();
			}
		}

		private static class getBaseTrend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBaseTrend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBaseTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBaseTrend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBaseTrend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getBaseTrend_resultTupleScheme getScheme() {
				return new getBaseTrend_resultTupleScheme();
			}
		}

		private static class getBaseTrend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBaseTrend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBaseTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBaseTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getCoreTrend_args
			implements org.apache.thrift.TBase<getCoreTrend_args, getCoreTrend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getCoreTrend_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCoreTrend_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCoreTrend_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCoreTrend_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoreTrend_args.class, metaDataMap);
		}

		public getCoreTrend_args() {
		}

		public getCoreTrend_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCoreTrend_args(getCoreTrend_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getCoreTrend_args deepCopy() {
			return new getCoreTrend_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getCoreTrend_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCoreTrend_args)
				return this.equals((getCoreTrend_args) that);
			return false;
		}

		public boolean equals(getCoreTrend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCoreTrend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCoreTrend_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCoreTrend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCoreTrend_argsStandardScheme getScheme() {
				return new getCoreTrend_argsStandardScheme();
			}
		}

		private static class getCoreTrend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCoreTrend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCoreTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCoreTrend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCoreTrend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCoreTrend_argsTupleScheme getScheme() {
				return new getCoreTrend_argsTupleScheme();
			}
		}

		private static class getCoreTrend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCoreTrend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCoreTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCoreTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getCoreTrend_result
			implements org.apache.thrift.TBase<getCoreTrend_result, getCoreTrend_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getCoreTrend_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCoreTrend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCoreTrend_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCoreTrend_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoreTrend_result.class, metaDataMap);
		}

		public getCoreTrend_result() {
		}

		public getCoreTrend_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCoreTrend_result(getCoreTrend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getCoreTrend_result deepCopy() {
			return new getCoreTrend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getCoreTrend_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCoreTrend_result)
				return this.equals((getCoreTrend_result) that);
			return false;
		}

		public boolean equals(getCoreTrend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCoreTrend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCoreTrend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCoreTrend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getCoreTrend_resultStandardScheme getScheme() {
				return new getCoreTrend_resultStandardScheme();
			}
		}

		private static class getCoreTrend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCoreTrend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCoreTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCoreTrend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCoreTrend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCoreTrend_resultTupleScheme getScheme() {
				return new getCoreTrend_resultTupleScheme();
			}
		}

		private static class getCoreTrend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCoreTrend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCoreTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCoreTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMainTrend_args
			implements org.apache.thrift.TBase<getMainTrend_args, getMainTrend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMainTrend_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMainTrend_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMainTrend_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMainTrend_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainTrend_args.class, metaDataMap);
		}

		public getMainTrend_args() {
		}

		public getMainTrend_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMainTrend_args(getMainTrend_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getMainTrend_args deepCopy() {
			return new getMainTrend_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getMainTrend_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMainTrend_args)
				return this.equals((getMainTrend_args) that);
			return false;
		}

		public boolean equals(getMainTrend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMainTrend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMainTrend_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMainTrend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTrend_argsStandardScheme getScheme() {
				return new getMainTrend_argsStandardScheme();
			}
		}

		private static class getMainTrend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMainTrend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMainTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMainTrend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMainTrend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTrend_argsTupleScheme getScheme() {
				return new getMainTrend_argsTupleScheme();
			}
		}

		private static class getMainTrend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMainTrend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMainTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMainTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMainTrend_result
			implements org.apache.thrift.TBase<getMainTrend_result, getMainTrend_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMainTrend_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMainTrend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMainTrend_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMainTrend_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainTrend_result.class, metaDataMap);
		}

		public getMainTrend_result() {
		}

		public getMainTrend_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMainTrend_result(getMainTrend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getMainTrend_result deepCopy() {
			return new getMainTrend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getMainTrend_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMainTrend_result)
				return this.equals((getMainTrend_result) that);
			return false;
		}

		public boolean equals(getMainTrend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMainTrend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMainTrend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMainTrend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTrend_resultStandardScheme getScheme() {
				return new getMainTrend_resultStandardScheme();
			}
		}

		private static class getMainTrend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMainTrend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMainTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMainTrend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMainTrend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTrend_resultTupleScheme getScheme() {
				return new getMainTrend_resultTupleScheme();
			}
		}

		private static class getMainTrend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMainTrend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMainTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMainTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubsTrend_args
			implements org.apache.thrift.TBase<getSubsTrend_args, getSubsTrend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSubsTrend_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubsTrend_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubsTrend_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubsTrend_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubsTrend_args.class, metaDataMap);
		}

		public getSubsTrend_args() {
		}

		public getSubsTrend_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubsTrend_args(getSubsTrend_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getSubsTrend_args deepCopy() {
			return new getSubsTrend_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getSubsTrend_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubsTrend_args)
				return this.equals((getSubsTrend_args) that);
			return false;
		}

		public boolean equals(getSubsTrend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubsTrend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubsTrend_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubsTrend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubsTrend_argsStandardScheme getScheme() {
				return new getSubsTrend_argsStandardScheme();
			}
		}

		private static class getSubsTrend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubsTrend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubsTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubsTrend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubsTrend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubsTrend_argsTupleScheme getScheme() {
				return new getSubsTrend_argsTupleScheme();
			}
		}

		private static class getSubsTrend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSubsTrend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubsTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubsTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubsTrend_result
			implements org.apache.thrift.TBase<getSubsTrend_result, getSubsTrend_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSubsTrend_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubsTrend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubsTrend_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubsTrend_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubsTrend_result.class, metaDataMap);
		}

		public getSubsTrend_result() {
		}

		public getSubsTrend_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubsTrend_result(getSubsTrend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getSubsTrend_result deepCopy() {
			return new getSubsTrend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getSubsTrend_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubsTrend_result)
				return this.equals((getSubsTrend_result) that);
			return false;
		}

		public boolean equals(getSubsTrend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubsTrend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubsTrend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubsTrend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getSubsTrend_resultStandardScheme getScheme() {
				return new getSubsTrend_resultStandardScheme();
			}
		}

		private static class getSubsTrend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubsTrend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubsTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubsTrend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubsTrend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubsTrend_resultTupleScheme getScheme() {
				return new getSubsTrend_resultTupleScheme();
			}
		}

		private static class getSubsTrend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSubsTrend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubsTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubsTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getDistTrend_args
			implements org.apache.thrift.TBase<getDistTrend_args, getDistTrend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getDistTrend_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getDistTrend_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDistTrend_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDistTrend_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDistTrend_args.class, metaDataMap);
		}

		public getDistTrend_args() {
		}

		public getDistTrend_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getDistTrend_args(getDistTrend_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getDistTrend_args deepCopy() {
			return new getDistTrend_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getDistTrend_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getDistTrend_args)
				return this.equals((getDistTrend_args) that);
			return false;
		}

		public boolean equals(getDistTrend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getDistTrend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getDistTrend_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getDistTrend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getDistTrend_argsStandardScheme getScheme() {
				return new getDistTrend_argsStandardScheme();
			}
		}

		private static class getDistTrend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getDistTrend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getDistTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getDistTrend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getDistTrend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getDistTrend_argsTupleScheme getScheme() {
				return new getDistTrend_argsTupleScheme();
			}
		}

		private static class getDistTrend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getDistTrend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getDistTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getDistTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getDistTrend_result
			implements org.apache.thrift.TBase<getDistTrend_result, getDistTrend_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getDistTrend_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getDistTrend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDistTrend_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDistTrend_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDistTrend_result.class, metaDataMap);
		}

		public getDistTrend_result() {
		}

		public getDistTrend_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getDistTrend_result(getDistTrend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getDistTrend_result deepCopy() {
			return new getDistTrend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getDistTrend_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getDistTrend_result)
				return this.equals((getDistTrend_result) that);
			return false;
		}

		public boolean equals(getDistTrend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getDistTrend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getDistTrend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getDistTrend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getDistTrend_resultStandardScheme getScheme() {
				return new getDistTrend_resultStandardScheme();
			}
		}

		private static class getDistTrend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getDistTrend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getDistTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getDistTrend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getDistTrend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getDistTrend_resultTupleScheme getScheme() {
				return new getDistTrend_resultTupleScheme();
			}
		}

		private static class getDistTrend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getDistTrend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getDistTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getDistTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getOrgsTrend_args
			implements org.apache.thrift.TBase<getOrgsTrend_args, getOrgsTrend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrgsTrend_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrgsTrend_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrgsTrend_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrgsTrend_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgsTrend_args.class, metaDataMap);
		}

		public getOrgsTrend_args() {
		}

		public getOrgsTrend_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrgsTrend_args(getOrgsTrend_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getOrgsTrend_args deepCopy() {
			return new getOrgsTrend_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getOrgsTrend_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrgsTrend_args)
				return this.equals((getOrgsTrend_args) that);
			return false;
		}

		public boolean equals(getOrgsTrend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrgsTrend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrgsTrend_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrgsTrend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getOrgsTrend_argsStandardScheme getScheme() {
				return new getOrgsTrend_argsStandardScheme();
			}
		}

		private static class getOrgsTrend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrgsTrend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgsTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgsTrend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrgsTrend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getOrgsTrend_argsTupleScheme getScheme() {
				return new getOrgsTrend_argsTupleScheme();
			}
		}

		private static class getOrgsTrend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrgsTrend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrgsTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrgsTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getOrgsTrend_result
			implements org.apache.thrift.TBase<getOrgsTrend_result, getOrgsTrend_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrgsTrend_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrgsTrend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrgsTrend_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrgsTrend_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgsTrend_result.class, metaDataMap);
		}

		public getOrgsTrend_result() {
		}

		public getOrgsTrend_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrgsTrend_result(getOrgsTrend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getOrgsTrend_result deepCopy() {
			return new getOrgsTrend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getOrgsTrend_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrgsTrend_result)
				return this.equals((getOrgsTrend_result) that);
			return false;
		}

		public boolean equals(getOrgsTrend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrgsTrend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrgsTrend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrgsTrend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getOrgsTrend_resultStandardScheme getScheme() {
				return new getOrgsTrend_resultStandardScheme();
			}
		}

		private static class getOrgsTrend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrgsTrend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgsTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgsTrend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrgsTrend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getOrgsTrend_resultTupleScheme getScheme() {
				return new getOrgsTrend_resultTupleScheme();
			}
		}

		private static class getOrgsTrend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrgsTrend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrgsTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrgsTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTorgTrend_args
			implements org.apache.thrift.TBase<getTorgTrend_args, getTorgTrend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getTorgTrend_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTorgTrend_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTorgTrend_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTorgTrend_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTorgTrend_args.class, metaDataMap);
		}

		public getTorgTrend_args() {
		}

		public getTorgTrend_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTorgTrend_args(getTorgTrend_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getTorgTrend_args deepCopy() {
			return new getTorgTrend_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getTorgTrend_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTorgTrend_args)
				return this.equals((getTorgTrend_args) that);
			return false;
		}

		public boolean equals(getTorgTrend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTorgTrend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTorgTrend_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTorgTrend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTorgTrend_argsStandardScheme getScheme() {
				return new getTorgTrend_argsStandardScheme();
			}
		}

		private static class getTorgTrend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTorgTrend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTorgTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTorgTrend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTorgTrend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTorgTrend_argsTupleScheme getScheme() {
				return new getTorgTrend_argsTupleScheme();
			}
		}

		private static class getTorgTrend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getTorgTrend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTorgTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTorgTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTorgTrend_result
			implements org.apache.thrift.TBase<getTorgTrend_result, getTorgTrend_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getTorgTrend_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTorgTrend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTorgTrend_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTorgTrend_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTorgTrend_result.class, metaDataMap);
		}

		public getTorgTrend_result() {
		}

		public getTorgTrend_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTorgTrend_result(getTorgTrend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getTorgTrend_result deepCopy() {
			return new getTorgTrend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getTorgTrend_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTorgTrend_result)
				return this.equals((getTorgTrend_result) that);
			return false;
		}

		public boolean equals(getTorgTrend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTorgTrend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTorgTrend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTorgTrend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getTorgTrend_resultStandardScheme getScheme() {
				return new getTorgTrend_resultStandardScheme();
			}
		}

		private static class getTorgTrend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTorgTrend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTorgTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTorgTrend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTorgTrend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTorgTrend_resultTupleScheme getScheme() {
				return new getTorgTrend_resultTupleScheme();
			}
		}

		private static class getTorgTrend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getTorgTrend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTorgTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTorgTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSpecTrend_args
			implements org.apache.thrift.TBase<getSpecTrend_args, getSpecTrend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSpecTrend_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSpecTrend_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSpecTrend_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSpecTrend_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecTrend_args.class, metaDataMap);
		}

		public getSpecTrend_args() {
		}

		public getSpecTrend_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSpecTrend_args(getSpecTrend_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getSpecTrend_args deepCopy() {
			return new getSpecTrend_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getSpecTrend_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSpecTrend_args)
				return this.equals((getSpecTrend_args) that);
			return false;
		}

		public boolean equals(getSpecTrend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSpecTrend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSpecTrend_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSpecTrend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSpecTrend_argsStandardScheme getScheme() {
				return new getSpecTrend_argsStandardScheme();
			}
		}

		private static class getSpecTrend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSpecTrend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecTrend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSpecTrend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSpecTrend_argsTupleScheme getScheme() {
				return new getSpecTrend_argsTupleScheme();
			}
		}

		private static class getSpecTrend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSpecTrend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSpecTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSpecTrend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSpecTrend_result
			implements org.apache.thrift.TBase<getSpecTrend_result, getSpecTrend_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSpecTrend_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSpecTrend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSpecTrend_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSpecTrend_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecTrend_result.class, metaDataMap);
		}

		public getSpecTrend_result() {
		}

		public getSpecTrend_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSpecTrend_result(getSpecTrend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getSpecTrend_result deepCopy() {
			return new getSpecTrend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getSpecTrend_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSpecTrend_result)
				return this.equals((getSpecTrend_result) that);
			return false;
		}

		public boolean equals(getSpecTrend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSpecTrend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSpecTrend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSpecTrend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getSpecTrend_resultStandardScheme getScheme() {
				return new getSpecTrend_resultStandardScheme();
			}
		}

		private static class getSpecTrend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSpecTrend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecTrend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSpecTrend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSpecTrend_resultTupleScheme getScheme() {
				return new getSpecTrend_resultTupleScheme();
			}
		}

		private static class getSpecTrend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSpecTrend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSpecTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSpecTrend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setDefTarget_args
			implements org.apache.thrift.TBase<setDefTarget_args, setDefTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<setDefTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setDefTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setDefTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setDefTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDefTarget_args.class, metaDataMap);
		}

		public setDefTarget_args() {
		}

		public setDefTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setDefTarget_args(setDefTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public setDefTarget_args deepCopy() {
			return new setDefTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public setDefTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setDefTarget_args)
				return this.equals((setDefTarget_args) that);
			return false;
		}

		public boolean equals(setDefTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setDefTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setDefTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setDefTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDefTarget_argsStandardScheme getScheme() {
				return new setDefTarget_argsStandardScheme();
			}
		}

		private static class setDefTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setDefTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setDefTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setDefTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setDefTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDefTarget_argsTupleScheme getScheme() {
				return new setDefTarget_argsTupleScheme();
			}
		}

		private static class setDefTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setDefTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setDefTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setDefTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setDefTarget_result
			implements org.apache.thrift.TBase<setDefTarget_result, setDefTarget_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setDefTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setDefTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setDefTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setDefTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDefTarget_result.class, metaDataMap);
		}

		public setDefTarget_result() {
		}

		public setDefTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setDefTarget_result(setDefTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public setDefTarget_result deepCopy() {
			return new setDefTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public setDefTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setDefTarget_result)
				return this.equals((setDefTarget_result) that);
			return false;
		}

		public boolean equals(setDefTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setDefTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setDefTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setDefTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setDefTarget_resultStandardScheme getScheme() {
				return new setDefTarget_resultStandardScheme();
			}
		}

		private static class setDefTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setDefTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setDefTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setDefTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setDefTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDefTarget_resultTupleScheme getScheme() {
				return new setDefTarget_resultTupleScheme();
			}
		}

		private static class setDefTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setDefTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setDefTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setDefTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class tallestCow_args implements org.apache.thrift.TBase<tallestCow_args, tallestCow_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<tallestCow_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"tallestCow_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new tallestCow_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new tallestCow_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tallestCow_args.class, metaDataMap);
		}

		public tallestCow_args() {
		}

		public tallestCow_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public tallestCow_args(tallestCow_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public tallestCow_args deepCopy() {
			return new tallestCow_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public tallestCow_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof tallestCow_args)
				return this.equals((tallestCow_args) that);
			return false;
		}

		public boolean equals(tallestCow_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(tallestCow_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("tallestCow_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class tallestCow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public tallestCow_argsStandardScheme getScheme() {
				return new tallestCow_argsStandardScheme();
			}
		}

		private static class tallestCow_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<tallestCow_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, tallestCow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, tallestCow_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class tallestCow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public tallestCow_argsTupleScheme getScheme() {
				return new tallestCow_argsTupleScheme();
			}
		}

		private static class tallestCow_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<tallestCow_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, tallestCow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, tallestCow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class tallestCow_result
			implements org.apache.thrift.TBase<tallestCow_result, tallestCow_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<tallestCow_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"tallestCow_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new tallestCow_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new tallestCow_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tallestCow_result.class, metaDataMap);
		}

		public tallestCow_result() {
		}

		public tallestCow_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public tallestCow_result(tallestCow_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public tallestCow_result deepCopy() {
			return new tallestCow_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public tallestCow_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof tallestCow_result)
				return this.equals((tallestCow_result) that);
			return false;
		}

		public boolean equals(tallestCow_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(tallestCow_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("tallestCow_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class tallestCow_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public tallestCow_resultStandardScheme getScheme() {
				return new tallestCow_resultStandardScheme();
			}
		}

		private static class tallestCow_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<tallestCow_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, tallestCow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, tallestCow_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class tallestCow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public tallestCow_resultTupleScheme getScheme() {
				return new tallestCow_resultTupleScheme();
			}
		}

		private static class tallestCow_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<tallestCow_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, tallestCow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, tallestCow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class orgCompareParam_args
			implements org.apache.thrift.TBase<orgCompareParam_args, orgCompareParam_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<orgCompareParam_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orgCompareParam_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new orgCompareParam_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new orgCompareParam_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orgCompareParam_args.class, metaDataMap);
		}

		public orgCompareParam_args() {
		}

		public orgCompareParam_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orgCompareParam_args(orgCompareParam_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public orgCompareParam_args deepCopy() {
			return new orgCompareParam_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public orgCompareParam_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof orgCompareParam_args)
				return this.equals((orgCompareParam_args) that);
			return false;
		}

		public boolean equals(orgCompareParam_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(orgCompareParam_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("orgCompareParam_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orgCompareParam_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompareParam_argsStandardScheme getScheme() {
				return new orgCompareParam_argsStandardScheme();
			}
		}

		private static class orgCompareParam_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<orgCompareParam_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orgCompareParam_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orgCompareParam_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orgCompareParam_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompareParam_argsTupleScheme getScheme() {
				return new orgCompareParam_argsTupleScheme();
			}
		}

		private static class orgCompareParam_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<orgCompareParam_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orgCompareParam_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orgCompareParam_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class orgCompareParam_result
			implements org.apache.thrift.TBase<orgCompareParam_result, orgCompareParam_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<orgCompareParam_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orgCompareParam_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new orgCompareParam_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new orgCompareParam_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orgCompareParam_result.class, metaDataMap);
		}

		public orgCompareParam_result() {
		}

		public orgCompareParam_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orgCompareParam_result(orgCompareParam_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public orgCompareParam_result deepCopy() {
			return new orgCompareParam_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public orgCompareParam_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof orgCompareParam_result)
				return this.equals((orgCompareParam_result) that);
			return false;
		}

		public boolean equals(orgCompareParam_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(orgCompareParam_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("orgCompareParam_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orgCompareParam_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompareParam_resultStandardScheme getScheme() {
				return new orgCompareParam_resultStandardScheme();
			}
		}

		private static class orgCompareParam_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<orgCompareParam_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orgCompareParam_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orgCompareParam_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orgCompareParam_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompareParam_resultTupleScheme getScheme() {
				return new orgCompareParam_resultTupleScheme();
			}
		}

		private static class orgCompareParam_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<orgCompareParam_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orgCompareParam_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orgCompareParam_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class orgCompare_args implements org.apache.thrift.TBase<orgCompare_args, orgCompare_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<orgCompare_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orgCompare_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new orgCompare_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new orgCompare_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orgCompare_args.class, metaDataMap);
		}

		public orgCompare_args() {
		}

		public orgCompare_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orgCompare_args(orgCompare_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public orgCompare_args deepCopy() {
			return new orgCompare_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public orgCompare_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof orgCompare_args)
				return this.equals((orgCompare_args) that);
			return false;
		}

		public boolean equals(orgCompare_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(orgCompare_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("orgCompare_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orgCompare_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompare_argsStandardScheme getScheme() {
				return new orgCompare_argsStandardScheme();
			}
		}

		private static class orgCompare_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<orgCompare_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orgCompare_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orgCompare_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orgCompare_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompare_argsTupleScheme getScheme() {
				return new orgCompare_argsTupleScheme();
			}
		}

		private static class orgCompare_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<orgCompare_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orgCompare_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orgCompare_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class orgCompare_result
			implements org.apache.thrift.TBase<orgCompare_result, orgCompare_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<orgCompare_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orgCompare_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new orgCompare_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new orgCompare_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orgCompare_result.class, metaDataMap);
		}

		public orgCompare_result() {
		}

		public orgCompare_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orgCompare_result(orgCompare_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public orgCompare_result deepCopy() {
			return new orgCompare_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public orgCompare_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof orgCompare_result)
				return this.equals((orgCompare_result) that);
			return false;
		}

		public boolean equals(orgCompare_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(orgCompare_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("orgCompare_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orgCompare_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompare_resultStandardScheme getScheme() {
				return new orgCompare_resultStandardScheme();
			}
		}

		private static class orgCompare_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<orgCompare_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orgCompare_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orgCompare_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orgCompare_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompare_resultTupleScheme getScheme() {
				return new orgCompare_resultTupleScheme();
			}
		}

		private static class orgCompare_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<orgCompare_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orgCompare_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orgCompare_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class exportBill_args implements org.apache.thrift.TBase<exportBill_args, exportBill_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<exportBill_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"exportBill_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exportBill_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exportBill_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportBill_args.class, metaDataMap);
		}

		public exportBill_args() {
		}

		public exportBill_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public exportBill_args(exportBill_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public exportBill_args deepCopy() {
			return new exportBill_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public exportBill_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof exportBill_args)
				return this.equals((exportBill_args) that);
			return false;
		}

		public boolean equals(exportBill_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(exportBill_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("exportBill_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class exportBill_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public exportBill_argsStandardScheme getScheme() {
				return new exportBill_argsStandardScheme();
			}
		}

		private static class exportBill_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<exportBill_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, exportBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, exportBill_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class exportBill_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public exportBill_argsTupleScheme getScheme() {
				return new exportBill_argsTupleScheme();
			}
		}

		private static class exportBill_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<exportBill_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, exportBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, exportBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class exportBill_result
			implements org.apache.thrift.TBase<exportBill_result, exportBill_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<exportBill_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"exportBill_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exportBill_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exportBill_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportBill_result.class, metaDataMap);
		}

		public exportBill_result() {
		}

		public exportBill_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public exportBill_result(exportBill_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public exportBill_result deepCopy() {
			return new exportBill_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public exportBill_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof exportBill_result)
				return this.equals((exportBill_result) that);
			return false;
		}

		public boolean equals(exportBill_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(exportBill_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("exportBill_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class exportBill_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public exportBill_resultStandardScheme getScheme() {
				return new exportBill_resultStandardScheme();
			}
		}

		private static class exportBill_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<exportBill_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, exportBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, exportBill_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class exportBill_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public exportBill_resultTupleScheme getScheme() {
				return new exportBill_resultTupleScheme();
			}
		}

		private static class exportBill_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<exportBill_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, exportBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, exportBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class downloadBill_args
			implements org.apache.thrift.TBase<downloadBill_args, downloadBill_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<downloadBill_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"downloadBill_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new downloadBill_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new downloadBill_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downloadBill_args.class, metaDataMap);
		}

		public downloadBill_args() {
		}

		public downloadBill_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public downloadBill_args(downloadBill_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public downloadBill_args deepCopy() {
			return new downloadBill_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public downloadBill_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof downloadBill_args)
				return this.equals((downloadBill_args) that);
			return false;
		}

		public boolean equals(downloadBill_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(downloadBill_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("downloadBill_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class downloadBill_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public downloadBill_argsStandardScheme getScheme() {
				return new downloadBill_argsStandardScheme();
			}
		}

		private static class downloadBill_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<downloadBill_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, downloadBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, downloadBill_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class downloadBill_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public downloadBill_argsTupleScheme getScheme() {
				return new downloadBill_argsTupleScheme();
			}
		}

		private static class downloadBill_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<downloadBill_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, downloadBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, downloadBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class downloadBill_result
			implements org.apache.thrift.TBase<downloadBill_result, downloadBill_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<downloadBill_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"downloadBill_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new downloadBill_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new downloadBill_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downloadBill_result.class, metaDataMap);
		}

		public downloadBill_result() {
		}

		public downloadBill_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public downloadBill_result(downloadBill_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public downloadBill_result deepCopy() {
			return new downloadBill_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public downloadBill_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof downloadBill_result)
				return this.equals((downloadBill_result) that);
			return false;
		}

		public boolean equals(downloadBill_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(downloadBill_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("downloadBill_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class downloadBill_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public downloadBill_resultStandardScheme getScheme() {
				return new downloadBill_resultStandardScheme();
			}
		}

		private static class downloadBill_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<downloadBill_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, downloadBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, downloadBill_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class downloadBill_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public downloadBill_resultTupleScheme getScheme() {
				return new downloadBill_resultTupleScheme();
			}
		}

		private static class downloadBill_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<downloadBill_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, downloadBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, downloadBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

}
