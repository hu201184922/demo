/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ehuatai.thrift;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-18")
public class ResponseBeanDto implements org.apache.thrift.TBase<ResponseBeanDto, ResponseBeanDto._Fields>,
		java.io.Serializable, Cloneable, Comparable<ResponseBeanDto> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ResponseBeanDto");

	private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"errCode", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField ERR_MSGS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"errMsgs", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"success", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"json", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"timeStamp", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResponseBeanDtoStandardSchemeFactory();
	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResponseBeanDtoTupleSchemeFactory();

	public java.lang.String errCode; // required
	public java.lang.String errMsgs; // required
	public java.lang.String success; // required
	public java.lang.String json; // required
	public java.lang.String timeStamp; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ERR_CODE((short) 1, "errCode"), ERR_MSGS((short) 2, "errMsgs"), SUCCESS((short) 3, "success"), JSON((short) 4,
				"json"), TIME_STAMP((short) 5, "timeStamp");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ERR_CODE
				return ERR_CODE;
			case 2: // ERR_MSGS
				return ERR_MSGS;
			case 3: // SUCCESS
				return SUCCESS;
			case 4: // JSON
				return JSON;
			case 5: // TIME_STAMP
				return TIME_STAMP;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ERR_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("errCode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ERR_MSGS,
				new org.apache.thrift.meta_data.FieldMetaData("errMsgs",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SUCCESS,
				new org.apache.thrift.meta_data.FieldMetaData("success",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.JSON,
				new org.apache.thrift.meta_data.FieldMetaData("json", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TIME_STAMP,
				new org.apache.thrift.meta_data.FieldMetaData("timeStamp",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseBeanDto.class, metaDataMap);
	}

	public ResponseBeanDto() {
	}

	public ResponseBeanDto(java.lang.String errCode, java.lang.String errMsgs, java.lang.String success,
			java.lang.String json, java.lang.String timeStamp) {
		this();
		this.errCode = errCode;
		this.errMsgs = errMsgs;
		this.success = success;
		this.json = json;
		this.timeStamp = timeStamp;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ResponseBeanDto(ResponseBeanDto other) {
		if (other.isSetErrCode()) {
			this.errCode = other.errCode;
		}
		if (other.isSetErrMsgs()) {
			this.errMsgs = other.errMsgs;
		}
		if (other.isSetSuccess()) {
			this.success = other.success;
		}
		if (other.isSetJson()) {
			this.json = other.json;
		}
		if (other.isSetTimeStamp()) {
			this.timeStamp = other.timeStamp;
		}
	}

	public ResponseBeanDto deepCopy() {
		return new ResponseBeanDto(this);
	}

	@Override
	public void clear() {
		this.errCode = null;
		this.errMsgs = null;
		this.success = null;
		this.json = null;
		this.timeStamp = null;
	}

	public java.lang.String getErrCode() {
		return this.errCode;
	}

	public ResponseBeanDto setErrCode(java.lang.String errCode) {
		this.errCode = errCode;
		return this;
	}

	public void unsetErrCode() {
		this.errCode = null;
	}

	/**
	 * Returns true if field errCode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetErrCode() {
		return this.errCode != null;
	}

	public void setErrCodeIsSet(boolean value) {
		if (!value) {
			this.errCode = null;
		}
	}

	public java.lang.String getErrMsgs() {
		return this.errMsgs;
	}

	public ResponseBeanDto setErrMsgs(java.lang.String errMsgs) {
		this.errMsgs = errMsgs;
		return this;
	}

	public void unsetErrMsgs() {
		this.errMsgs = null;
	}

	/**
	 * Returns true if field errMsgs is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetErrMsgs() {
		return this.errMsgs != null;
	}

	public void setErrMsgsIsSet(boolean value) {
		if (!value) {
			this.errMsgs = null;
		}
	}

	public java.lang.String getSuccess() {
		return this.success;
	}

	public ResponseBeanDto setSuccess(java.lang.String success) {
		this.success = success;
		return this;
	}

	public void unsetSuccess() {
		this.success = null;
	}

	/**
	 * Returns true if field success is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSuccess() {
		return this.success != null;
	}

	public void setSuccessIsSet(boolean value) {
		if (!value) {
			this.success = null;
		}
	}

	public java.lang.String getJson() {
		return this.json;
	}

	public ResponseBeanDto setJson(java.lang.String json) {
		this.json = json;
		return this;
	}

	public void unsetJson() {
		this.json = null;
	}

	/**
	 * Returns true if field json is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetJson() {
		return this.json != null;
	}

	public void setJsonIsSet(boolean value) {
		if (!value) {
			this.json = null;
		}
	}

	public java.lang.String getTimeStamp() {
		return this.timeStamp;
	}

	public ResponseBeanDto setTimeStamp(java.lang.String timeStamp) {
		this.timeStamp = timeStamp;
		return this;
	}

	public void unsetTimeStamp() {
		this.timeStamp = null;
	}

	/**
	 * Returns true if field timeStamp is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetTimeStamp() {
		return this.timeStamp != null;
	}

	public void setTimeStampIsSet(boolean value) {
		if (!value) {
			this.timeStamp = null;
		}
	}

	public void setFieldValue(_Fields field, java.lang.Object value) {
		switch (field) {
		case ERR_CODE:
			if (value == null) {
				unsetErrCode();
			} else {
				setErrCode((java.lang.String) value);
			}
			break;

		case ERR_MSGS:
			if (value == null) {
				unsetErrMsgs();
			} else {
				setErrMsgs((java.lang.String) value);
			}
			break;

		case SUCCESS:
			if (value == null) {
				unsetSuccess();
			} else {
				setSuccess((java.lang.String) value);
			}
			break;

		case JSON:
			if (value == null) {
				unsetJson();
			} else {
				setJson((java.lang.String) value);
			}
			break;

		case TIME_STAMP:
			if (value == null) {
				unsetTimeStamp();
			} else {
				setTimeStamp((java.lang.String) value);
			}
			break;

		}
	}

	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ERR_CODE:
			return getErrCode();

		case ERR_MSGS:
			return getErrMsgs();

		case SUCCESS:
			return getSuccess();

		case JSON:
			return getJson();

		case TIME_STAMP:
			return getTimeStamp();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ERR_CODE:
			return isSetErrCode();
		case ERR_MSGS:
			return isSetErrMsgs();
		case SUCCESS:
			return isSetSuccess();
		case JSON:
			return isSetJson();
		case TIME_STAMP:
			return isSetTimeStamp();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ResponseBeanDto)
			return this.equals((ResponseBeanDto) that);
		return false;
	}

	public boolean equals(ResponseBeanDto that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_errCode = true && this.isSetErrCode();
		boolean that_present_errCode = true && that.isSetErrCode();
		if (this_present_errCode || that_present_errCode) {
			if (!(this_present_errCode && that_present_errCode))
				return false;
			if (!this.errCode.equals(that.errCode))
				return false;
		}

		boolean this_present_errMsgs = true && this.isSetErrMsgs();
		boolean that_present_errMsgs = true && that.isSetErrMsgs();
		if (this_present_errMsgs || that_present_errMsgs) {
			if (!(this_present_errMsgs && that_present_errMsgs))
				return false;
			if (!this.errMsgs.equals(that.errMsgs))
				return false;
		}

		boolean this_present_success = true && this.isSetSuccess();
		boolean that_present_success = true && that.isSetSuccess();
		if (this_present_success || that_present_success) {
			if (!(this_present_success && that_present_success))
				return false;
			if (!this.success.equals(that.success))
				return false;
		}

		boolean this_present_json = true && this.isSetJson();
		boolean that_present_json = true && that.isSetJson();
		if (this_present_json || that_present_json) {
			if (!(this_present_json && that_present_json))
				return false;
			if (!this.json.equals(that.json))
				return false;
		}

		boolean this_present_timeStamp = true && this.isSetTimeStamp();
		boolean that_present_timeStamp = true && that.isSetTimeStamp();
		if (this_present_timeStamp || that_present_timeStamp) {
			if (!(this_present_timeStamp && that_present_timeStamp))
				return false;
			if (!this.timeStamp.equals(that.timeStamp))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetErrCode()) ? 131071 : 524287);
		if (isSetErrCode())
			hashCode = hashCode * 8191 + errCode.hashCode();

		hashCode = hashCode * 8191 + ((isSetErrMsgs()) ? 131071 : 524287);
		if (isSetErrMsgs())
			hashCode = hashCode * 8191 + errMsgs.hashCode();

		hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
		if (isSetSuccess())
			hashCode = hashCode * 8191 + success.hashCode();

		hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
		if (isSetJson())
			hashCode = hashCode * 8191 + json.hashCode();

		hashCode = hashCode * 8191 + ((isSetTimeStamp()) ? 131071 : 524287);
		if (isSetTimeStamp())
			hashCode = hashCode * 8191 + timeStamp.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ResponseBeanDto other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetErrCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetErrMsgs()).compareTo(other.isSetErrMsgs());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetErrMsgs()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errMsgs, other.errMsgs);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSuccess()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetJson()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTimeStamp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public String toString() {
		return "ResponseBeanDto [errCode=" + errCode + ", errMsgs=" + errMsgs + ", success=" + success + ", json="
				+ json + ", timeStamp=" + timeStamp + "]";
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ResponseBeanDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
		public ResponseBeanDtoStandardScheme getScheme() {
			return new ResponseBeanDtoStandardScheme();
		}
	}

	private static class ResponseBeanDtoStandardScheme
			extends org.apache.thrift.scheme.StandardScheme<ResponseBeanDto> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseBeanDto struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ERR_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.errCode = iprot.readString();
						struct.setErrCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ERR_MSGS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.errMsgs = iprot.readString();
						struct.setErrMsgsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // SUCCESS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.success = iprot.readString();
						struct.setSuccessIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // JSON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.json = iprot.readString();
						struct.setJsonIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // TIME_STAMP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.timeStamp = iprot.readString();
						struct.setTimeStampIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseBeanDto struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.errCode != null) {
				oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
				oprot.writeString(struct.errCode);
				oprot.writeFieldEnd();
			}
			if (struct.errMsgs != null) {
				oprot.writeFieldBegin(ERR_MSGS_FIELD_DESC);
				oprot.writeString(struct.errMsgs);
				oprot.writeFieldEnd();
			}
			if (struct.success != null) {
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeString(struct.success);
				oprot.writeFieldEnd();
			}
			if (struct.json != null) {
				oprot.writeFieldBegin(JSON_FIELD_DESC);
				oprot.writeString(struct.json);
				oprot.writeFieldEnd();
			}
			if (struct.timeStamp != null) {
				oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
				oprot.writeString(struct.timeStamp);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ResponseBeanDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
		public ResponseBeanDtoTupleScheme getScheme() {
			return new ResponseBeanDtoTupleScheme();
		}
	}

	private static class ResponseBeanDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResponseBeanDto> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ResponseBeanDto struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetErrCode()) {
				optionals.set(0);
			}
			if (struct.isSetErrMsgs()) {
				optionals.set(1);
			}
			if (struct.isSetSuccess()) {
				optionals.set(2);
			}
			if (struct.isSetJson()) {
				optionals.set(3);
			}
			if (struct.isSetTimeStamp()) {
				optionals.set(4);
			}
			oprot.writeBitSet(optionals, 5);
			if (struct.isSetErrCode()) {
				oprot.writeString(struct.errCode);
			}
			if (struct.isSetErrMsgs()) {
				oprot.writeString(struct.errMsgs);
			}
			if (struct.isSetSuccess()) {
				oprot.writeString(struct.success);
			}
			if (struct.isSetJson()) {
				oprot.writeString(struct.json);
			}
			if (struct.isSetTimeStamp()) {
				oprot.writeString(struct.timeStamp);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ResponseBeanDto struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(5);
			if (incoming.get(0)) {
				struct.errCode = iprot.readString();
				struct.setErrCodeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.errMsgs = iprot.readString();
				struct.setErrMsgsIsSet(true);
			}
			if (incoming.get(2)) {
				struct.success = iprot.readString();
				struct.setSuccessIsSet(true);
			}
			if (incoming.get(3)) {
				struct.json = iprot.readString();
				struct.setJsonIsSet(true);
			}
			if (incoming.get(4)) {
				struct.timeStamp = iprot.readString();
				struct.setTimeStampIsSet(true);
			}
		}
	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}
	
	
	

}
