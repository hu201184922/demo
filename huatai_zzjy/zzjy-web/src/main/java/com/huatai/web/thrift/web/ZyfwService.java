/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.huatai.web.thrift.web;

import com.huatai.web.thrift.bean.ResponseBeanDto;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-31")
public class ZyfwService {

	public interface Iface {

		public ResponseBeanDto getTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto fixedMenu(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getCoreData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto coreDataDown(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getMonthData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto monthDataInfo(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getRankData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getMonthList(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto listNotice(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto lookNotice(java.lang.String json) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void getTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void fixedMenu(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getCoreData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void coreDataDown(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getMonthData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void monthDataInfo(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getRankData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getMonthList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void listNotice(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void lookNotice(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public ResponseBeanDto getTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getTarget(json);
			return recv_getTarget();
		}

		public void send_getTarget(java.lang.String json) throws org.apache.thrift.TException {
			getTarget_args args = new getTarget_args();
			args.setJson(json);
			sendBase("getTarget", args);
		}

		public ResponseBeanDto recv_getTarget() throws org.apache.thrift.TException {
			getTarget_result result = new getTarget_result();
			receiveBase(result, "getTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getTarget failed: unknown result");
		}

		public ResponseBeanDto fixedMenu(java.lang.String json) throws org.apache.thrift.TException {
			send_fixedMenu(json);
			return recv_fixedMenu();
		}

		public void send_fixedMenu(java.lang.String json) throws org.apache.thrift.TException {
			fixedMenu_args args = new fixedMenu_args();
			args.setJson(json);
			sendBase("fixedMenu", args);
		}

		public ResponseBeanDto recv_fixedMenu() throws org.apache.thrift.TException {
			fixedMenu_result result = new fixedMenu_result();
			receiveBase(result, "fixedMenu");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"fixedMenu failed: unknown result");
		}

		public ResponseBeanDto getCoreData(java.lang.String json) throws org.apache.thrift.TException {
			send_getCoreData(json);
			return recv_getCoreData();
		}

		public void send_getCoreData(java.lang.String json) throws org.apache.thrift.TException {
			getCoreData_args args = new getCoreData_args();
			args.setJson(json);
			sendBase("getCoreData", args);
		}

		public ResponseBeanDto recv_getCoreData() throws org.apache.thrift.TException {
			getCoreData_result result = new getCoreData_result();
			receiveBase(result, "getCoreData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCoreData failed: unknown result");
		}

		public ResponseBeanDto coreDataDown(java.lang.String json) throws org.apache.thrift.TException {
			send_coreDataDown(json);
			return recv_coreDataDown();
		}

		public void send_coreDataDown(java.lang.String json) throws org.apache.thrift.TException {
			coreDataDown_args args = new coreDataDown_args();
			args.setJson(json);
			sendBase("coreDataDown", args);
		}

		public ResponseBeanDto recv_coreDataDown() throws org.apache.thrift.TException {
			coreDataDown_result result = new coreDataDown_result();
			receiveBase(result, "coreDataDown");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"coreDataDown failed: unknown result");
		}

		public ResponseBeanDto getMonthData(java.lang.String json) throws org.apache.thrift.TException {
			send_getMonthData(json);
			return recv_getMonthData();
		}

		public void send_getMonthData(java.lang.String json) throws org.apache.thrift.TException {
			getMonthData_args args = new getMonthData_args();
			args.setJson(json);
			sendBase("getMonthData", args);
		}

		public ResponseBeanDto recv_getMonthData() throws org.apache.thrift.TException {
			getMonthData_result result = new getMonthData_result();
			receiveBase(result, "getMonthData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getMonthData failed: unknown result");
		}

		public ResponseBeanDto monthDataInfo(java.lang.String json) throws org.apache.thrift.TException {
			send_monthDataInfo(json);
			return recv_monthDataInfo();
		}

		public void send_monthDataInfo(java.lang.String json) throws org.apache.thrift.TException {
			monthDataInfo_args args = new monthDataInfo_args();
			args.setJson(json);
			sendBase("monthDataInfo", args);
		}

		public ResponseBeanDto recv_monthDataInfo() throws org.apache.thrift.TException {
			monthDataInfo_result result = new monthDataInfo_result();
			receiveBase(result, "monthDataInfo");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"monthDataInfo failed: unknown result");
		}

		public ResponseBeanDto getRankData(java.lang.String json) throws org.apache.thrift.TException {
			send_getRankData(json);
			return recv_getRankData();
		}

		public void send_getRankData(java.lang.String json) throws org.apache.thrift.TException {
			getRankData_args args = new getRankData_args();
			args.setJson(json);
			sendBase("getRankData", args);
		}

		public ResponseBeanDto recv_getRankData() throws org.apache.thrift.TException {
			getRankData_result result = new getRankData_result();
			receiveBase(result, "getRankData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getRankData failed: unknown result");
		}

		public ResponseBeanDto getMonthList(java.lang.String json) throws org.apache.thrift.TException {
			send_getMonthList(json);
			return recv_getMonthList();
		}

		public void send_getMonthList(java.lang.String json) throws org.apache.thrift.TException {
			getMonthList_args args = new getMonthList_args();
			args.setJson(json);
			sendBase("getMonthList", args);
		}

		public ResponseBeanDto recv_getMonthList() throws org.apache.thrift.TException {
			getMonthList_result result = new getMonthList_result();
			receiveBase(result, "getMonthList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getMonthList failed: unknown result");
		}

		public ResponseBeanDto listNotice(java.lang.String json) throws org.apache.thrift.TException {
			send_listNotice(json);
			return recv_listNotice();
		}

		public void send_listNotice(java.lang.String json) throws org.apache.thrift.TException {
			listNotice_args args = new listNotice_args();
			args.setJson(json);
			sendBase("listNotice", args);
		}

		public ResponseBeanDto recv_listNotice() throws org.apache.thrift.TException {
			listNotice_result result = new listNotice_result();
			receiveBase(result, "listNotice");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"listNotice failed: unknown result");
		}

		public ResponseBeanDto lookNotice(java.lang.String json) throws org.apache.thrift.TException {
			send_lookNotice(json);
			return recv_lookNotice();
		}

		public void send_lookNotice(java.lang.String json) throws org.apache.thrift.TException {
			lookNotice_args args = new lookNotice_args();
			args.setJson(json);
			sendBase("lookNotice", args);
		}

		public ResponseBeanDto recv_lookNotice() throws org.apache.thrift.TException {
			lookNotice_result result = new lookNotice_result();
			receiveBase(result, "lookNotice");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"lookNotice failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getTarget_call method_call = new getTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getTarget_args args = new getTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getTarget();
			}
		}

		public void fixedMenu(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			fixedMenu_call method_call = new fixedMenu_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class fixedMenu_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public fixedMenu_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fixedMenu",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				fixedMenu_args args = new fixedMenu_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_fixedMenu();
			}
		}

		public void getCoreData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCoreData_call method_call = new getCoreData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCoreData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getCoreData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCoreData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCoreData_args args = new getCoreData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCoreData();
			}
		}

		public void coreDataDown(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			coreDataDown_call method_call = new coreDataDown_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class coreDataDown_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public coreDataDown_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("coreDataDown",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				coreDataDown_args args = new coreDataDown_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_coreDataDown();
			}
		}

		public void getMonthData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getMonthData_call method_call = new getMonthData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getMonthData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getMonthData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMonthData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getMonthData_args args = new getMonthData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getMonthData();
			}
		}

		public void monthDataInfo(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			monthDataInfo_call method_call = new monthDataInfo_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class monthDataInfo_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public monthDataInfo_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("monthDataInfo",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				monthDataInfo_args args = new monthDataInfo_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_monthDataInfo();
			}
		}

		public void getRankData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getRankData_call method_call = new getRankData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getRankData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getRankData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRankData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getRankData_args args = new getRankData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getRankData();
			}
		}

		public void getMonthList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getMonthList_call method_call = new getMonthList_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getMonthList_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getMonthList_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMonthList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getMonthList_args args = new getMonthList_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getMonthList();
			}
		}

		public void listNotice(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			listNotice_call method_call = new listNotice_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class listNotice_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public listNotice_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listNotice",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				listNotice_args args = new listNotice_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_listNotice();
			}
		}

		public void lookNotice(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			lookNotice_call method_call = new lookNotice_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class lookNotice_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public lookNotice_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lookNotice",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				lookNotice_args args = new lookNotice_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_lookNotice();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getTarget", new getTarget());
			processMap.put("fixedMenu", new fixedMenu());
			processMap.put("getCoreData", new getCoreData());
			processMap.put("coreDataDown", new coreDataDown());
			processMap.put("getMonthData", new getMonthData());
			processMap.put("monthDataInfo", new monthDataInfo());
			processMap.put("getRankData", new getRankData());
			processMap.put("getMonthList", new getMonthList());
			processMap.put("listNotice", new listNotice());
			processMap.put("lookNotice", new lookNotice());
			return processMap;
		}

		public static class getTarget<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTarget_args> {
			public getTarget() {
				super("getTarget");
			}

			public getTarget_args getEmptyArgsInstance() {
				return new getTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getTarget_result getResult(I iface, getTarget_args args) throws org.apache.thrift.TException {
				getTarget_result result = new getTarget_result();
				result.success = iface.getTarget(args.json);
				return result;
			}
		}

		public static class fixedMenu<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fixedMenu_args> {
			public fixedMenu() {
				super("fixedMenu");
			}

			public fixedMenu_args getEmptyArgsInstance() {
				return new fixedMenu_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public fixedMenu_result getResult(I iface, fixedMenu_args args) throws org.apache.thrift.TException {
				fixedMenu_result result = new fixedMenu_result();
				result.success = iface.fixedMenu(args.json);
				return result;
			}
		}

		public static class getCoreData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCoreData_args> {
			public getCoreData() {
				super("getCoreData");
			}

			public getCoreData_args getEmptyArgsInstance() {
				return new getCoreData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getCoreData_result getResult(I iface, getCoreData_args args) throws org.apache.thrift.TException {
				getCoreData_result result = new getCoreData_result();
				result.success = iface.getCoreData(args.json);
				return result;
			}
		}

		public static class coreDataDown<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, coreDataDown_args> {
			public coreDataDown() {
				super("coreDataDown");
			}

			public coreDataDown_args getEmptyArgsInstance() {
				return new coreDataDown_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public coreDataDown_result getResult(I iface, coreDataDown_args args) throws org.apache.thrift.TException {
				coreDataDown_result result = new coreDataDown_result();
				result.success = iface.coreDataDown(args.json);
				return result;
			}
		}

		public static class getMonthData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getMonthData_args> {
			public getMonthData() {
				super("getMonthData");
			}

			public getMonthData_args getEmptyArgsInstance() {
				return new getMonthData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getMonthData_result getResult(I iface, getMonthData_args args) throws org.apache.thrift.TException {
				getMonthData_result result = new getMonthData_result();
				result.success = iface.getMonthData(args.json);
				return result;
			}
		}

		public static class monthDataInfo<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, monthDataInfo_args> {
			public monthDataInfo() {
				super("monthDataInfo");
			}

			public monthDataInfo_args getEmptyArgsInstance() {
				return new monthDataInfo_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public monthDataInfo_result getResult(I iface, monthDataInfo_args args)
					throws org.apache.thrift.TException {
				monthDataInfo_result result = new monthDataInfo_result();
				result.success = iface.monthDataInfo(args.json);
				return result;
			}
		}

		public static class getRankData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getRankData_args> {
			public getRankData() {
				super("getRankData");
			}

			public getRankData_args getEmptyArgsInstance() {
				return new getRankData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getRankData_result getResult(I iface, getRankData_args args) throws org.apache.thrift.TException {
				getRankData_result result = new getRankData_result();
				result.success = iface.getRankData(args.json);
				return result;
			}
		}

		public static class getMonthList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getMonthList_args> {
			public getMonthList() {
				super("getMonthList");
			}

			public getMonthList_args getEmptyArgsInstance() {
				return new getMonthList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getMonthList_result getResult(I iface, getMonthList_args args) throws org.apache.thrift.TException {
				getMonthList_result result = new getMonthList_result();
				result.success = iface.getMonthList(args.json);
				return result;
			}
		}

		public static class listNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listNotice_args> {
			public listNotice() {
				super("listNotice");
			}

			public listNotice_args getEmptyArgsInstance() {
				return new listNotice_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public listNotice_result getResult(I iface, listNotice_args args) throws org.apache.thrift.TException {
				listNotice_result result = new listNotice_result();
				result.success = iface.listNotice(args.json);
				return result;
			}
		}

		public static class lookNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lookNotice_args> {
			public lookNotice() {
				super("lookNotice");
			}

			public lookNotice_args getEmptyArgsInstance() {
				return new lookNotice_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public lookNotice_result getResult(I iface, lookNotice_args args) throws org.apache.thrift.TException {
				lookNotice_result result = new lookNotice_result();
				result.success = iface.lookNotice(args.json);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getTarget", new getTarget());
			processMap.put("fixedMenu", new fixedMenu());
			processMap.put("getCoreData", new getCoreData());
			processMap.put("coreDataDown", new coreDataDown());
			processMap.put("getMonthData", new getMonthData());
			processMap.put("monthDataInfo", new monthDataInfo());
			processMap.put("getRankData", new getRankData());
			processMap.put("getMonthList", new getMonthList());
			processMap.put("listNotice", new listNotice());
			processMap.put("lookNotice", new lookNotice());
			return processMap;
		}

		public static class getTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getTarget_args, ResponseBeanDto> {
			public getTarget() {
				super("getTarget");
			}

			public getTarget_args getEmptyArgsInstance() {
				return new getTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getTarget_result result = new getTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getTarget_result result = new getTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getTarget(args.json, resultHandler);
			}
		}

		public static class fixedMenu<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, fixedMenu_args, ResponseBeanDto> {
			public fixedMenu() {
				super("fixedMenu");
			}

			public fixedMenu_args getEmptyArgsInstance() {
				return new fixedMenu_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						fixedMenu_result result = new fixedMenu_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						fixedMenu_result result = new fixedMenu_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, fixedMenu_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.fixedMenu(args.json, resultHandler);
			}
		}

		public static class getCoreData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCoreData_args, ResponseBeanDto> {
			public getCoreData() {
				super("getCoreData");
			}

			public getCoreData_args getEmptyArgsInstance() {
				return new getCoreData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getCoreData_result result = new getCoreData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCoreData_result result = new getCoreData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCoreData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCoreData(args.json, resultHandler);
			}
		}

		public static class coreDataDown<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, coreDataDown_args, ResponseBeanDto> {
			public coreDataDown() {
				super("coreDataDown");
			}

			public coreDataDown_args getEmptyArgsInstance() {
				return new coreDataDown_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						coreDataDown_result result = new coreDataDown_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						coreDataDown_result result = new coreDataDown_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, coreDataDown_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.coreDataDown(args.json, resultHandler);
			}
		}

		public static class getMonthData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getMonthData_args, ResponseBeanDto> {
			public getMonthData() {
				super("getMonthData");
			}

			public getMonthData_args getEmptyArgsInstance() {
				return new getMonthData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getMonthData_result result = new getMonthData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getMonthData_result result = new getMonthData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getMonthData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getMonthData(args.json, resultHandler);
			}
		}

		public static class monthDataInfo<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, monthDataInfo_args, ResponseBeanDto> {
			public monthDataInfo() {
				super("monthDataInfo");
			}

			public monthDataInfo_args getEmptyArgsInstance() {
				return new monthDataInfo_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						monthDataInfo_result result = new monthDataInfo_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						monthDataInfo_result result = new monthDataInfo_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, monthDataInfo_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.monthDataInfo(args.json, resultHandler);
			}
		}

		public static class getRankData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getRankData_args, ResponseBeanDto> {
			public getRankData() {
				super("getRankData");
			}

			public getRankData_args getEmptyArgsInstance() {
				return new getRankData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getRankData_result result = new getRankData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getRankData_result result = new getRankData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getRankData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getRankData(args.json, resultHandler);
			}
		}

		public static class getMonthList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getMonthList_args, ResponseBeanDto> {
			public getMonthList() {
				super("getMonthList");
			}

			public getMonthList_args getEmptyArgsInstance() {
				return new getMonthList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getMonthList_result result = new getMonthList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getMonthList_result result = new getMonthList_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getMonthList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getMonthList(args.json, resultHandler);
			}
		}

		public static class listNotice<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, listNotice_args, ResponseBeanDto> {
			public listNotice() {
				super("listNotice");
			}

			public listNotice_args getEmptyArgsInstance() {
				return new listNotice_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						listNotice_result result = new listNotice_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						listNotice_result result = new listNotice_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, listNotice_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.listNotice(args.json, resultHandler);
			}
		}

		public static class lookNotice<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, lookNotice_args, ResponseBeanDto> {
			public lookNotice() {
				super("lookNotice");
			}

			public lookNotice_args getEmptyArgsInstance() {
				return new lookNotice_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						lookNotice_result result = new lookNotice_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						lookNotice_result result = new lookNotice_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, lookNotice_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.lookNotice(args.json, resultHandler);
			}
		}

	}

	public static class getTarget_args implements org.apache.thrift.TBase<getTarget_args, getTarget_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTarget_args.class, metaDataMap);
		}

		public getTarget_args() {
		}

		public getTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTarget_args(getTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getTarget_args deepCopy() {
			return new getTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTarget_args)
				return this.equals((getTarget_args) that);
			return false;
		}

		public boolean equals(getTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTarget_argsStandardScheme getScheme() {
				return new getTarget_argsStandardScheme();
			}
		}

		private static class getTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTarget_argsTupleScheme getScheme() {
				return new getTarget_argsTupleScheme();
			}
		}

		private static class getTarget_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTarget_result implements org.apache.thrift.TBase<getTarget_result, getTarget_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTarget_result.class, metaDataMap);
		}

		public getTarget_result() {
		}

		public getTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTarget_result(getTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getTarget_result deepCopy() {
			return new getTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTarget_result)
				return this.equals((getTarget_result) that);
			return false;
		}

		public boolean equals(getTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTarget_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTarget_resultStandardScheme getScheme() {
				return new getTarget_resultStandardScheme();
			}
		}

		private static class getTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTarget_resultTupleScheme getScheme() {
				return new getTarget_resultTupleScheme();
			}
		}

		private static class getTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class fixedMenu_args implements org.apache.thrift.TBase<fixedMenu_args, fixedMenu_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<fixedMenu_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"fixedMenu_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fixedMenu_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fixedMenu_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fixedMenu_args.class, metaDataMap);
		}

		public fixedMenu_args() {
		}

		public fixedMenu_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public fixedMenu_args(fixedMenu_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public fixedMenu_args deepCopy() {
			return new fixedMenu_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public fixedMenu_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof fixedMenu_args)
				return this.equals((fixedMenu_args) that);
			return false;
		}

		public boolean equals(fixedMenu_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(fixedMenu_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("fixedMenu_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class fixedMenu_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public fixedMenu_argsStandardScheme getScheme() {
				return new fixedMenu_argsStandardScheme();
			}
		}

		private static class fixedMenu_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<fixedMenu_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, fixedMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, fixedMenu_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class fixedMenu_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public fixedMenu_argsTupleScheme getScheme() {
				return new fixedMenu_argsTupleScheme();
			}
		}

		private static class fixedMenu_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fixedMenu_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, fixedMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, fixedMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class fixedMenu_result implements org.apache.thrift.TBase<fixedMenu_result, fixedMenu_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<fixedMenu_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"fixedMenu_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fixedMenu_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fixedMenu_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fixedMenu_result.class, metaDataMap);
		}

		public fixedMenu_result() {
		}

		public fixedMenu_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public fixedMenu_result(fixedMenu_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public fixedMenu_result deepCopy() {
			return new fixedMenu_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public fixedMenu_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof fixedMenu_result)
				return this.equals((fixedMenu_result) that);
			return false;
		}

		public boolean equals(fixedMenu_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(fixedMenu_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("fixedMenu_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class fixedMenu_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public fixedMenu_resultStandardScheme getScheme() {
				return new fixedMenu_resultStandardScheme();
			}
		}

		private static class fixedMenu_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<fixedMenu_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, fixedMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, fixedMenu_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class fixedMenu_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public fixedMenu_resultTupleScheme getScheme() {
				return new fixedMenu_resultTupleScheme();
			}
		}

		private static class fixedMenu_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<fixedMenu_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, fixedMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, fixedMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getCoreData_args implements org.apache.thrift.TBase<getCoreData_args, getCoreData_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCoreData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCoreData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCoreData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCoreData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoreData_args.class, metaDataMap);
		}

		public getCoreData_args() {
		}

		public getCoreData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCoreData_args(getCoreData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getCoreData_args deepCopy() {
			return new getCoreData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getCoreData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCoreData_args)
				return this.equals((getCoreData_args) that);
			return false;
		}

		public boolean equals(getCoreData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCoreData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCoreData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCoreData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCoreData_argsStandardScheme getScheme() {
				return new getCoreData_argsStandardScheme();
			}
		}

		private static class getCoreData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCoreData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCoreData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCoreData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCoreData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCoreData_argsTupleScheme getScheme() {
				return new getCoreData_argsTupleScheme();
			}
		}

		private static class getCoreData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCoreData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCoreData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCoreData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getCoreData_result
			implements org.apache.thrift.TBase<getCoreData_result, getCoreData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getCoreData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCoreData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCoreData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCoreData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoreData_result.class, metaDataMap);
		}

		public getCoreData_result() {
		}

		public getCoreData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCoreData_result(getCoreData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getCoreData_result deepCopy() {
			return new getCoreData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getCoreData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCoreData_result)
				return this.equals((getCoreData_result) that);
			return false;
		}

		public boolean equals(getCoreData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCoreData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCoreData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCoreData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCoreData_resultStandardScheme getScheme() {
				return new getCoreData_resultStandardScheme();
			}
		}

		private static class getCoreData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCoreData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCoreData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCoreData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCoreData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCoreData_resultTupleScheme getScheme() {
				return new getCoreData_resultTupleScheme();
			}
		}

		private static class getCoreData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCoreData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCoreData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCoreData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class coreDataDown_args
			implements org.apache.thrift.TBase<coreDataDown_args, coreDataDown_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<coreDataDown_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"coreDataDown_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new coreDataDown_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new coreDataDown_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(coreDataDown_args.class, metaDataMap);
		}

		public coreDataDown_args() {
		}

		public coreDataDown_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public coreDataDown_args(coreDataDown_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public coreDataDown_args deepCopy() {
			return new coreDataDown_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public coreDataDown_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof coreDataDown_args)
				return this.equals((coreDataDown_args) that);
			return false;
		}

		public boolean equals(coreDataDown_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(coreDataDown_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("coreDataDown_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class coreDataDown_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public coreDataDown_argsStandardScheme getScheme() {
				return new coreDataDown_argsStandardScheme();
			}
		}

		private static class coreDataDown_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<coreDataDown_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, coreDataDown_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, coreDataDown_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class coreDataDown_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public coreDataDown_argsTupleScheme getScheme() {
				return new coreDataDown_argsTupleScheme();
			}
		}

		private static class coreDataDown_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<coreDataDown_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, coreDataDown_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, coreDataDown_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class coreDataDown_result
			implements org.apache.thrift.TBase<coreDataDown_result, coreDataDown_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<coreDataDown_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"coreDataDown_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new coreDataDown_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new coreDataDown_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(coreDataDown_result.class, metaDataMap);
		}

		public coreDataDown_result() {
		}

		public coreDataDown_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public coreDataDown_result(coreDataDown_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public coreDataDown_result deepCopy() {
			return new coreDataDown_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public coreDataDown_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof coreDataDown_result)
				return this.equals((coreDataDown_result) that);
			return false;
		}

		public boolean equals(coreDataDown_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(coreDataDown_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("coreDataDown_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class coreDataDown_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public coreDataDown_resultStandardScheme getScheme() {
				return new coreDataDown_resultStandardScheme();
			}
		}

		private static class coreDataDown_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<coreDataDown_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, coreDataDown_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, coreDataDown_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class coreDataDown_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public coreDataDown_resultTupleScheme getScheme() {
				return new coreDataDown_resultTupleScheme();
			}
		}

		private static class coreDataDown_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<coreDataDown_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, coreDataDown_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, coreDataDown_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMonthData_args
			implements org.apache.thrift.TBase<getMonthData_args, getMonthData_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMonthData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMonthData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMonthData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMonthData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonthData_args.class, metaDataMap);
		}

		public getMonthData_args() {
		}

		public getMonthData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMonthData_args(getMonthData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getMonthData_args deepCopy() {
			return new getMonthData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getMonthData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMonthData_args)
				return this.equals((getMonthData_args) that);
			return false;
		}

		public boolean equals(getMonthData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMonthData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMonthData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMonthData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMonthData_argsStandardScheme getScheme() {
				return new getMonthData_argsStandardScheme();
			}
		}

		private static class getMonthData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMonthData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMonthData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMonthData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMonthData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMonthData_argsTupleScheme getScheme() {
				return new getMonthData_argsTupleScheme();
			}
		}

		private static class getMonthData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMonthData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMonthData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMonthData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMonthData_result
			implements org.apache.thrift.TBase<getMonthData_result, getMonthData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMonthData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMonthData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMonthData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMonthData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonthData_result.class, metaDataMap);
		}

		public getMonthData_result() {
		}

		public getMonthData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMonthData_result(getMonthData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getMonthData_result deepCopy() {
			return new getMonthData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getMonthData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMonthData_result)
				return this.equals((getMonthData_result) that);
			return false;
		}

		public boolean equals(getMonthData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMonthData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMonthData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMonthData_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getMonthData_resultStandardScheme getScheme() {
				return new getMonthData_resultStandardScheme();
			}
		}

		private static class getMonthData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMonthData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMonthData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMonthData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMonthData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMonthData_resultTupleScheme getScheme() {
				return new getMonthData_resultTupleScheme();
			}
		}

		private static class getMonthData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMonthData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMonthData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMonthData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class monthDataInfo_args
			implements org.apache.thrift.TBase<monthDataInfo_args, monthDataInfo_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<monthDataInfo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"monthDataInfo_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new monthDataInfo_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new monthDataInfo_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(monthDataInfo_args.class, metaDataMap);
		}

		public monthDataInfo_args() {
		}

		public monthDataInfo_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public monthDataInfo_args(monthDataInfo_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public monthDataInfo_args deepCopy() {
			return new monthDataInfo_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public monthDataInfo_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof monthDataInfo_args)
				return this.equals((monthDataInfo_args) that);
			return false;
		}

		public boolean equals(monthDataInfo_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(monthDataInfo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("monthDataInfo_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class monthDataInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public monthDataInfo_argsStandardScheme getScheme() {
				return new monthDataInfo_argsStandardScheme();
			}
		}

		private static class monthDataInfo_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<monthDataInfo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, monthDataInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, monthDataInfo_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class monthDataInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public monthDataInfo_argsTupleScheme getScheme() {
				return new monthDataInfo_argsTupleScheme();
			}
		}

		private static class monthDataInfo_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<monthDataInfo_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, monthDataInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, monthDataInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class monthDataInfo_result
			implements org.apache.thrift.TBase<monthDataInfo_result, monthDataInfo_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<monthDataInfo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"monthDataInfo_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new monthDataInfo_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new monthDataInfo_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(monthDataInfo_result.class, metaDataMap);
		}

		public monthDataInfo_result() {
		}

		public monthDataInfo_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public monthDataInfo_result(monthDataInfo_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public monthDataInfo_result deepCopy() {
			return new monthDataInfo_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public monthDataInfo_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof monthDataInfo_result)
				return this.equals((monthDataInfo_result) that);
			return false;
		}

		public boolean equals(monthDataInfo_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(monthDataInfo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("monthDataInfo_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class monthDataInfo_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public monthDataInfo_resultStandardScheme getScheme() {
				return new monthDataInfo_resultStandardScheme();
			}
		}

		private static class monthDataInfo_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<monthDataInfo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, monthDataInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, monthDataInfo_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class monthDataInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public monthDataInfo_resultTupleScheme getScheme() {
				return new monthDataInfo_resultTupleScheme();
			}
		}

		private static class monthDataInfo_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<monthDataInfo_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, monthDataInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, monthDataInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getRankData_args implements org.apache.thrift.TBase<getRankData_args, getRankData_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getRankData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRankData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRankData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRankData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRankData_args.class, metaDataMap);
		}

		public getRankData_args() {
		}

		public getRankData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRankData_args(getRankData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getRankData_args deepCopy() {
			return new getRankData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getRankData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRankData_args)
				return this.equals((getRankData_args) that);
			return false;
		}

		public boolean equals(getRankData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRankData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRankData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRankData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRankData_argsStandardScheme getScheme() {
				return new getRankData_argsStandardScheme();
			}
		}

		private static class getRankData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRankData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRankData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRankData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRankData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRankData_argsTupleScheme getScheme() {
				return new getRankData_argsTupleScheme();
			}
		}

		private static class getRankData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getRankData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRankData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRankData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getRankData_result
			implements org.apache.thrift.TBase<getRankData_result, getRankData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getRankData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRankData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRankData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRankData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRankData_result.class, metaDataMap);
		}

		public getRankData_result() {
		}

		public getRankData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRankData_result(getRankData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getRankData_result deepCopy() {
			return new getRankData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getRankData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRankData_result)
				return this.equals((getRankData_result) that);
			return false;
		}

		public boolean equals(getRankData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRankData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRankData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRankData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRankData_resultStandardScheme getScheme() {
				return new getRankData_resultStandardScheme();
			}
		}

		private static class getRankData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRankData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRankData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRankData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRankData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRankData_resultTupleScheme getScheme() {
				return new getRankData_resultTupleScheme();
			}
		}

		private static class getRankData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getRankData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRankData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRankData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMonthList_args
			implements org.apache.thrift.TBase<getMonthList_args, getMonthList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMonthList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMonthList_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMonthList_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMonthList_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonthList_args.class, metaDataMap);
		}

		public getMonthList_args() {
		}

		public getMonthList_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMonthList_args(getMonthList_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getMonthList_args deepCopy() {
			return new getMonthList_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getMonthList_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMonthList_args)
				return this.equals((getMonthList_args) that);
			return false;
		}

		public boolean equals(getMonthList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMonthList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMonthList_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMonthList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMonthList_argsStandardScheme getScheme() {
				return new getMonthList_argsStandardScheme();
			}
		}

		private static class getMonthList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMonthList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMonthList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMonthList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMonthList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMonthList_argsTupleScheme getScheme() {
				return new getMonthList_argsTupleScheme();
			}
		}

		private static class getMonthList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMonthList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMonthList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMonthList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMonthList_result
			implements org.apache.thrift.TBase<getMonthList_result, getMonthList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMonthList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMonthList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMonthList_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMonthList_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonthList_result.class, metaDataMap);
		}

		public getMonthList_result() {
		}

		public getMonthList_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMonthList_result(getMonthList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getMonthList_result deepCopy() {
			return new getMonthList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getMonthList_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMonthList_result)
				return this.equals((getMonthList_result) that);
			return false;
		}

		public boolean equals(getMonthList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMonthList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMonthList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMonthList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getMonthList_resultStandardScheme getScheme() {
				return new getMonthList_resultStandardScheme();
			}
		}

		private static class getMonthList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMonthList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMonthList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMonthList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMonthList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMonthList_resultTupleScheme getScheme() {
				return new getMonthList_resultTupleScheme();
			}
		}

		private static class getMonthList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMonthList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMonthList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMonthList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class listNotice_args implements org.apache.thrift.TBase<listNotice_args, listNotice_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<listNotice_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"listNotice_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listNotice_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listNotice_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listNotice_args.class, metaDataMap);
		}

		public listNotice_args() {
		}

		public listNotice_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public listNotice_args(listNotice_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public listNotice_args deepCopy() {
			return new listNotice_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public listNotice_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof listNotice_args)
				return this.equals((listNotice_args) that);
			return false;
		}

		public boolean equals(listNotice_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(listNotice_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("listNotice_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class listNotice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public listNotice_argsStandardScheme getScheme() {
				return new listNotice_argsStandardScheme();
			}
		}

		private static class listNotice_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<listNotice_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, listNotice_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, listNotice_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class listNotice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public listNotice_argsTupleScheme getScheme() {
				return new listNotice_argsTupleScheme();
			}
		}

		private static class listNotice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listNotice_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, listNotice_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, listNotice_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class listNotice_result
			implements org.apache.thrift.TBase<listNotice_result, listNotice_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<listNotice_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"listNotice_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listNotice_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listNotice_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listNotice_result.class, metaDataMap);
		}

		public listNotice_result() {
		}

		public listNotice_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public listNotice_result(listNotice_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public listNotice_result deepCopy() {
			return new listNotice_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public listNotice_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof listNotice_result)
				return this.equals((listNotice_result) that);
			return false;
		}

		public boolean equals(listNotice_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(listNotice_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("listNotice_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class listNotice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public listNotice_resultStandardScheme getScheme() {
				return new listNotice_resultStandardScheme();
			}
		}

		private static class listNotice_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<listNotice_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, listNotice_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, listNotice_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class listNotice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public listNotice_resultTupleScheme getScheme() {
				return new listNotice_resultTupleScheme();
			}
		}

		private static class listNotice_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<listNotice_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, listNotice_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, listNotice_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class lookNotice_args implements org.apache.thrift.TBase<lookNotice_args, lookNotice_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<lookNotice_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"lookNotice_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lookNotice_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lookNotice_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookNotice_args.class, metaDataMap);
		}

		public lookNotice_args() {
		}

		public lookNotice_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public lookNotice_args(lookNotice_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public lookNotice_args deepCopy() {
			return new lookNotice_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public lookNotice_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof lookNotice_args)
				return this.equals((lookNotice_args) that);
			return false;
		}

		public boolean equals(lookNotice_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(lookNotice_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("lookNotice_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class lookNotice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public lookNotice_argsStandardScheme getScheme() {
				return new lookNotice_argsStandardScheme();
			}
		}

		private static class lookNotice_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<lookNotice_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, lookNotice_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, lookNotice_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class lookNotice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public lookNotice_argsTupleScheme getScheme() {
				return new lookNotice_argsTupleScheme();
			}
		}

		private static class lookNotice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lookNotice_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, lookNotice_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, lookNotice_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class lookNotice_result
			implements org.apache.thrift.TBase<lookNotice_result, lookNotice_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<lookNotice_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"lookNotice_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lookNotice_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lookNotice_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookNotice_result.class, metaDataMap);
		}

		public lookNotice_result() {
		}

		public lookNotice_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public lookNotice_result(lookNotice_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public lookNotice_result deepCopy() {
			return new lookNotice_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public lookNotice_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof lookNotice_result)
				return this.equals((lookNotice_result) that);
			return false;
		}

		public boolean equals(lookNotice_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(lookNotice_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("lookNotice_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class lookNotice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public lookNotice_resultStandardScheme getScheme() {
				return new lookNotice_resultStandardScheme();
			}
		}

		private static class lookNotice_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<lookNotice_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, lookNotice_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, lookNotice_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class lookNotice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public lookNotice_resultTupleScheme getScheme() {
				return new lookNotice_resultTupleScheme();
			}
		}

		private static class lookNotice_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<lookNotice_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, lookNotice_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, lookNotice_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

}
