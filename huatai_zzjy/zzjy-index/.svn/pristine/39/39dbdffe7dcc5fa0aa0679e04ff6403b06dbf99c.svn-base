package com.ehuatai.interceptors;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.ehuatai.biz.domain.AccPageInfo;
import com.ehuatai.biz.domain.User;
import com.ehuatai.biz.domain.UserBehInfo;
import com.ehuatai.biz.service.InterceptorService;
import com.ehuatai.util.RequestHeaderUtil;

@Component
@SuppressWarnings("unused")
public class LogInterceptor extends HandlerInterceptorAdapter {

	@Autowired
	private InterceptorService interceptorService;

	private static final Logger logger = LoggerFactory.getLogger(LogInterceptor.class);

	private static ThreadLocal<Long> time = new ThreadLocal<Long>();

	private static Map<String, Object> moduName = new HashMap<String, Object>();
	
	private static Map<String, Object> deptName = new HashMap<String, Object>();

	private static Map<String, Object> getModuName() {
		moduName.put("/api/analysis", "分析管理");
		moduName.put("/api/browse", "浏览清单");
		moduName.put("/api/block", "板块");
		moduName.put("/api/tool", "工具");
		moduName.put("/api/index", "首页");
		moduName.put("/api/index/dashbord", "达时报");
		moduName.put("/api/index/fixed", "固定指标");
		moduName.put("/app/analysis", "分析管理");
		moduName.put("/app/browse", "浏览清单");
		moduName.put("/app/block", "板块");
		moduName.put("/app/tool", "工具");
		moduName.put("/app/index/dashbord", "达时报");
		moduName.put("/app/index/fixed", "固定指标");
		return moduName;
	}
	
	private static Map<String, Object> getDeptName() {
		deptName.put("trade", "个业部固定指标");
		deptName.put("premium", "收展部固定指标");
		deptName.put("org", "机构部固定指标");
		deptName.put("train", "培训部固定指标");
		return deptName;
	}

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		long currTime = System.currentTimeMillis();
		time.set(currTime);
		return true;
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse arg1, Object handler, Exception arg3)
			throws Exception {
		try {
			User users = RequestHeaderUtil.getUser(request);
			long currentTimeMillis = System.currentTimeMillis();
			String resTime = (currentTimeMillis - time.get()) + "";
			// 判断是否登录或者正在登录页面
			if (users.getUsername()!= null) {
				Date date = new Date();
				UserBehInfo userBehInfo = new UserBehInfo();
				AccPageInfo accPageInfo = new AccPageInfo();
				try {
					UserBehInfo userBehList = interceptorService.findUserDataInfo(users.getUsername(),users == null ? null : 
							users.getEqp().toUpperCase(), null);
					// 点击另一个菜单栏时，更新页面离开标识1.表示已离开
					if (userBehList != null) {
						accPageInfo = new AccPageInfo();
						accPageInfo.setBehaviorid(userBehList.getBehaviorid());
						accPageInfo.setIsOut(1);
						//accPageInfo.setDateCode(DateUtils.formatDate(new Date()));
						accPageInfo.setOutTime(new Date());
						this.interceptorService.updateAccDataById(accPageInfo);

						// 主业务
						userBehInfo = new UserBehInfo();
						accPageInfo = null;
						accPageInfo = new AccPageInfo();
						userBehInfo.setBehaviorid(userBehList.getBehaviorid());
						//userBehInfo.setDateCode(DateUtils.formatDate(date));
						userBehInfo.setErrorInfo("正常");
						//userBehInfo.setIsRecent("1");
						userBehInfo.setOutTime(new Date(getDate().getTime() + 10 * 60 * 1000));
						userBehInfo.setIsExc("0");
						userBehInfo.setTerminalType(users == null ? null : 
							users.getEqp().toUpperCase());
						//userBehInfo.setIsOnline("1");

						/*accPageInfo.setAccessid(
								UUID.randomUUID().toString().replace("-", "").toUpperCase().substring(0, 32));*/
						accPageInfo.setAccessname(request.getRequestURI());
						accPageInfo.setAccessurl(request.getRequestURI());
						accPageInfo.setAccessTime(date);
						accPageInfo.setBehaviorid(userBehList.getBehaviorid());
						accPageInfo.setUserId(userBehList == null ? users.getUsername() : userBehList.getUserId());
						accPageInfo.setDateCode(new SimpleDateFormat("yyyy-MM-dd").format(date));
						accPageInfo.setOutTime(new Date(getDate().getTime() + 10 * 1000 * 60));
						String[] mName = request.getRequestURI().split("/");
						String fmName = "/" + mName[1] + "/" + mName[2]+"/"+mName[3];
						String fmName1 = "/" + mName[1] + "/" + mName[2];
						accPageInfo.setFmName(getModuName().get(fmName) == null ? (getModuName().get(fmName1) == null?request.getRequestURI():getModuName().get(fmName1).toString())
								: getModuName().get(fmName).toString());
						accPageInfo.setIsOut(0);
						accPageInfo.setResTime(System.currentTimeMillis()-time.get()+"");
						accPageInfo.setType("0");
						//使用模块
						if(request.getRequestURI().equals("/api/index/fixed")||request.getRequestURI().equals("/app/index/fixed")){
							System.out.println("==============/api/index/fixed=================");
							String obj = request.getAttribute("deptCode").toString();
							System.out.println("----------------"+obj+"-------------");
							accPageInfo.setSubCode(getDeptName().get(obj) == null ? "":getDeptName().get(obj).toString());
							accPageInfo.setType("3");
						}
						interceptorService.insertAccData(accPageInfo);
					}
					
				} catch (Exception e) {
					e.printStackTrace();
					userBehInfo.setErrorInfo("数据错误");
					userBehInfo.setIsExc("1");
				}finally {
					interceptorService.updateUserData(userBehInfo);
				}
			}
			
		} catch (Exception e) {
			logger.debug("===============加载用户数据=============");
		}
	}
	
	private Date getDate() {
		return new Date();
	}

	private void setUserData(UserBehInfo newUserBehInfo, String type) {
		switch (type) {
		case "insert":
			if (interceptorService.insertUserData(newUserBehInfo) != 0) {
				logger.debug("=====================已获得用户行为分析数据=========================");
			}
			break;
		case "update":
			if (interceptorService.updateUserData(newUserBehInfo) != 0) {
				logger.debug("=====================已改正用户行为分析数据=========================");
			}
			break;

		default:
			break;
		}

	}
	
	private void setAccData(AccPageInfo newAccPageInfo, String type) {
		switch (type) {
		case "insert":
			if (interceptorService.insertAccData(newAccPageInfo) != 0) {
				logger.debug("=====================已获得用户访问页面数据=========================");
			}
			break;
		case "update":
			if (interceptorService.updateAccData(newAccPageInfo) != 0) {
				logger.debug("=====================已改正用户访问页面数据=========================");
			}
			break;

		default:
			break;
		}
	}
}
