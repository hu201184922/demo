/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.huatai.web.thrift.web;

import com.huatai.web.thrift.bean.ResponseBeanDto;

@SuppressWarnings({ "serial", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-02")
public class LlqdService {

	public interface Iface {

		public ResponseBeanDto browseIsServer(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto browseListMenu(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto browseListInfo(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto browseListData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto browseListDown(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getAllTargetList(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto setTargetDimInfo(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto myListBrowseList(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto deleteBrowseList(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto updateBrowseList(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto saveMyBrowseList(java.lang.String json) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void browseIsServer(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void browseListMenu(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void browseListInfo(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void browseListData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void browseListDown(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getAllTargetList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void setTargetDimInfo(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void myListBrowseList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void deleteBrowseList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void updateBrowseList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void saveMyBrowseList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public ResponseBeanDto browseIsServer(java.lang.String json) throws org.apache.thrift.TException {
			send_browseIsServer(json);
			return recv_browseIsServer();
		}

		public void send_browseIsServer(java.lang.String json) throws org.apache.thrift.TException {
			browseIsServer_args args = new browseIsServer_args();
			args.setJson(json);
			sendBase("browseIsServer", args);
		}

		public ResponseBeanDto recv_browseIsServer() throws org.apache.thrift.TException {
			browseIsServer_result result = new browseIsServer_result();
			receiveBase(result, "browseIsServer");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"browseIsServer failed: unknown result");
		}

		public ResponseBeanDto browseListMenu(java.lang.String json) throws org.apache.thrift.TException {
			send_browseListMenu(json);
			return recv_browseListMenu();
		}

		public void send_browseListMenu(java.lang.String json) throws org.apache.thrift.TException {
			browseListMenu_args args = new browseListMenu_args();
			args.setJson(json);
			sendBase("browseListMenu", args);
		}

		public ResponseBeanDto recv_browseListMenu() throws org.apache.thrift.TException {
			browseListMenu_result result = new browseListMenu_result();
			receiveBase(result, "browseListMenu");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"browseListMenu failed: unknown result");
		}

		public ResponseBeanDto browseListInfo(java.lang.String json) throws org.apache.thrift.TException {
			send_browseListInfo(json);
			return recv_browseListInfo();
		}

		public void send_browseListInfo(java.lang.String json) throws org.apache.thrift.TException {
			browseListInfo_args args = new browseListInfo_args();
			args.setJson(json);
			sendBase("browseListInfo", args);
		}

		public ResponseBeanDto recv_browseListInfo() throws org.apache.thrift.TException {
			browseListInfo_result result = new browseListInfo_result();
			receiveBase(result, "browseListInfo");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"browseListInfo failed: unknown result");
		}

		public ResponseBeanDto browseListData(java.lang.String json) throws org.apache.thrift.TException {
			send_browseListData(json);
			return recv_browseListData();
		}

		public void send_browseListData(java.lang.String json) throws org.apache.thrift.TException {
			browseListData_args args = new browseListData_args();
			args.setJson(json);
			sendBase("browseListData", args);
		}

		public ResponseBeanDto recv_browseListData() throws org.apache.thrift.TException {
			browseListData_result result = new browseListData_result();
			receiveBase(result, "browseListData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"browseListData failed: unknown result");
		}

		public ResponseBeanDto browseListDown(java.lang.String json) throws org.apache.thrift.TException {
			send_browseListDown(json);
			return recv_browseListDown();
		}

		public void send_browseListDown(java.lang.String json) throws org.apache.thrift.TException {
			browseListDown_args args = new browseListDown_args();
			args.setJson(json);
			sendBase("browseListDown", args);
		}

		public ResponseBeanDto recv_browseListDown() throws org.apache.thrift.TException {
			browseListDown_result result = new browseListDown_result();
			receiveBase(result, "browseListDown");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"browseListDown failed: unknown result");
		}

		public ResponseBeanDto getAllTargetList(java.lang.String json) throws org.apache.thrift.TException {
			send_getAllTargetList(json);
			return recv_getAllTargetList();
		}

		public void send_getAllTargetList(java.lang.String json) throws org.apache.thrift.TException {
			getAllTargetList_args args = new getAllTargetList_args();
			args.setJson(json);
			sendBase("getAllTargetList", args);
		}

		public ResponseBeanDto recv_getAllTargetList() throws org.apache.thrift.TException {
			getAllTargetList_result result = new getAllTargetList_result();
			receiveBase(result, "getAllTargetList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getAllTargetList failed: unknown result");
		}

		public ResponseBeanDto setTargetDimInfo(java.lang.String json) throws org.apache.thrift.TException {
			send_setTargetDimInfo(json);
			return recv_setTargetDimInfo();
		}

		public void send_setTargetDimInfo(java.lang.String json) throws org.apache.thrift.TException {
			setTargetDimInfo_args args = new setTargetDimInfo_args();
			args.setJson(json);
			sendBase("setTargetDimInfo", args);
		}

		public ResponseBeanDto recv_setTargetDimInfo() throws org.apache.thrift.TException {
			setTargetDimInfo_result result = new setTargetDimInfo_result();
			receiveBase(result, "setTargetDimInfo");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setTargetDimInfo failed: unknown result");
		}

		public ResponseBeanDto myListBrowseList(java.lang.String json) throws org.apache.thrift.TException {
			send_myListBrowseList(json);
			return recv_myListBrowseList();
		}

		public void send_myListBrowseList(java.lang.String json) throws org.apache.thrift.TException {
			myListBrowseList_args args = new myListBrowseList_args();
			args.setJson(json);
			sendBase("myListBrowseList", args);
		}

		public ResponseBeanDto recv_myListBrowseList() throws org.apache.thrift.TException {
			myListBrowseList_result result = new myListBrowseList_result();
			receiveBase(result, "myListBrowseList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"myListBrowseList failed: unknown result");
		}

		public ResponseBeanDto deleteBrowseList(java.lang.String json) throws org.apache.thrift.TException {
			send_deleteBrowseList(json);
			return recv_deleteBrowseList();
		}

		public void send_deleteBrowseList(java.lang.String json) throws org.apache.thrift.TException {
			deleteBrowseList_args args = new deleteBrowseList_args();
			args.setJson(json);
			sendBase("deleteBrowseList", args);
		}

		public ResponseBeanDto recv_deleteBrowseList() throws org.apache.thrift.TException {
			deleteBrowseList_result result = new deleteBrowseList_result();
			receiveBase(result, "deleteBrowseList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"deleteBrowseList failed: unknown result");
		}

		public ResponseBeanDto updateBrowseList(java.lang.String json) throws org.apache.thrift.TException {
			send_updateBrowseList(json);
			return recv_updateBrowseList();
		}

		public void send_updateBrowseList(java.lang.String json) throws org.apache.thrift.TException {
			updateBrowseList_args args = new updateBrowseList_args();
			args.setJson(json);
			sendBase("updateBrowseList", args);
		}

		public ResponseBeanDto recv_updateBrowseList() throws org.apache.thrift.TException {
			updateBrowseList_result result = new updateBrowseList_result();
			receiveBase(result, "updateBrowseList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"updateBrowseList failed: unknown result");
		}

		public ResponseBeanDto saveMyBrowseList(java.lang.String json) throws org.apache.thrift.TException {
			send_saveMyBrowseList(json);
			return recv_saveMyBrowseList();
		}

		public void send_saveMyBrowseList(java.lang.String json) throws org.apache.thrift.TException {
			saveMyBrowseList_args args = new saveMyBrowseList_args();
			args.setJson(json);
			sendBase("saveMyBrowseList", args);
		}

		public ResponseBeanDto recv_saveMyBrowseList() throws org.apache.thrift.TException {
			saveMyBrowseList_result result = new saveMyBrowseList_result();
			receiveBase(result, "saveMyBrowseList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"saveMyBrowseList failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void browseIsServer(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			browseIsServer_call method_call = new browseIsServer_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class browseIsServer_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public browseIsServer_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("browseIsServer",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				browseIsServer_args args = new browseIsServer_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_browseIsServer();
			}
		}

		public void browseListMenu(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			browseListMenu_call method_call = new browseListMenu_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class browseListMenu_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public browseListMenu_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("browseListMenu",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				browseListMenu_args args = new browseListMenu_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_browseListMenu();
			}
		}

		public void browseListInfo(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			browseListInfo_call method_call = new browseListInfo_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class browseListInfo_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public browseListInfo_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("browseListInfo",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				browseListInfo_args args = new browseListInfo_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_browseListInfo();
			}
		}

		public void browseListData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			browseListData_call method_call = new browseListData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class browseListData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public browseListData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("browseListData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				browseListData_args args = new browseListData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_browseListData();
			}
		}

		public void browseListDown(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			browseListDown_call method_call = new browseListDown_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class browseListDown_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public browseListDown_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("browseListDown",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				browseListDown_args args = new browseListDown_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_browseListDown();
			}
		}

		public void getAllTargetList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getAllTargetList_call method_call = new getAllTargetList_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getAllTargetList_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getAllTargetList_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllTargetList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getAllTargetList_args args = new getAllTargetList_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getAllTargetList();
			}
		}

		public void setTargetDimInfo(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setTargetDimInfo_call method_call = new setTargetDimInfo_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setTargetDimInfo_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public setTargetDimInfo_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setTargetDimInfo",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setTargetDimInfo_args args = new setTargetDimInfo_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setTargetDimInfo();
			}
		}

		public void myListBrowseList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			myListBrowseList_call method_call = new myListBrowseList_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class myListBrowseList_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public myListBrowseList_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("myListBrowseList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				myListBrowseList_args args = new myListBrowseList_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_myListBrowseList();
			}
		}

		public void deleteBrowseList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			deleteBrowseList_call method_call = new deleteBrowseList_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class deleteBrowseList_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public deleteBrowseList_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBrowseList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				deleteBrowseList_args args = new deleteBrowseList_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_deleteBrowseList();
			}
		}

		public void updateBrowseList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			updateBrowseList_call method_call = new updateBrowseList_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class updateBrowseList_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public updateBrowseList_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBrowseList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				updateBrowseList_args args = new updateBrowseList_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_updateBrowseList();
			}
		}

		public void saveMyBrowseList(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			saveMyBrowseList_call method_call = new saveMyBrowseList_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class saveMyBrowseList_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public saveMyBrowseList_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMyBrowseList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				saveMyBrowseList_args args = new saveMyBrowseList_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_saveMyBrowseList();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("browseIsServer", new browseIsServer());
			processMap.put("browseListMenu", new browseListMenu());
			processMap.put("browseListInfo", new browseListInfo());
			processMap.put("browseListData", new browseListData());
			processMap.put("browseListDown", new browseListDown());
			processMap.put("getAllTargetList", new getAllTargetList());
			processMap.put("setTargetDimInfo", new setTargetDimInfo());
			processMap.put("myListBrowseList", new myListBrowseList());
			processMap.put("deleteBrowseList", new deleteBrowseList());
			processMap.put("updateBrowseList", new updateBrowseList());
			processMap.put("saveMyBrowseList", new saveMyBrowseList());
			return processMap;
		}

		public static class browseIsServer<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, browseIsServer_args> {
			public browseIsServer() {
				super("browseIsServer");
			}

			public browseIsServer_args getEmptyArgsInstance() {
				return new browseIsServer_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public browseIsServer_result getResult(I iface, browseIsServer_args args)
					throws org.apache.thrift.TException {
				browseIsServer_result result = new browseIsServer_result();
				result.success = iface.browseIsServer(args.json);
				return result;
			}
		}

		public static class browseListMenu<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, browseListMenu_args> {
			public browseListMenu() {
				super("browseListMenu");
			}

			public browseListMenu_args getEmptyArgsInstance() {
				return new browseListMenu_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public browseListMenu_result getResult(I iface, browseListMenu_args args)
					throws org.apache.thrift.TException {
				browseListMenu_result result = new browseListMenu_result();
				result.success = iface.browseListMenu(args.json);
				return result;
			}
		}

		public static class browseListInfo<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, browseListInfo_args> {
			public browseListInfo() {
				super("browseListInfo");
			}

			public browseListInfo_args getEmptyArgsInstance() {
				return new browseListInfo_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public browseListInfo_result getResult(I iface, browseListInfo_args args)
					throws org.apache.thrift.TException {
				browseListInfo_result result = new browseListInfo_result();
				result.success = iface.browseListInfo(args.json);
				return result;
			}
		}

		public static class browseListData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, browseListData_args> {
			public browseListData() {
				super("browseListData");
			}

			public browseListData_args getEmptyArgsInstance() {
				return new browseListData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public browseListData_result getResult(I iface, browseListData_args args)
					throws org.apache.thrift.TException {
				browseListData_result result = new browseListData_result();
				result.success = iface.browseListData(args.json);
				return result;
			}
		}

		public static class browseListDown<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, browseListDown_args> {
			public browseListDown() {
				super("browseListDown");
			}

			public browseListDown_args getEmptyArgsInstance() {
				return new browseListDown_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public browseListDown_result getResult(I iface, browseListDown_args args)
					throws org.apache.thrift.TException {
				browseListDown_result result = new browseListDown_result();
				result.success = iface.browseListDown(args.json);
				return result;
			}
		}

		public static class getAllTargetList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getAllTargetList_args> {
			public getAllTargetList() {
				super("getAllTargetList");
			}

			public getAllTargetList_args getEmptyArgsInstance() {
				return new getAllTargetList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getAllTargetList_result getResult(I iface, getAllTargetList_args args)
					throws org.apache.thrift.TException {
				getAllTargetList_result result = new getAllTargetList_result();
				result.success = iface.getAllTargetList(args.json);
				return result;
			}
		}

		public static class setTargetDimInfo<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setTargetDimInfo_args> {
			public setTargetDimInfo() {
				super("setTargetDimInfo");
			}

			public setTargetDimInfo_args getEmptyArgsInstance() {
				return new setTargetDimInfo_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setTargetDimInfo_result getResult(I iface, setTargetDimInfo_args args)
					throws org.apache.thrift.TException {
				setTargetDimInfo_result result = new setTargetDimInfo_result();
				result.success = iface.setTargetDimInfo(args.json);
				return result;
			}
		}

		public static class myListBrowseList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, myListBrowseList_args> {
			public myListBrowseList() {
				super("myListBrowseList");
			}

			public myListBrowseList_args getEmptyArgsInstance() {
				return new myListBrowseList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public myListBrowseList_result getResult(I iface, myListBrowseList_args args)
					throws org.apache.thrift.TException {
				myListBrowseList_result result = new myListBrowseList_result();
				result.success = iface.myListBrowseList(args.json);
				return result;
			}
		}

		public static class deleteBrowseList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, deleteBrowseList_args> {
			public deleteBrowseList() {
				super("deleteBrowseList");
			}

			public deleteBrowseList_args getEmptyArgsInstance() {
				return new deleteBrowseList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public deleteBrowseList_result getResult(I iface, deleteBrowseList_args args)
					throws org.apache.thrift.TException {
				deleteBrowseList_result result = new deleteBrowseList_result();
				result.success = iface.deleteBrowseList(args.json);
				return result;
			}
		}

		public static class updateBrowseList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, updateBrowseList_args> {
			public updateBrowseList() {
				super("updateBrowseList");
			}

			public updateBrowseList_args getEmptyArgsInstance() {
				return new updateBrowseList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public updateBrowseList_result getResult(I iface, updateBrowseList_args args)
					throws org.apache.thrift.TException {
				updateBrowseList_result result = new updateBrowseList_result();
				result.success = iface.updateBrowseList(args.json);
				return result;
			}
		}

		public static class saveMyBrowseList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, saveMyBrowseList_args> {
			public saveMyBrowseList() {
				super("saveMyBrowseList");
			}

			public saveMyBrowseList_args getEmptyArgsInstance() {
				return new saveMyBrowseList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public saveMyBrowseList_result getResult(I iface, saveMyBrowseList_args args)
					throws org.apache.thrift.TException {
				saveMyBrowseList_result result = new saveMyBrowseList_result();
				result.success = iface.saveMyBrowseList(args.json);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("browseIsServer", new browseIsServer());
			processMap.put("browseListMenu", new browseListMenu());
			processMap.put("browseListInfo", new browseListInfo());
			processMap.put("browseListData", new browseListData());
			processMap.put("browseListDown", new browseListDown());
			processMap.put("getAllTargetList", new getAllTargetList());
			processMap.put("setTargetDimInfo", new setTargetDimInfo());
			processMap.put("myListBrowseList", new myListBrowseList());
			processMap.put("deleteBrowseList", new deleteBrowseList());
			processMap.put("updateBrowseList", new updateBrowseList());
			processMap.put("saveMyBrowseList", new saveMyBrowseList());
			return processMap;
		}

		public static class browseIsServer<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, browseIsServer_args, ResponseBeanDto> {
			public browseIsServer() {
				super("browseIsServer");
			}

			public browseIsServer_args getEmptyArgsInstance() {
				return new browseIsServer_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						browseIsServer_result result = new browseIsServer_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						browseIsServer_result result = new browseIsServer_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, browseIsServer_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.browseIsServer(args.json, resultHandler);
			}
		}

		public static class browseListMenu<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, browseListMenu_args, ResponseBeanDto> {
			public browseListMenu() {
				super("browseListMenu");
			}

			public browseListMenu_args getEmptyArgsInstance() {
				return new browseListMenu_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						browseListMenu_result result = new browseListMenu_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						browseListMenu_result result = new browseListMenu_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, browseListMenu_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.browseListMenu(args.json, resultHandler);
			}
		}

		public static class browseListInfo<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, browseListInfo_args, ResponseBeanDto> {
			public browseListInfo() {
				super("browseListInfo");
			}

			public browseListInfo_args getEmptyArgsInstance() {
				return new browseListInfo_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						browseListInfo_result result = new browseListInfo_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						browseListInfo_result result = new browseListInfo_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, browseListInfo_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.browseListInfo(args.json, resultHandler);
			}
		}

		public static class browseListData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, browseListData_args, ResponseBeanDto> {
			public browseListData() {
				super("browseListData");
			}

			public browseListData_args getEmptyArgsInstance() {
				return new browseListData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						browseListData_result result = new browseListData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						browseListData_result result = new browseListData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, browseListData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.browseListData(args.json, resultHandler);
			}
		}

		public static class browseListDown<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, browseListDown_args, ResponseBeanDto> {
			public browseListDown() {
				super("browseListDown");
			}

			public browseListDown_args getEmptyArgsInstance() {
				return new browseListDown_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						browseListDown_result result = new browseListDown_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						browseListDown_result result = new browseListDown_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, browseListDown_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.browseListDown(args.json, resultHandler);
			}
		}

		public static class getAllTargetList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getAllTargetList_args, ResponseBeanDto> {
			public getAllTargetList() {
				super("getAllTargetList");
			}

			public getAllTargetList_args getEmptyArgsInstance() {
				return new getAllTargetList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getAllTargetList_result result = new getAllTargetList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getAllTargetList_result result = new getAllTargetList_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getAllTargetList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getAllTargetList(args.json, resultHandler);
			}
		}

		public static class setTargetDimInfo<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setTargetDimInfo_args, ResponseBeanDto> {
			public setTargetDimInfo() {
				super("setTargetDimInfo");
			}

			public setTargetDimInfo_args getEmptyArgsInstance() {
				return new setTargetDimInfo_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						setTargetDimInfo_result result = new setTargetDimInfo_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setTargetDimInfo_result result = new setTargetDimInfo_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setTargetDimInfo_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.setTargetDimInfo(args.json, resultHandler);
			}
		}

		public static class myListBrowseList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, myListBrowseList_args, ResponseBeanDto> {
			public myListBrowseList() {
				super("myListBrowseList");
			}

			public myListBrowseList_args getEmptyArgsInstance() {
				return new myListBrowseList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						myListBrowseList_result result = new myListBrowseList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						myListBrowseList_result result = new myListBrowseList_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, myListBrowseList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.myListBrowseList(args.json, resultHandler);
			}
		}

		public static class deleteBrowseList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, deleteBrowseList_args, ResponseBeanDto> {
			public deleteBrowseList() {
				super("deleteBrowseList");
			}

			public deleteBrowseList_args getEmptyArgsInstance() {
				return new deleteBrowseList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						deleteBrowseList_result result = new deleteBrowseList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						deleteBrowseList_result result = new deleteBrowseList_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, deleteBrowseList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.deleteBrowseList(args.json, resultHandler);
			}
		}

		public static class updateBrowseList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, updateBrowseList_args, ResponseBeanDto> {
			public updateBrowseList() {
				super("updateBrowseList");
			}

			public updateBrowseList_args getEmptyArgsInstance() {
				return new updateBrowseList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						updateBrowseList_result result = new updateBrowseList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						updateBrowseList_result result = new updateBrowseList_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, updateBrowseList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.updateBrowseList(args.json, resultHandler);
			}
		}

		public static class saveMyBrowseList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, saveMyBrowseList_args, ResponseBeanDto> {
			public saveMyBrowseList() {
				super("saveMyBrowseList");
			}

			public saveMyBrowseList_args getEmptyArgsInstance() {
				return new saveMyBrowseList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						saveMyBrowseList_result result = new saveMyBrowseList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						saveMyBrowseList_result result = new saveMyBrowseList_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, saveMyBrowseList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.saveMyBrowseList(args.json, resultHandler);
			}
		}

	}

	public static class browseIsServer_args
			implements org.apache.thrift.TBase<browseIsServer_args, browseIsServer_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<browseIsServer_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseIsServer_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseIsServer_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseIsServer_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseIsServer_args.class, metaDataMap);
		}

		public browseIsServer_args() {
		}

		public browseIsServer_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseIsServer_args(browseIsServer_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public browseIsServer_args deepCopy() {
			return new browseIsServer_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public browseIsServer_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseIsServer_args)
				return this.equals((browseIsServer_args) that);
			return false;
		}

		public boolean equals(browseIsServer_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseIsServer_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseIsServer_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseIsServer_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseIsServer_argsStandardScheme getScheme() {
				return new browseIsServer_argsStandardScheme();
			}
		}

		private static class browseIsServer_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseIsServer_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseIsServer_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseIsServer_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseIsServer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseIsServer_argsTupleScheme getScheme() {
				return new browseIsServer_argsTupleScheme();
			}
		}

		private static class browseIsServer_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseIsServer_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseIsServer_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseIsServer_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseIsServer_result
			implements org.apache.thrift.TBase<browseIsServer_result, browseIsServer_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<browseIsServer_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseIsServer_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseIsServer_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseIsServer_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseIsServer_result.class, metaDataMap);
		}

		public browseIsServer_result() {
		}

		public browseIsServer_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseIsServer_result(browseIsServer_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public browseIsServer_result deepCopy() {
			return new browseIsServer_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public browseIsServer_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseIsServer_result)
				return this.equals((browseIsServer_result) that);
			return false;
		}

		public boolean equals(browseIsServer_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseIsServer_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseIsServer_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseIsServer_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseIsServer_resultStandardScheme getScheme() {
				return new browseIsServer_resultStandardScheme();
			}
		}

		private static class browseIsServer_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseIsServer_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseIsServer_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseIsServer_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseIsServer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseIsServer_resultTupleScheme getScheme() {
				return new browseIsServer_resultTupleScheme();
			}
		}

		private static class browseIsServer_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseIsServer_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseIsServer_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseIsServer_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseListMenu_args
			implements org.apache.thrift.TBase<browseListMenu_args, browseListMenu_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<browseListMenu_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseListMenu_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseListMenu_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseListMenu_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseListMenu_args.class, metaDataMap);
		}

		public browseListMenu_args() {
		}

		public browseListMenu_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseListMenu_args(browseListMenu_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public browseListMenu_args deepCopy() {
			return new browseListMenu_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public browseListMenu_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseListMenu_args)
				return this.equals((browseListMenu_args) that);
			return false;
		}

		public boolean equals(browseListMenu_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseListMenu_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseListMenu_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseListMenu_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseListMenu_argsStandardScheme getScheme() {
				return new browseListMenu_argsStandardScheme();
			}
		}

		private static class browseListMenu_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseListMenu_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseListMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseListMenu_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseListMenu_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseListMenu_argsTupleScheme getScheme() {
				return new browseListMenu_argsTupleScheme();
			}
		}

		private static class browseListMenu_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseListMenu_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseListMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseListMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseListMenu_result
			implements org.apache.thrift.TBase<browseListMenu_result, browseListMenu_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<browseListMenu_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseListMenu_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseListMenu_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseListMenu_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseListMenu_result.class, metaDataMap);
		}

		public browseListMenu_result() {
		}

		public browseListMenu_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseListMenu_result(browseListMenu_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public browseListMenu_result deepCopy() {
			return new browseListMenu_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public browseListMenu_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseListMenu_result)
				return this.equals((browseListMenu_result) that);
			return false;
		}

		public boolean equals(browseListMenu_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseListMenu_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseListMenu_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseListMenu_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseListMenu_resultStandardScheme getScheme() {
				return new browseListMenu_resultStandardScheme();
			}
		}

		private static class browseListMenu_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseListMenu_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseListMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseListMenu_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseListMenu_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseListMenu_resultTupleScheme getScheme() {
				return new browseListMenu_resultTupleScheme();
			}
		}

		private static class browseListMenu_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseListMenu_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseListMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseListMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseListInfo_args
			implements org.apache.thrift.TBase<browseListInfo_args, browseListInfo_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<browseListInfo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseListInfo_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseListInfo_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseListInfo_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseListInfo_args.class, metaDataMap);
		}

		public browseListInfo_args() {
		}

		public browseListInfo_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseListInfo_args(browseListInfo_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public browseListInfo_args deepCopy() {
			return new browseListInfo_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public browseListInfo_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseListInfo_args)
				return this.equals((browseListInfo_args) that);
			return false;
		}

		public boolean equals(browseListInfo_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseListInfo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseListInfo_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseListInfo_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseListInfo_argsStandardScheme getScheme() {
				return new browseListInfo_argsStandardScheme();
			}
		}

		private static class browseListInfo_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseListInfo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseListInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseListInfo_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseListInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseListInfo_argsTupleScheme getScheme() {
				return new browseListInfo_argsTupleScheme();
			}
		}

		private static class browseListInfo_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseListInfo_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseListInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseListInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseListInfo_result
			implements org.apache.thrift.TBase<browseListInfo_result, browseListInfo_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<browseListInfo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseListInfo_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseListInfo_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseListInfo_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseListInfo_result.class, metaDataMap);
		}

		public browseListInfo_result() {
		}

		public browseListInfo_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseListInfo_result(browseListInfo_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public browseListInfo_result deepCopy() {
			return new browseListInfo_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public browseListInfo_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseListInfo_result)
				return this.equals((browseListInfo_result) that);
			return false;
		}

		public boolean equals(browseListInfo_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseListInfo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseListInfo_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseListInfo_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseListInfo_resultStandardScheme getScheme() {
				return new browseListInfo_resultStandardScheme();
			}
		}

		private static class browseListInfo_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseListInfo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseListInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseListInfo_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseListInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseListInfo_resultTupleScheme getScheme() {
				return new browseListInfo_resultTupleScheme();
			}
		}

		private static class browseListInfo_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseListInfo_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseListInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseListInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseListData_args
			implements org.apache.thrift.TBase<browseListData_args, browseListData_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<browseListData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseListData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseListData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseListData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseListData_args.class, metaDataMap);
		}

		public browseListData_args() {
		}

		public browseListData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseListData_args(browseListData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public browseListData_args deepCopy() {
			return new browseListData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public browseListData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseListData_args)
				return this.equals((browseListData_args) that);
			return false;
		}

		public boolean equals(browseListData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseListData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseListData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseListData_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseListData_argsStandardScheme getScheme() {
				return new browseListData_argsStandardScheme();
			}
		}

		private static class browseListData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseListData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseListData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseListData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseListData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseListData_argsTupleScheme getScheme() {
				return new browseListData_argsTupleScheme();
			}
		}

		private static class browseListData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseListData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseListData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseListData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseListData_result
			implements org.apache.thrift.TBase<browseListData_result, browseListData_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<browseListData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseListData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseListData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseListData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseListData_result.class, metaDataMap);
		}

		public browseListData_result() {
		}

		public browseListData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseListData_result(browseListData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public browseListData_result deepCopy() {
			return new browseListData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public browseListData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseListData_result)
				return this.equals((browseListData_result) that);
			return false;
		}

		public boolean equals(browseListData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseListData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseListData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseListData_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseListData_resultStandardScheme getScheme() {
				return new browseListData_resultStandardScheme();
			}
		}

		private static class browseListData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseListData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseListData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseListData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseListData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseListData_resultTupleScheme getScheme() {
				return new browseListData_resultTupleScheme();
			}
		}

		private static class browseListData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseListData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseListData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseListData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseListDown_args
			implements org.apache.thrift.TBase<browseListDown_args, browseListDown_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<browseListDown_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseListDown_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseListDown_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseListDown_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseListDown_args.class, metaDataMap);
		}

		public browseListDown_args() {
		}

		public browseListDown_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseListDown_args(browseListDown_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public browseListDown_args deepCopy() {
			return new browseListDown_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public browseListDown_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseListDown_args)
				return this.equals((browseListDown_args) that);
			return false;
		}

		public boolean equals(browseListDown_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseListDown_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseListDown_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseListDown_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseListDown_argsStandardScheme getScheme() {
				return new browseListDown_argsStandardScheme();
			}
		}

		private static class browseListDown_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseListDown_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseListDown_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseListDown_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseListDown_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseListDown_argsTupleScheme getScheme() {
				return new browseListDown_argsTupleScheme();
			}
		}

		private static class browseListDown_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseListDown_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseListDown_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseListDown_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class browseListDown_result
			implements org.apache.thrift.TBase<browseListDown_result, browseListDown_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<browseListDown_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"browseListDown_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new browseListDown_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new browseListDown_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(browseListDown_result.class, metaDataMap);
		}

		public browseListDown_result() {
		}

		public browseListDown_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public browseListDown_result(browseListDown_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public browseListDown_result deepCopy() {
			return new browseListDown_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public browseListDown_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof browseListDown_result)
				return this.equals((browseListDown_result) that);
			return false;
		}

		public boolean equals(browseListDown_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(browseListDown_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("browseListDown_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class browseListDown_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public browseListDown_resultStandardScheme getScheme() {
				return new browseListDown_resultStandardScheme();
			}
		}

		private static class browseListDown_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<browseListDown_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, browseListDown_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, browseListDown_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class browseListDown_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public browseListDown_resultTupleScheme getScheme() {
				return new browseListDown_resultTupleScheme();
			}
		}

		private static class browseListDown_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<browseListDown_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, browseListDown_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, browseListDown_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getAllTargetList_args
			implements org.apache.thrift.TBase<getAllTargetList_args, getAllTargetList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getAllTargetList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAllTargetList_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllTargetList_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllTargetList_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTargetList_args.class, metaDataMap);
		}

		public getAllTargetList_args() {
		}

		public getAllTargetList_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAllTargetList_args(getAllTargetList_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getAllTargetList_args deepCopy() {
			return new getAllTargetList_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getAllTargetList_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAllTargetList_args)
				return this.equals((getAllTargetList_args) that);
			return false;
		}

		public boolean equals(getAllTargetList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAllTargetList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllTargetList_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAllTargetList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getAllTargetList_argsStandardScheme getScheme() {
				return new getAllTargetList_argsStandardScheme();
			}
		}

		private static class getAllTargetList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAllTargetList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTargetList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTargetList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAllTargetList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getAllTargetList_argsTupleScheme getScheme() {
				return new getAllTargetList_argsTupleScheme();
			}
		}

		private static class getAllTargetList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getAllTargetList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAllTargetList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAllTargetList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getAllTargetList_result
			implements org.apache.thrift.TBase<getAllTargetList_result, getAllTargetList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getAllTargetList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAllTargetList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllTargetList_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllTargetList_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTargetList_result.class, metaDataMap);
		}

		public getAllTargetList_result() {
		}

		public getAllTargetList_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAllTargetList_result(getAllTargetList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getAllTargetList_result deepCopy() {
			return new getAllTargetList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getAllTargetList_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAllTargetList_result)
				return this.equals((getAllTargetList_result) that);
			return false;
		}

		public boolean equals(getAllTargetList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAllTargetList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllTargetList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAllTargetList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getAllTargetList_resultStandardScheme getScheme() {
				return new getAllTargetList_resultStandardScheme();
			}
		}

		private static class getAllTargetList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAllTargetList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTargetList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTargetList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAllTargetList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getAllTargetList_resultTupleScheme getScheme() {
				return new getAllTargetList_resultTupleScheme();
			}
		}

		private static class getAllTargetList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getAllTargetList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAllTargetList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAllTargetList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setTargetDimInfo_args
			implements org.apache.thrift.TBase<setTargetDimInfo_args, setTargetDimInfo_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setTargetDimInfo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setTargetDimInfo_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTargetDimInfo_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTargetDimInfo_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTargetDimInfo_args.class, metaDataMap);
		}

		public setTargetDimInfo_args() {
		}

		public setTargetDimInfo_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setTargetDimInfo_args(setTargetDimInfo_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public setTargetDimInfo_args deepCopy() {
			return new setTargetDimInfo_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public setTargetDimInfo_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setTargetDimInfo_args)
				return this.equals((setTargetDimInfo_args) that);
			return false;
		}

		public boolean equals(setTargetDimInfo_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setTargetDimInfo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setTargetDimInfo_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setTargetDimInfo_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setTargetDimInfo_argsStandardScheme getScheme() {
				return new setTargetDimInfo_argsStandardScheme();
			}
		}

		private static class setTargetDimInfo_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setTargetDimInfo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setTargetDimInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setTargetDimInfo_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setTargetDimInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setTargetDimInfo_argsTupleScheme getScheme() {
				return new setTargetDimInfo_argsTupleScheme();
			}
		}

		private static class setTargetDimInfo_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setTargetDimInfo_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setTargetDimInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setTargetDimInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setTargetDimInfo_result
			implements org.apache.thrift.TBase<setTargetDimInfo_result, setTargetDimInfo_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setTargetDimInfo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setTargetDimInfo_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTargetDimInfo_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTargetDimInfo_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTargetDimInfo_result.class, metaDataMap);
		}

		public setTargetDimInfo_result() {
		}

		public setTargetDimInfo_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setTargetDimInfo_result(setTargetDimInfo_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public setTargetDimInfo_result deepCopy() {
			return new setTargetDimInfo_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public setTargetDimInfo_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setTargetDimInfo_result)
				return this.equals((setTargetDimInfo_result) that);
			return false;
		}

		public boolean equals(setTargetDimInfo_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setTargetDimInfo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setTargetDimInfo_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setTargetDimInfo_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setTargetDimInfo_resultStandardScheme getScheme() {
				return new setTargetDimInfo_resultStandardScheme();
			}
		}

		private static class setTargetDimInfo_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setTargetDimInfo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setTargetDimInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setTargetDimInfo_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setTargetDimInfo_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setTargetDimInfo_resultTupleScheme getScheme() {
				return new setTargetDimInfo_resultTupleScheme();
			}
		}

		private static class setTargetDimInfo_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setTargetDimInfo_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setTargetDimInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setTargetDimInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class myListBrowseList_args
			implements org.apache.thrift.TBase<myListBrowseList_args, myListBrowseList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<myListBrowseList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"myListBrowseList_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new myListBrowseList_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new myListBrowseList_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myListBrowseList_args.class, metaDataMap);
		}

		public myListBrowseList_args() {
		}

		public myListBrowseList_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public myListBrowseList_args(myListBrowseList_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public myListBrowseList_args deepCopy() {
			return new myListBrowseList_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public myListBrowseList_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof myListBrowseList_args)
				return this.equals((myListBrowseList_args) that);
			return false;
		}

		public boolean equals(myListBrowseList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(myListBrowseList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("myListBrowseList_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class myListBrowseList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public myListBrowseList_argsStandardScheme getScheme() {
				return new myListBrowseList_argsStandardScheme();
			}
		}

		private static class myListBrowseList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<myListBrowseList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, myListBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, myListBrowseList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class myListBrowseList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public myListBrowseList_argsTupleScheme getScheme() {
				return new myListBrowseList_argsTupleScheme();
			}
		}

		private static class myListBrowseList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<myListBrowseList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, myListBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, myListBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class myListBrowseList_result
			implements org.apache.thrift.TBase<myListBrowseList_result, myListBrowseList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<myListBrowseList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"myListBrowseList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new myListBrowseList_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new myListBrowseList_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myListBrowseList_result.class, metaDataMap);
		}

		public myListBrowseList_result() {
		}

		public myListBrowseList_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public myListBrowseList_result(myListBrowseList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public myListBrowseList_result deepCopy() {
			return new myListBrowseList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public myListBrowseList_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof myListBrowseList_result)
				return this.equals((myListBrowseList_result) that);
			return false;
		}

		public boolean equals(myListBrowseList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(myListBrowseList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("myListBrowseList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class myListBrowseList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public myListBrowseList_resultStandardScheme getScheme() {
				return new myListBrowseList_resultStandardScheme();
			}
		}

		private static class myListBrowseList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<myListBrowseList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, myListBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, myListBrowseList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class myListBrowseList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public myListBrowseList_resultTupleScheme getScheme() {
				return new myListBrowseList_resultTupleScheme();
			}
		}

		private static class myListBrowseList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<myListBrowseList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, myListBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, myListBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class deleteBrowseList_args
			implements org.apache.thrift.TBase<deleteBrowseList_args, deleteBrowseList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<deleteBrowseList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteBrowseList_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteBrowseList_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteBrowseList_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBrowseList_args.class, metaDataMap);
		}

		public deleteBrowseList_args() {
		}

		public deleteBrowseList_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteBrowseList_args(deleteBrowseList_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public deleteBrowseList_args deepCopy() {
			return new deleteBrowseList_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public deleteBrowseList_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteBrowseList_args)
				return this.equals((deleteBrowseList_args) that);
			return false;
		}

		public boolean equals(deleteBrowseList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(deleteBrowseList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteBrowseList_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteBrowseList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public deleteBrowseList_argsStandardScheme getScheme() {
				return new deleteBrowseList_argsStandardScheme();
			}
		}

		private static class deleteBrowseList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<deleteBrowseList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBrowseList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteBrowseList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public deleteBrowseList_argsTupleScheme getScheme() {
				return new deleteBrowseList_argsTupleScheme();
			}
		}

		private static class deleteBrowseList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<deleteBrowseList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, deleteBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, deleteBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class deleteBrowseList_result
			implements org.apache.thrift.TBase<deleteBrowseList_result, deleteBrowseList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<deleteBrowseList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteBrowseList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteBrowseList_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteBrowseList_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBrowseList_result.class, metaDataMap);
		}

		public deleteBrowseList_result() {
		}

		public deleteBrowseList_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteBrowseList_result(deleteBrowseList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public deleteBrowseList_result deepCopy() {
			return new deleteBrowseList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public deleteBrowseList_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteBrowseList_result)
				return this.equals((deleteBrowseList_result) that);
			return false;
		}

		public boolean equals(deleteBrowseList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(deleteBrowseList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteBrowseList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteBrowseList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public deleteBrowseList_resultStandardScheme getScheme() {
				return new deleteBrowseList_resultStandardScheme();
			}
		}

		private static class deleteBrowseList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<deleteBrowseList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBrowseList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteBrowseList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public deleteBrowseList_resultTupleScheme getScheme() {
				return new deleteBrowseList_resultTupleScheme();
			}
		}

		private static class deleteBrowseList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<deleteBrowseList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, deleteBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, deleteBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class updateBrowseList_args
			implements org.apache.thrift.TBase<updateBrowseList_args, updateBrowseList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<updateBrowseList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"updateBrowseList_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateBrowseList_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateBrowseList_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBrowseList_args.class, metaDataMap);
		}

		public updateBrowseList_args() {
		}

		public updateBrowseList_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateBrowseList_args(updateBrowseList_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public updateBrowseList_args deepCopy() {
			return new updateBrowseList_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public updateBrowseList_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof updateBrowseList_args)
				return this.equals((updateBrowseList_args) that);
			return false;
		}

		public boolean equals(updateBrowseList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(updateBrowseList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("updateBrowseList_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateBrowseList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public updateBrowseList_argsStandardScheme getScheme() {
				return new updateBrowseList_argsStandardScheme();
			}
		}

		private static class updateBrowseList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<updateBrowseList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, updateBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, updateBrowseList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class updateBrowseList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public updateBrowseList_argsTupleScheme getScheme() {
				return new updateBrowseList_argsTupleScheme();
			}
		}

		private static class updateBrowseList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<updateBrowseList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, updateBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, updateBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class updateBrowseList_result
			implements org.apache.thrift.TBase<updateBrowseList_result, updateBrowseList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<updateBrowseList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"updateBrowseList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateBrowseList_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateBrowseList_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBrowseList_result.class, metaDataMap);
		}

		public updateBrowseList_result() {
		}

		public updateBrowseList_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateBrowseList_result(updateBrowseList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public updateBrowseList_result deepCopy() {
			return new updateBrowseList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public updateBrowseList_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof updateBrowseList_result)
				return this.equals((updateBrowseList_result) that);
			return false;
		}

		public boolean equals(updateBrowseList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(updateBrowseList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("updateBrowseList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateBrowseList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public updateBrowseList_resultStandardScheme getScheme() {
				return new updateBrowseList_resultStandardScheme();
			}
		}

		private static class updateBrowseList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<updateBrowseList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, updateBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, updateBrowseList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class updateBrowseList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public updateBrowseList_resultTupleScheme getScheme() {
				return new updateBrowseList_resultTupleScheme();
			}
		}

		private static class updateBrowseList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<updateBrowseList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, updateBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, updateBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class saveMyBrowseList_args
			implements org.apache.thrift.TBase<saveMyBrowseList_args, saveMyBrowseList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<saveMyBrowseList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"saveMyBrowseList_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveMyBrowseList_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveMyBrowseList_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMyBrowseList_args.class, metaDataMap);
		}

		public saveMyBrowseList_args() {
		}

		public saveMyBrowseList_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public saveMyBrowseList_args(saveMyBrowseList_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public saveMyBrowseList_args deepCopy() {
			return new saveMyBrowseList_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public saveMyBrowseList_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof saveMyBrowseList_args)
				return this.equals((saveMyBrowseList_args) that);
			return false;
		}

		public boolean equals(saveMyBrowseList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(saveMyBrowseList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("saveMyBrowseList_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class saveMyBrowseList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public saveMyBrowseList_argsStandardScheme getScheme() {
				return new saveMyBrowseList_argsStandardScheme();
			}
		}

		private static class saveMyBrowseList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<saveMyBrowseList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, saveMyBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, saveMyBrowseList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class saveMyBrowseList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public saveMyBrowseList_argsTupleScheme getScheme() {
				return new saveMyBrowseList_argsTupleScheme();
			}
		}

		private static class saveMyBrowseList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<saveMyBrowseList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, saveMyBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, saveMyBrowseList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class saveMyBrowseList_result
			implements org.apache.thrift.TBase<saveMyBrowseList_result, saveMyBrowseList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<saveMyBrowseList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"saveMyBrowseList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveMyBrowseList_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveMyBrowseList_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMyBrowseList_result.class, metaDataMap);
		}

		public saveMyBrowseList_result() {
		}

		public saveMyBrowseList_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public saveMyBrowseList_result(saveMyBrowseList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public saveMyBrowseList_result deepCopy() {
			return new saveMyBrowseList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public saveMyBrowseList_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof saveMyBrowseList_result)
				return this.equals((saveMyBrowseList_result) that);
			return false;
		}

		public boolean equals(saveMyBrowseList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(saveMyBrowseList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("saveMyBrowseList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class saveMyBrowseList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public saveMyBrowseList_resultStandardScheme getScheme() {
				return new saveMyBrowseList_resultStandardScheme();
			}
		}

		private static class saveMyBrowseList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<saveMyBrowseList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, saveMyBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, saveMyBrowseList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class saveMyBrowseList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public saveMyBrowseList_resultTupleScheme getScheme() {
				return new saveMyBrowseList_resultTupleScheme();
			}
		}

		private static class saveMyBrowseList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<saveMyBrowseList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, saveMyBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, saveMyBrowseList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

}
