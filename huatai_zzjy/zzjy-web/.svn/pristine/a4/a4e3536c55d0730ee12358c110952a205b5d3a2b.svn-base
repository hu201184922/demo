/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.huatai.web.thrift.web;

import com.huatai.web.thrift.bean.ResponseBeanDto;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-15")
public class ZtfxService {

	public interface Iface {

		public ResponseBeanDto getRegTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getFastMenu(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getSubject(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getMainTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getSubTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getCommonData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getMainData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getSubData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getDistData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getOrgData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getTorgData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto getSpecData(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto setDefTarget(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto tallestCow(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto orgCompareParam(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto orgCompare(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto exportBill(java.lang.String json) throws org.apache.thrift.TException;

		public ResponseBeanDto downloadBill(java.lang.String json) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void getRegTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getFastMenu(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getSubject(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getMainTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getSubTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getCommonData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getMainData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getSubData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getDistData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrgData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getTorgData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void getSpecData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void setDefTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void tallestCow(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void orgCompareParam(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void orgCompare(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void exportBill(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

		public void downloadBill(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public ResponseBeanDto getRegTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getRegTarget(json);
			return recv_getRegTarget();
		}

		public void send_getRegTarget(java.lang.String json) throws org.apache.thrift.TException {
			getRegTarget_args args = new getRegTarget_args();
			args.setJson(json);
			sendBase("getRegTarget", args);
		}

		public ResponseBeanDto recv_getRegTarget() throws org.apache.thrift.TException {
			getRegTarget_result result = new getRegTarget_result();
			receiveBase(result, "getRegTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getRegTarget failed: unknown result");
		}

		public ResponseBeanDto getFastMenu(java.lang.String json) throws org.apache.thrift.TException {
			send_getFastMenu(json);
			return recv_getFastMenu();
		}

		public void send_getFastMenu(java.lang.String json) throws org.apache.thrift.TException {
			getFastMenu_args args = new getFastMenu_args();
			args.setJson(json);
			sendBase("getFastMenu", args);
		}

		public ResponseBeanDto recv_getFastMenu() throws org.apache.thrift.TException {
			getFastMenu_result result = new getFastMenu_result();
			receiveBase(result, "getFastMenu");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getFastMenu failed: unknown result");
		}

		public ResponseBeanDto getSubject(java.lang.String json) throws org.apache.thrift.TException {
			send_getSubject(json);
			return recv_getSubject();
		}

		public void send_getSubject(java.lang.String json) throws org.apache.thrift.TException {
			getSubject_args args = new getSubject_args();
			args.setJson(json);
			sendBase("getSubject", args);
		}

		public ResponseBeanDto recv_getSubject() throws org.apache.thrift.TException {
			getSubject_result result = new getSubject_result();
			receiveBase(result, "getSubject");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getSubject failed: unknown result");
		}

		public ResponseBeanDto getMainTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getMainTarget(json);
			return recv_getMainTarget();
		}

		public void send_getMainTarget(java.lang.String json) throws org.apache.thrift.TException {
			getMainTarget_args args = new getMainTarget_args();
			args.setJson(json);
			sendBase("getMainTarget", args);
		}

		public ResponseBeanDto recv_getMainTarget() throws org.apache.thrift.TException {
			getMainTarget_result result = new getMainTarget_result();
			receiveBase(result, "getMainTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getMainTarget failed: unknown result");
		}

		public ResponseBeanDto getSubTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_getSubTarget(json);
			return recv_getSubTarget();
		}

		public void send_getSubTarget(java.lang.String json) throws org.apache.thrift.TException {
			getSubTarget_args args = new getSubTarget_args();
			args.setJson(json);
			sendBase("getSubTarget", args);
		}

		public ResponseBeanDto recv_getSubTarget() throws org.apache.thrift.TException {
			getSubTarget_result result = new getSubTarget_result();
			receiveBase(result, "getSubTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getSubTarget failed: unknown result");
		}

		public ResponseBeanDto getCommonData(java.lang.String json) throws org.apache.thrift.TException {
			send_getCommonData(json);
			return recv_getCommonData();
		}

		public void send_getCommonData(java.lang.String json) throws org.apache.thrift.TException {
			getCommonData_args args = new getCommonData_args();
			args.setJson(json);
			sendBase("getCommonData", args);
		}

		public ResponseBeanDto recv_getCommonData() throws org.apache.thrift.TException {
			getCommonData_result result = new getCommonData_result();
			receiveBase(result, "getCommonData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCommonData failed: unknown result");
		}

		public ResponseBeanDto getMainData(java.lang.String json) throws org.apache.thrift.TException {
			send_getMainData(json);
			return recv_getMainData();
		}

		public void send_getMainData(java.lang.String json) throws org.apache.thrift.TException {
			getMainData_args args = new getMainData_args();
			args.setJson(json);
			sendBase("getMainData", args);
		}

		public ResponseBeanDto recv_getMainData() throws org.apache.thrift.TException {
			getMainData_result result = new getMainData_result();
			receiveBase(result, "getMainData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getMainData failed: unknown result");
		}

		public ResponseBeanDto getSubData(java.lang.String json) throws org.apache.thrift.TException {
			send_getSubData(json);
			return recv_getSubData();
		}

		public void send_getSubData(java.lang.String json) throws org.apache.thrift.TException {
			getSubData_args args = new getSubData_args();
			args.setJson(json);
			sendBase("getSubData", args);
		}

		public ResponseBeanDto recv_getSubData() throws org.apache.thrift.TException {
			getSubData_result result = new getSubData_result();
			receiveBase(result, "getSubData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getSubData failed: unknown result");
		}

		public ResponseBeanDto getDistData(java.lang.String json) throws org.apache.thrift.TException {
			send_getDistData(json);
			return recv_getDistData();
		}

		public void send_getDistData(java.lang.String json) throws org.apache.thrift.TException {
			getDistData_args args = new getDistData_args();
			args.setJson(json);
			sendBase("getDistData", args);
		}

		public ResponseBeanDto recv_getDistData() throws org.apache.thrift.TException {
			getDistData_result result = new getDistData_result();
			receiveBase(result, "getDistData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getDistData failed: unknown result");
		}

		public ResponseBeanDto getOrgData(java.lang.String json) throws org.apache.thrift.TException {
			send_getOrgData(json);
			return recv_getOrgData();
		}

		public void send_getOrgData(java.lang.String json) throws org.apache.thrift.TException {
			getOrgData_args args = new getOrgData_args();
			args.setJson(json);
			sendBase("getOrgData", args);
		}

		public ResponseBeanDto recv_getOrgData() throws org.apache.thrift.TException {
			getOrgData_result result = new getOrgData_result();
			receiveBase(result, "getOrgData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrgData failed: unknown result");
		}

		public ResponseBeanDto getTorgData(java.lang.String json) throws org.apache.thrift.TException {
			send_getTorgData(json);
			return recv_getTorgData();
		}

		public void send_getTorgData(java.lang.String json) throws org.apache.thrift.TException {
			getTorgData_args args = new getTorgData_args();
			args.setJson(json);
			sendBase("getTorgData", args);
		}

		public ResponseBeanDto recv_getTorgData() throws org.apache.thrift.TException {
			getTorgData_result result = new getTorgData_result();
			receiveBase(result, "getTorgData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getTorgData failed: unknown result");
		}

		public ResponseBeanDto getSpecData(java.lang.String json) throws org.apache.thrift.TException {
			send_getSpecData(json);
			return recv_getSpecData();
		}

		public void send_getSpecData(java.lang.String json) throws org.apache.thrift.TException {
			getSpecData_args args = new getSpecData_args();
			args.setJson(json);
			sendBase("getSpecData", args);
		}

		public ResponseBeanDto recv_getSpecData() throws org.apache.thrift.TException {
			getSpecData_result result = new getSpecData_result();
			receiveBase(result, "getSpecData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getSpecData failed: unknown result");
		}

		public ResponseBeanDto setDefTarget(java.lang.String json) throws org.apache.thrift.TException {
			send_setDefTarget(json);
			return recv_setDefTarget();
		}

		public void send_setDefTarget(java.lang.String json) throws org.apache.thrift.TException {
			setDefTarget_args args = new setDefTarget_args();
			args.setJson(json);
			sendBase("setDefTarget", args);
		}

		public ResponseBeanDto recv_setDefTarget() throws org.apache.thrift.TException {
			setDefTarget_result result = new setDefTarget_result();
			receiveBase(result, "setDefTarget");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setDefTarget failed: unknown result");
		}

		public ResponseBeanDto tallestCow(java.lang.String json) throws org.apache.thrift.TException {
			send_tallestCow(json);
			return recv_tallestCow();
		}

		public void send_tallestCow(java.lang.String json) throws org.apache.thrift.TException {
			tallestCow_args args = new tallestCow_args();
			args.setJson(json);
			sendBase("tallestCow", args);
		}

		public ResponseBeanDto recv_tallestCow() throws org.apache.thrift.TException {
			tallestCow_result result = new tallestCow_result();
			receiveBase(result, "tallestCow");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"tallestCow failed: unknown result");
		}

		public ResponseBeanDto orgCompareParam(java.lang.String json) throws org.apache.thrift.TException {
			send_orgCompareParam(json);
			return recv_orgCompareParam();
		}

		public void send_orgCompareParam(java.lang.String json) throws org.apache.thrift.TException {
			orgCompareParam_args args = new orgCompareParam_args();
			args.setJson(json);
			sendBase("orgCompareParam", args);
		}

		public ResponseBeanDto recv_orgCompareParam() throws org.apache.thrift.TException {
			orgCompareParam_result result = new orgCompareParam_result();
			receiveBase(result, "orgCompareParam");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"orgCompareParam failed: unknown result");
		}

		public ResponseBeanDto orgCompare(java.lang.String json) throws org.apache.thrift.TException {
			send_orgCompare(json);
			return recv_orgCompare();
		}

		public void send_orgCompare(java.lang.String json) throws org.apache.thrift.TException {
			orgCompare_args args = new orgCompare_args();
			args.setJson(json);
			sendBase("orgCompare", args);
		}

		public ResponseBeanDto recv_orgCompare() throws org.apache.thrift.TException {
			orgCompare_result result = new orgCompare_result();
			receiveBase(result, "orgCompare");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"orgCompare failed: unknown result");
		}

		public ResponseBeanDto exportBill(java.lang.String json) throws org.apache.thrift.TException {
			send_exportBill(json);
			return recv_exportBill();
		}

		public void send_exportBill(java.lang.String json) throws org.apache.thrift.TException {
			exportBill_args args = new exportBill_args();
			args.setJson(json);
			sendBase("exportBill", args);
		}

		public ResponseBeanDto recv_exportBill() throws org.apache.thrift.TException {
			exportBill_result result = new exportBill_result();
			receiveBase(result, "exportBill");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"exportBill failed: unknown result");
		}

		public ResponseBeanDto downloadBill(java.lang.String json) throws org.apache.thrift.TException {
			send_downloadBill(json);
			return recv_downloadBill();
		}

		public void send_downloadBill(java.lang.String json) throws org.apache.thrift.TException {
			downloadBill_args args = new downloadBill_args();
			args.setJson(json);
			sendBase("downloadBill", args);
		}

		public ResponseBeanDto recv_downloadBill() throws org.apache.thrift.TException {
			downloadBill_result result = new downloadBill_result();
			receiveBase(result, "downloadBill");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"downloadBill failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getRegTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getRegTarget_call method_call = new getRegTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getRegTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getRegTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getRegTarget_args args = new getRegTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getRegTarget();
			}
		}

		public void getFastMenu(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getFastMenu_call method_call = new getFastMenu_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getFastMenu_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getFastMenu_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFastMenu",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getFastMenu_args args = new getFastMenu_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getFastMenu();
			}
		}

		public void getSubject(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getSubject_call method_call = new getSubject_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getSubject_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getSubject_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubject",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getSubject_args args = new getSubject_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getSubject();
			}
		}

		public void getMainTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getMainTarget_call method_call = new getMainTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getMainTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getMainTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMainTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getMainTarget_args args = new getMainTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getMainTarget();
			}
		}

		public void getSubTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getSubTarget_call method_call = new getSubTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getSubTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getSubTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getSubTarget_args args = new getSubTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getSubTarget();
			}
		}

		public void getCommonData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCommonData_call method_call = new getCommonData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCommonData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getCommonData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCommonData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCommonData_args args = new getCommonData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCommonData();
			}
		}

		public void getMainData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getMainData_call method_call = new getMainData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getMainData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getMainData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMainData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getMainData_args args = new getMainData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getMainData();
			}
		}

		public void getSubData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getSubData_call method_call = new getSubData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getSubData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getSubData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getSubData_args args = new getSubData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getSubData();
			}
		}

		public void getDistData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getDistData_call method_call = new getDistData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getDistData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getDistData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDistData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getDistData_args args = new getDistData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getDistData();
			}
		}

		public void getOrgData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrgData_call method_call = new getOrgData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrgData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getOrgData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrgData_args args = new getOrgData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrgData();
			}
		}

		public void getTorgData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getTorgData_call method_call = new getTorgData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getTorgData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getTorgData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTorgData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getTorgData_args args = new getTorgData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getTorgData();
			}
		}

		public void getSpecData(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getSpecData_call method_call = new getSpecData_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getSpecData_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public getSpecData_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpecData",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getSpecData_args args = new getSpecData_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getSpecData();
			}
		}

		public void setDefTarget(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setDefTarget_call method_call = new setDefTarget_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setDefTarget_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public setDefTarget_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDefTarget",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setDefTarget_args args = new setDefTarget_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setDefTarget();
			}
		}

		public void tallestCow(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			tallestCow_call method_call = new tallestCow_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class tallestCow_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public tallestCow_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tallestCow",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				tallestCow_args args = new tallestCow_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_tallestCow();
			}
		}

		public void orgCompareParam(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			orgCompareParam_call method_call = new orgCompareParam_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class orgCompareParam_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public orgCompareParam_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orgCompareParam",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				orgCompareParam_args args = new orgCompareParam_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_orgCompareParam();
			}
		}

		public void orgCompare(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			orgCompare_call method_call = new orgCompare_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class orgCompare_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public orgCompare_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orgCompare",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				orgCompare_args args = new orgCompare_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_orgCompare();
			}
		}

		public void exportBill(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			exportBill_call method_call = new exportBill_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class exportBill_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public exportBill_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportBill",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				exportBill_args args = new exportBill_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_exportBill();
			}
		}

		public void downloadBill(java.lang.String json,
				org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			downloadBill_call method_call = new downloadBill_call(json, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class downloadBill_call extends org.apache.thrift.async.TAsyncMethodCall<ResponseBeanDto> {
			private java.lang.String json;

			public downloadBill_call(java.lang.String json,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.json = json;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("downloadBill",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				downloadBill_args args = new downloadBill_args();
				args.setJson(json);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResponseBeanDto getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_downloadBill();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getRegTarget", new getRegTarget());
			processMap.put("getFastMenu", new getFastMenu());
			processMap.put("getSubject", new getSubject());
			processMap.put("getMainTarget", new getMainTarget());
			processMap.put("getSubTarget", new getSubTarget());
			processMap.put("getCommonData", new getCommonData());
			processMap.put("getMainData", new getMainData());
			processMap.put("getSubData", new getSubData());
			processMap.put("getDistData", new getDistData());
			processMap.put("getOrgData", new getOrgData());
			processMap.put("getTorgData", new getTorgData());
			processMap.put("getSpecData", new getSpecData());
			processMap.put("setDefTarget", new setDefTarget());
			processMap.put("tallestCow", new tallestCow());
			processMap.put("orgCompareParam", new orgCompareParam());
			processMap.put("orgCompare", new orgCompare());
			processMap.put("exportBill", new exportBill());
			processMap.put("downloadBill", new downloadBill());
			return processMap;
		}

		public static class getRegTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getRegTarget_args> {
			public getRegTarget() {
				super("getRegTarget");
			}

			public getRegTarget_args getEmptyArgsInstance() {
				return new getRegTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getRegTarget_result getResult(I iface, getRegTarget_args args) throws org.apache.thrift.TException {
				getRegTarget_result result = new getRegTarget_result();
				result.success = iface.getRegTarget(args.json);
				return result;
			}
		}

		public static class getFastMenu<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getFastMenu_args> {
			public getFastMenu() {
				super("getFastMenu");
			}

			public getFastMenu_args getEmptyArgsInstance() {
				return new getFastMenu_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getFastMenu_result getResult(I iface, getFastMenu_args args) throws org.apache.thrift.TException {
				getFastMenu_result result = new getFastMenu_result();
				result.success = iface.getFastMenu(args.json);
				return result;
			}
		}

		public static class getSubject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubject_args> {
			public getSubject() {
				super("getSubject");
			}

			public getSubject_args getEmptyArgsInstance() {
				return new getSubject_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getSubject_result getResult(I iface, getSubject_args args) throws org.apache.thrift.TException {
				getSubject_result result = new getSubject_result();
				result.success = iface.getSubject(args.json);
				return result;
			}
		}

		public static class getMainTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getMainTarget_args> {
			public getMainTarget() {
				super("getMainTarget");
			}

			public getMainTarget_args getEmptyArgsInstance() {
				return new getMainTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getMainTarget_result getResult(I iface, getMainTarget_args args)
					throws org.apache.thrift.TException {
				getMainTarget_result result = new getMainTarget_result();
				result.success = iface.getMainTarget(args.json);
				return result;
			}
		}

		public static class getSubTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getSubTarget_args> {
			public getSubTarget() {
				super("getSubTarget");
			}

			public getSubTarget_args getEmptyArgsInstance() {
				return new getSubTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getSubTarget_result getResult(I iface, getSubTarget_args args) throws org.apache.thrift.TException {
				getSubTarget_result result = new getSubTarget_result();
				result.success = iface.getSubTarget(args.json);
				return result;
			}
		}

		public static class getCommonData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCommonData_args> {
			public getCommonData() {
				super("getCommonData");
			}

			public getCommonData_args getEmptyArgsInstance() {
				return new getCommonData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getCommonData_result getResult(I iface, getCommonData_args args)
					throws org.apache.thrift.TException {
				getCommonData_result result = new getCommonData_result();
				result.success = iface.getCommonData(args.json);
				return result;
			}
		}

		public static class getMainData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getMainData_args> {
			public getMainData() {
				super("getMainData");
			}

			public getMainData_args getEmptyArgsInstance() {
				return new getMainData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getMainData_result getResult(I iface, getMainData_args args) throws org.apache.thrift.TException {
				getMainData_result result = new getMainData_result();
				result.success = iface.getMainData(args.json);
				return result;
			}
		}

		public static class getSubData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubData_args> {
			public getSubData() {
				super("getSubData");
			}

			public getSubData_args getEmptyArgsInstance() {
				return new getSubData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getSubData_result getResult(I iface, getSubData_args args) throws org.apache.thrift.TException {
				getSubData_result result = new getSubData_result();
				result.success = iface.getSubData(args.json);
				return result;
			}
		}

		public static class getDistData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getDistData_args> {
			public getDistData() {
				super("getDistData");
			}

			public getDistData_args getEmptyArgsInstance() {
				return new getDistData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getDistData_result getResult(I iface, getDistData_args args) throws org.apache.thrift.TException {
				getDistData_result result = new getDistData_result();
				result.success = iface.getDistData(args.json);
				return result;
			}
		}

		public static class getOrgData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgData_args> {
			public getOrgData() {
				super("getOrgData");
			}

			public getOrgData_args getEmptyArgsInstance() {
				return new getOrgData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getOrgData_result getResult(I iface, getOrgData_args args) throws org.apache.thrift.TException {
				getOrgData_result result = new getOrgData_result();
				result.success = iface.getOrgData(args.json);
				return result;
			}
		}

		public static class getTorgData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getTorgData_args> {
			public getTorgData() {
				super("getTorgData");
			}

			public getTorgData_args getEmptyArgsInstance() {
				return new getTorgData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getTorgData_result getResult(I iface, getTorgData_args args) throws org.apache.thrift.TException {
				getTorgData_result result = new getTorgData_result();
				result.success = iface.getTorgData(args.json);
				return result;
			}
		}

		public static class getSpecData<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getSpecData_args> {
			public getSpecData() {
				super("getSpecData");
			}

			public getSpecData_args getEmptyArgsInstance() {
				return new getSpecData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getSpecData_result getResult(I iface, getSpecData_args args) throws org.apache.thrift.TException {
				getSpecData_result result = new getSpecData_result();
				result.success = iface.getSpecData(args.json);
				return result;
			}
		}

		public static class setDefTarget<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setDefTarget_args> {
			public setDefTarget() {
				super("setDefTarget");
			}

			public setDefTarget_args getEmptyArgsInstance() {
				return new setDefTarget_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setDefTarget_result getResult(I iface, setDefTarget_args args) throws org.apache.thrift.TException {
				setDefTarget_result result = new setDefTarget_result();
				result.success = iface.setDefTarget(args.json);
				return result;
			}
		}

		public static class tallestCow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tallestCow_args> {
			public tallestCow() {
				super("tallestCow");
			}

			public tallestCow_args getEmptyArgsInstance() {
				return new tallestCow_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public tallestCow_result getResult(I iface, tallestCow_args args) throws org.apache.thrift.TException {
				tallestCow_result result = new tallestCow_result();
				result.success = iface.tallestCow(args.json);
				return result;
			}
		}

		public static class orgCompareParam<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, orgCompareParam_args> {
			public orgCompareParam() {
				super("orgCompareParam");
			}

			public orgCompareParam_args getEmptyArgsInstance() {
				return new orgCompareParam_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public orgCompareParam_result getResult(I iface, orgCompareParam_args args)
					throws org.apache.thrift.TException {
				orgCompareParam_result result = new orgCompareParam_result();
				result.success = iface.orgCompareParam(args.json);
				return result;
			}
		}

		public static class orgCompare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orgCompare_args> {
			public orgCompare() {
				super("orgCompare");
			}

			public orgCompare_args getEmptyArgsInstance() {
				return new orgCompare_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public orgCompare_result getResult(I iface, orgCompare_args args) throws org.apache.thrift.TException {
				orgCompare_result result = new orgCompare_result();
				result.success = iface.orgCompare(args.json);
				return result;
			}
		}

		public static class exportBill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportBill_args> {
			public exportBill() {
				super("exportBill");
			}

			public exportBill_args getEmptyArgsInstance() {
				return new exportBill_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public exportBill_result getResult(I iface, exportBill_args args) throws org.apache.thrift.TException {
				exportBill_result result = new exportBill_result();
				result.success = iface.exportBill(args.json);
				return result;
			}
		}

		public static class downloadBill<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, downloadBill_args> {
			public downloadBill() {
				super("downloadBill");
			}

			public downloadBill_args getEmptyArgsInstance() {
				return new downloadBill_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public downloadBill_result getResult(I iface, downloadBill_args args) throws org.apache.thrift.TException {
				downloadBill_result result = new downloadBill_result();
				result.success = iface.downloadBill(args.json);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getRegTarget", new getRegTarget());
			processMap.put("getFastMenu", new getFastMenu());
			processMap.put("getSubject", new getSubject());
			processMap.put("getMainTarget", new getMainTarget());
			processMap.put("getSubTarget", new getSubTarget());
			processMap.put("getCommonData", new getCommonData());
			processMap.put("getMainData", new getMainData());
			processMap.put("getSubData", new getSubData());
			processMap.put("getDistData", new getDistData());
			processMap.put("getOrgData", new getOrgData());
			processMap.put("getTorgData", new getTorgData());
			processMap.put("getSpecData", new getSpecData());
			processMap.put("setDefTarget", new setDefTarget());
			processMap.put("tallestCow", new tallestCow());
			processMap.put("orgCompareParam", new orgCompareParam());
			processMap.put("orgCompare", new orgCompare());
			processMap.put("exportBill", new exportBill());
			processMap.put("downloadBill", new downloadBill());
			return processMap;
		}

		public static class getRegTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getRegTarget_args, ResponseBeanDto> {
			public getRegTarget() {
				super("getRegTarget");
			}

			public getRegTarget_args getEmptyArgsInstance() {
				return new getRegTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getRegTarget_result result = new getRegTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getRegTarget_result result = new getRegTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getRegTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getRegTarget(args.json, resultHandler);
			}
		}

		public static class getFastMenu<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getFastMenu_args, ResponseBeanDto> {
			public getFastMenu() {
				super("getFastMenu");
			}

			public getFastMenu_args getEmptyArgsInstance() {
				return new getFastMenu_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getFastMenu_result result = new getFastMenu_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getFastMenu_result result = new getFastMenu_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getFastMenu_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getFastMenu(args.json, resultHandler);
			}
		}

		public static class getSubject<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getSubject_args, ResponseBeanDto> {
			public getSubject() {
				super("getSubject");
			}

			public getSubject_args getEmptyArgsInstance() {
				return new getSubject_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getSubject_result result = new getSubject_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getSubject_result result = new getSubject_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getSubject_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getSubject(args.json, resultHandler);
			}
		}

		public static class getMainTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getMainTarget_args, ResponseBeanDto> {
			public getMainTarget() {
				super("getMainTarget");
			}

			public getMainTarget_args getEmptyArgsInstance() {
				return new getMainTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getMainTarget_result result = new getMainTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getMainTarget_result result = new getMainTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getMainTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getMainTarget(args.json, resultHandler);
			}
		}

		public static class getSubTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getSubTarget_args, ResponseBeanDto> {
			public getSubTarget() {
				super("getSubTarget");
			}

			public getSubTarget_args getEmptyArgsInstance() {
				return new getSubTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getSubTarget_result result = new getSubTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getSubTarget_result result = new getSubTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getSubTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getSubTarget(args.json, resultHandler);
			}
		}

		public static class getCommonData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCommonData_args, ResponseBeanDto> {
			public getCommonData() {
				super("getCommonData");
			}

			public getCommonData_args getEmptyArgsInstance() {
				return new getCommonData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getCommonData_result result = new getCommonData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCommonData_result result = new getCommonData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCommonData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCommonData(args.json, resultHandler);
			}
		}

		public static class getMainData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getMainData_args, ResponseBeanDto> {
			public getMainData() {
				super("getMainData");
			}

			public getMainData_args getEmptyArgsInstance() {
				return new getMainData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getMainData_result result = new getMainData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getMainData_result result = new getMainData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getMainData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getMainData(args.json, resultHandler);
			}
		}

		public static class getSubData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getSubData_args, ResponseBeanDto> {
			public getSubData() {
				super("getSubData");
			}

			public getSubData_args getEmptyArgsInstance() {
				return new getSubData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getSubData_result result = new getSubData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getSubData_result result = new getSubData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getSubData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getSubData(args.json, resultHandler);
			}
		}

		public static class getDistData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getDistData_args, ResponseBeanDto> {
			public getDistData() {
				super("getDistData");
			}

			public getDistData_args getEmptyArgsInstance() {
				return new getDistData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getDistData_result result = new getDistData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getDistData_result result = new getDistData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getDistData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getDistData(args.json, resultHandler);
			}
		}

		public static class getOrgData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrgData_args, ResponseBeanDto> {
			public getOrgData() {
				super("getOrgData");
			}

			public getOrgData_args getEmptyArgsInstance() {
				return new getOrgData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getOrgData_result result = new getOrgData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrgData_result result = new getOrgData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrgData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrgData(args.json, resultHandler);
			}
		}

		public static class getTorgData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getTorgData_args, ResponseBeanDto> {
			public getTorgData() {
				super("getTorgData");
			}

			public getTorgData_args getEmptyArgsInstance() {
				return new getTorgData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getTorgData_result result = new getTorgData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getTorgData_result result = new getTorgData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getTorgData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getTorgData(args.json, resultHandler);
			}
		}

		public static class getSpecData<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getSpecData_args, ResponseBeanDto> {
			public getSpecData() {
				super("getSpecData");
			}

			public getSpecData_args getEmptyArgsInstance() {
				return new getSpecData_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						getSpecData_result result = new getSpecData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getSpecData_result result = new getSpecData_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getSpecData_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.getSpecData(args.json, resultHandler);
			}
		}

		public static class setDefTarget<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setDefTarget_args, ResponseBeanDto> {
			public setDefTarget() {
				super("setDefTarget");
			}

			public setDefTarget_args getEmptyArgsInstance() {
				return new setDefTarget_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						setDefTarget_result result = new setDefTarget_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setDefTarget_result result = new setDefTarget_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setDefTarget_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.setDefTarget(args.json, resultHandler);
			}
		}

		public static class tallestCow<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, tallestCow_args, ResponseBeanDto> {
			public tallestCow() {
				super("tallestCow");
			}

			public tallestCow_args getEmptyArgsInstance() {
				return new tallestCow_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						tallestCow_result result = new tallestCow_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						tallestCow_result result = new tallestCow_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, tallestCow_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.tallestCow(args.json, resultHandler);
			}
		}

		public static class orgCompareParam<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, orgCompareParam_args, ResponseBeanDto> {
			public orgCompareParam() {
				super("orgCompareParam");
			}

			public orgCompareParam_args getEmptyArgsInstance() {
				return new orgCompareParam_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						orgCompareParam_result result = new orgCompareParam_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						orgCompareParam_result result = new orgCompareParam_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, orgCompareParam_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.orgCompareParam(args.json, resultHandler);
			}
		}

		public static class orgCompare<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, orgCompare_args, ResponseBeanDto> {
			public orgCompare() {
				super("orgCompare");
			}

			public orgCompare_args getEmptyArgsInstance() {
				return new orgCompare_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						orgCompare_result result = new orgCompare_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						orgCompare_result result = new orgCompare_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, orgCompare_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.orgCompare(args.json, resultHandler);
			}
		}

		public static class exportBill<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, exportBill_args, ResponseBeanDto> {
			public exportBill() {
				super("exportBill");
			}

			public exportBill_args getEmptyArgsInstance() {
				return new exportBill_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						exportBill_result result = new exportBill_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						exportBill_result result = new exportBill_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, exportBill_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.exportBill(args.json, resultHandler);
			}
		}

		public static class downloadBill<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, downloadBill_args, ResponseBeanDto> {
			public downloadBill() {
				super("downloadBill");
			}

			public downloadBill_args getEmptyArgsInstance() {
				return new downloadBill_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto>() {
					public void onComplete(ResponseBeanDto o) {
						downloadBill_result result = new downloadBill_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						downloadBill_result result = new downloadBill_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, downloadBill_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResponseBeanDto> resultHandler)
					throws org.apache.thrift.TException {
				iface.downloadBill(args.json, resultHandler);
			}
		}

	}

	public static class getRegTarget_args
			implements org.apache.thrift.TBase<getRegTarget_args, getRegTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getRegTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRegTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRegTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRegTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegTarget_args.class, metaDataMap);
		}

		public getRegTarget_args() {
		}

		public getRegTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRegTarget_args(getRegTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getRegTarget_args deepCopy() {
			return new getRegTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getRegTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRegTarget_args)
				return this.equals((getRegTarget_args) that);
			return false;
		}

		public boolean equals(getRegTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRegTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRegTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRegTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRegTarget_argsStandardScheme getScheme() {
				return new getRegTarget_argsStandardScheme();
			}
		}

		private static class getRegTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRegTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRegTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRegTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRegTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRegTarget_argsTupleScheme getScheme() {
				return new getRegTarget_argsTupleScheme();
			}
		}

		private static class getRegTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getRegTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRegTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRegTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getRegTarget_result
			implements org.apache.thrift.TBase<getRegTarget_result, getRegTarget_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getRegTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRegTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRegTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRegTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegTarget_result.class, metaDataMap);
		}

		public getRegTarget_result() {
		}

		public getRegTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRegTarget_result(getRegTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getRegTarget_result deepCopy() {
			return new getRegTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getRegTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRegTarget_result)
				return this.equals((getRegTarget_result) that);
			return false;
		}

		public boolean equals(getRegTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRegTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRegTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRegTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getRegTarget_resultStandardScheme getScheme() {
				return new getRegTarget_resultStandardScheme();
			}
		}

		private static class getRegTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRegTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRegTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRegTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRegTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getRegTarget_resultTupleScheme getScheme() {
				return new getRegTarget_resultTupleScheme();
			}
		}

		private static class getRegTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getRegTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRegTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRegTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getFastMenu_args implements org.apache.thrift.TBase<getFastMenu_args, getFastMenu_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getFastMenu_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getFastMenu_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFastMenu_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFastMenu_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFastMenu_args.class, metaDataMap);
		}

		public getFastMenu_args() {
		}

		public getFastMenu_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getFastMenu_args(getFastMenu_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getFastMenu_args deepCopy() {
			return new getFastMenu_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getFastMenu_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getFastMenu_args)
				return this.equals((getFastMenu_args) that);
			return false;
		}

		public boolean equals(getFastMenu_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getFastMenu_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getFastMenu_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getFastMenu_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getFastMenu_argsStandardScheme getScheme() {
				return new getFastMenu_argsStandardScheme();
			}
		}

		private static class getFastMenu_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getFastMenu_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getFastMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getFastMenu_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getFastMenu_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getFastMenu_argsTupleScheme getScheme() {
				return new getFastMenu_argsTupleScheme();
			}
		}

		private static class getFastMenu_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getFastMenu_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getFastMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getFastMenu_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getFastMenu_result
			implements org.apache.thrift.TBase<getFastMenu_result, getFastMenu_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getFastMenu_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getFastMenu_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFastMenu_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFastMenu_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFastMenu_result.class, metaDataMap);
		}

		public getFastMenu_result() {
		}

		public getFastMenu_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getFastMenu_result(getFastMenu_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getFastMenu_result deepCopy() {
			return new getFastMenu_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getFastMenu_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getFastMenu_result)
				return this.equals((getFastMenu_result) that);
			return false;
		}

		public boolean equals(getFastMenu_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getFastMenu_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getFastMenu_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getFastMenu_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getFastMenu_resultStandardScheme getScheme() {
				return new getFastMenu_resultStandardScheme();
			}
		}

		private static class getFastMenu_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getFastMenu_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getFastMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getFastMenu_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getFastMenu_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getFastMenu_resultTupleScheme getScheme() {
				return new getFastMenu_resultTupleScheme();
			}
		}

		private static class getFastMenu_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getFastMenu_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getFastMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getFastMenu_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubject_args implements org.apache.thrift.TBase<getSubject_args, getSubject_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getSubject_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubject_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubject_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubject_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubject_args.class, metaDataMap);
		}

		public getSubject_args() {
		}

		public getSubject_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubject_args(getSubject_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getSubject_args deepCopy() {
			return new getSubject_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getSubject_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubject_args)
				return this.equals((getSubject_args) that);
			return false;
		}

		public boolean equals(getSubject_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubject_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubject_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubject_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubject_argsStandardScheme getScheme() {
				return new getSubject_argsStandardScheme();
			}
		}

		private static class getSubject_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubject_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubject_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubject_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubject_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubject_argsTupleScheme getScheme() {
				return new getSubject_argsTupleScheme();
			}
		}

		private static class getSubject_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubject_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubject_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubject_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubject_result
			implements org.apache.thrift.TBase<getSubject_result, getSubject_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSubject_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubject_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubject_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubject_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubject_result.class, metaDataMap);
		}

		public getSubject_result() {
		}

		public getSubject_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubject_result(getSubject_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getSubject_result deepCopy() {
			return new getSubject_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getSubject_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubject_result)
				return this.equals((getSubject_result) that);
			return false;
		}

		public boolean equals(getSubject_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubject_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubject_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubject_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubject_resultStandardScheme getScheme() {
				return new getSubject_resultStandardScheme();
			}
		}

		private static class getSubject_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubject_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubject_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubject_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubject_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubject_resultTupleScheme getScheme() {
				return new getSubject_resultTupleScheme();
			}
		}

		private static class getSubject_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSubject_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubject_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubject_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMainTarget_args
			implements org.apache.thrift.TBase<getMainTarget_args, getMainTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMainTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMainTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMainTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMainTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainTarget_args.class, metaDataMap);
		}

		public getMainTarget_args() {
		}

		public getMainTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMainTarget_args(getMainTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getMainTarget_args deepCopy() {
			return new getMainTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getMainTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMainTarget_args)
				return this.equals((getMainTarget_args) that);
			return false;
		}

		public boolean equals(getMainTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMainTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMainTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMainTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTarget_argsStandardScheme getScheme() {
				return new getMainTarget_argsStandardScheme();
			}
		}

		private static class getMainTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMainTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMainTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMainTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMainTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTarget_argsTupleScheme getScheme() {
				return new getMainTarget_argsTupleScheme();
			}
		}

		private static class getMainTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMainTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMainTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMainTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMainTarget_result
			implements org.apache.thrift.TBase<getMainTarget_result, getMainTarget_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getMainTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMainTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMainTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMainTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainTarget_result.class, metaDataMap);
		}

		public getMainTarget_result() {
		}

		public getMainTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMainTarget_result(getMainTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getMainTarget_result deepCopy() {
			return new getMainTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getMainTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMainTarget_result)
				return this.equals((getMainTarget_result) that);
			return false;
		}

		public boolean equals(getMainTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMainTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMainTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMainTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTarget_resultStandardScheme getScheme() {
				return new getMainTarget_resultStandardScheme();
			}
		}

		private static class getMainTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMainTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMainTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMainTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMainTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainTarget_resultTupleScheme getScheme() {
				return new getMainTarget_resultTupleScheme();
			}
		}

		private static class getMainTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMainTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMainTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMainTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubTarget_args
			implements org.apache.thrift.TBase<getSubTarget_args, getSubTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSubTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubTarget_args.class, metaDataMap);
		}

		public getSubTarget_args() {
		}

		public getSubTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubTarget_args(getSubTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getSubTarget_args deepCopy() {
			return new getSubTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getSubTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubTarget_args)
				return this.equals((getSubTarget_args) that);
			return false;
		}

		public boolean equals(getSubTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubTarget_argsStandardScheme getScheme() {
				return new getSubTarget_argsStandardScheme();
			}
		}

		private static class getSubTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubTarget_argsTupleScheme getScheme() {
				return new getSubTarget_argsTupleScheme();
			}
		}

		private static class getSubTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSubTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubTarget_result
			implements org.apache.thrift.TBase<getSubTarget_result, getSubTarget_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSubTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubTarget_result.class, metaDataMap);
		}

		public getSubTarget_result() {
		}

		public getSubTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubTarget_result(getSubTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getSubTarget_result deepCopy() {
			return new getSubTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getSubTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubTarget_result)
				return this.equals((getSubTarget_result) that);
			return false;
		}

		public boolean equals(getSubTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getSubTarget_resultStandardScheme getScheme() {
				return new getSubTarget_resultStandardScheme();
			}
		}

		private static class getSubTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubTarget_resultTupleScheme getScheme() {
				return new getSubTarget_resultTupleScheme();
			}
		}

		private static class getSubTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSubTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getCommonData_args
			implements org.apache.thrift.TBase<getCommonData_args, getCommonData_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getCommonData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCommonData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCommonData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCommonData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCommonData_args.class, metaDataMap);
		}

		public getCommonData_args() {
		}

		public getCommonData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCommonData_args(getCommonData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getCommonData_args deepCopy() {
			return new getCommonData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getCommonData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCommonData_args)
				return this.equals((getCommonData_args) that);
			return false;
		}

		public boolean equals(getCommonData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCommonData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCommonData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCommonData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCommonData_argsStandardScheme getScheme() {
				return new getCommonData_argsStandardScheme();
			}
		}

		private static class getCommonData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCommonData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCommonData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCommonData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCommonData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCommonData_argsTupleScheme getScheme() {
				return new getCommonData_argsTupleScheme();
			}
		}

		private static class getCommonData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCommonData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCommonData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCommonData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getCommonData_result
			implements org.apache.thrift.TBase<getCommonData_result, getCommonData_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCommonData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCommonData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCommonData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCommonData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCommonData_result.class, metaDataMap);
		}

		public getCommonData_result() {
		}

		public getCommonData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCommonData_result(getCommonData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getCommonData_result deepCopy() {
			return new getCommonData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getCommonData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCommonData_result)
				return this.equals((getCommonData_result) that);
			return false;
		}

		public boolean equals(getCommonData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCommonData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCommonData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCommonData_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public getCommonData_resultStandardScheme getScheme() {
				return new getCommonData_resultStandardScheme();
			}
		}

		private static class getCommonData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCommonData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCommonData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCommonData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCommonData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getCommonData_resultTupleScheme getScheme() {
				return new getCommonData_resultTupleScheme();
			}
		}

		private static class getCommonData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCommonData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCommonData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCommonData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMainData_args implements org.apache.thrift.TBase<getMainData_args, getMainData_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getMainData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMainData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMainData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMainData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainData_args.class, metaDataMap);
		}

		public getMainData_args() {
		}

		public getMainData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMainData_args(getMainData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getMainData_args deepCopy() {
			return new getMainData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getMainData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMainData_args)
				return this.equals((getMainData_args) that);
			return false;
		}

		public boolean equals(getMainData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMainData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMainData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMainData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainData_argsStandardScheme getScheme() {
				return new getMainData_argsStandardScheme();
			}
		}

		private static class getMainData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMainData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMainData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMainData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMainData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainData_argsTupleScheme getScheme() {
				return new getMainData_argsTupleScheme();
			}
		}

		private static class getMainData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMainData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMainData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMainData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getMainData_result
			implements org.apache.thrift.TBase<getMainData_result, getMainData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMainData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMainData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMainData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMainData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainData_result.class, metaDataMap);
		}

		public getMainData_result() {
		}

		public getMainData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMainData_result(getMainData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getMainData_result deepCopy() {
			return new getMainData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getMainData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMainData_result)
				return this.equals((getMainData_result) that);
			return false;
		}

		public boolean equals(getMainData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMainData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMainData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMainData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainData_resultStandardScheme getScheme() {
				return new getMainData_resultStandardScheme();
			}
		}

		private static class getMainData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMainData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMainData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMainData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMainData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getMainData_resultTupleScheme getScheme() {
				return new getMainData_resultTupleScheme();
			}
		}

		private static class getMainData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMainData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMainData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMainData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubData_args implements org.apache.thrift.TBase<getSubData_args, getSubData_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getSubData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubData_args.class, metaDataMap);
		}

		public getSubData_args() {
		}

		public getSubData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubData_args(getSubData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getSubData_args deepCopy() {
			return new getSubData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getSubData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubData_args)
				return this.equals((getSubData_args) that);
			return false;
		}

		public boolean equals(getSubData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubData_argsStandardScheme getScheme() {
				return new getSubData_argsStandardScheme();
			}
		}

		private static class getSubData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubData_argsTupleScheme getScheme() {
				return new getSubData_argsTupleScheme();
			}
		}

		private static class getSubData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSubData_result
			implements org.apache.thrift.TBase<getSubData_result, getSubData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSubData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSubData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubData_result.class, metaDataMap);
		}

		public getSubData_result() {
		}

		public getSubData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSubData_result(getSubData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getSubData_result deepCopy() {
			return new getSubData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getSubData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSubData_result)
				return this.equals((getSubData_result) that);
			return false;
		}

		public boolean equals(getSubData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSubData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSubData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubData_resultStandardScheme getScheme() {
				return new getSubData_resultStandardScheme();
			}
		}

		private static class getSubData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSubData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSubData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSubData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSubData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSubData_resultTupleScheme getScheme() {
				return new getSubData_resultTupleScheme();
			}
		}

		private static class getSubData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSubData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSubData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSubData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getDistData_args implements org.apache.thrift.TBase<getDistData_args, getDistData_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getDistData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getDistData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDistData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDistData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDistData_args.class, metaDataMap);
		}

		public getDistData_args() {
		}

		public getDistData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getDistData_args(getDistData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getDistData_args deepCopy() {
			return new getDistData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getDistData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getDistData_args)
				return this.equals((getDistData_args) that);
			return false;
		}

		public boolean equals(getDistData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getDistData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getDistData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getDistData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getDistData_argsStandardScheme getScheme() {
				return new getDistData_argsStandardScheme();
			}
		}

		private static class getDistData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getDistData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getDistData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getDistData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getDistData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getDistData_argsTupleScheme getScheme() {
				return new getDistData_argsTupleScheme();
			}
		}

		private static class getDistData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getDistData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getDistData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getDistData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getDistData_result
			implements org.apache.thrift.TBase<getDistData_result, getDistData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getDistData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getDistData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDistData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDistData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDistData_result.class, metaDataMap);
		}

		public getDistData_result() {
		}

		public getDistData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getDistData_result(getDistData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getDistData_result deepCopy() {
			return new getDistData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getDistData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getDistData_result)
				return this.equals((getDistData_result) that);
			return false;
		}

		public boolean equals(getDistData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getDistData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getDistData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getDistData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getDistData_resultStandardScheme getScheme() {
				return new getDistData_resultStandardScheme();
			}
		}

		private static class getDistData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getDistData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getDistData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getDistData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getDistData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getDistData_resultTupleScheme getScheme() {
				return new getDistData_resultTupleScheme();
			}
		}

		private static class getDistData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getDistData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getDistData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getDistData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getOrgData_args implements org.apache.thrift.TBase<getOrgData_args, getOrgData_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrgData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrgData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrgData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrgData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgData_args.class, metaDataMap);
		}

		public getOrgData_args() {
		}

		public getOrgData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrgData_args(getOrgData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getOrgData_args deepCopy() {
			return new getOrgData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getOrgData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrgData_args)
				return this.equals((getOrgData_args) that);
			return false;
		}

		public boolean equals(getOrgData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrgData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrgData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrgData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getOrgData_argsStandardScheme getScheme() {
				return new getOrgData_argsStandardScheme();
			}
		}

		private static class getOrgData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrgData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrgData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getOrgData_argsTupleScheme getScheme() {
				return new getOrgData_argsTupleScheme();
			}
		}

		private static class getOrgData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getOrgData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrgData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrgData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getOrgData_result
			implements org.apache.thrift.TBase<getOrgData_result, getOrgData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrgData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrgData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrgData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrgData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgData_result.class, metaDataMap);
		}

		public getOrgData_result() {
		}

		public getOrgData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrgData_result(getOrgData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getOrgData_result deepCopy() {
			return new getOrgData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getOrgData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrgData_result)
				return this.equals((getOrgData_result) that);
			return false;
		}

		public boolean equals(getOrgData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrgData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrgData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrgData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getOrgData_resultStandardScheme getScheme() {
				return new getOrgData_resultStandardScheme();
			}
		}

		private static class getOrgData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrgData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrgData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getOrgData_resultTupleScheme getScheme() {
				return new getOrgData_resultTupleScheme();
			}
		}

		private static class getOrgData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrgData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrgData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrgData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTorgData_args implements org.apache.thrift.TBase<getTorgData_args, getTorgData_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getTorgData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTorgData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTorgData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTorgData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTorgData_args.class, metaDataMap);
		}

		public getTorgData_args() {
		}

		public getTorgData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTorgData_args(getTorgData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getTorgData_args deepCopy() {
			return new getTorgData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getTorgData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTorgData_args)
				return this.equals((getTorgData_args) that);
			return false;
		}

		public boolean equals(getTorgData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTorgData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTorgData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTorgData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTorgData_argsStandardScheme getScheme() {
				return new getTorgData_argsStandardScheme();
			}
		}

		private static class getTorgData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTorgData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTorgData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTorgData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTorgData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTorgData_argsTupleScheme getScheme() {
				return new getTorgData_argsTupleScheme();
			}
		}

		private static class getTorgData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getTorgData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTorgData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTorgData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getTorgData_result
			implements org.apache.thrift.TBase<getTorgData_result, getTorgData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getTorgData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getTorgData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTorgData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTorgData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTorgData_result.class, metaDataMap);
		}

		public getTorgData_result() {
		}

		public getTorgData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getTorgData_result(getTorgData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getTorgData_result deepCopy() {
			return new getTorgData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getTorgData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getTorgData_result)
				return this.equals((getTorgData_result) that);
			return false;
		}

		public boolean equals(getTorgData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getTorgData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getTorgData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getTorgData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTorgData_resultStandardScheme getScheme() {
				return new getTorgData_resultStandardScheme();
			}
		}

		private static class getTorgData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getTorgData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getTorgData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getTorgData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getTorgData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getTorgData_resultTupleScheme getScheme() {
				return new getTorgData_resultTupleScheme();
			}
		}

		private static class getTorgData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getTorgData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getTorgData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getTorgData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSpecData_args implements org.apache.thrift.TBase<getSpecData_args, getSpecData_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getSpecData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSpecData_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSpecData_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSpecData_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecData_args.class, metaDataMap);
		}

		public getSpecData_args() {
		}

		public getSpecData_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSpecData_args(getSpecData_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public getSpecData_args deepCopy() {
			return new getSpecData_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public getSpecData_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSpecData_args)
				return this.equals((getSpecData_args) that);
			return false;
		}

		public boolean equals(getSpecData_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSpecData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSpecData_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSpecData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSpecData_argsStandardScheme getScheme() {
				return new getSpecData_argsStandardScheme();
			}
		}

		private static class getSpecData_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSpecData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecData_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSpecData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSpecData_argsTupleScheme getScheme() {
				return new getSpecData_argsTupleScheme();
			}
		}

		private static class getSpecData_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSpecData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSpecData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSpecData_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class getSpecData_result
			implements org.apache.thrift.TBase<getSpecData_result, getSpecData_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getSpecData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getSpecData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSpecData_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSpecData_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecData_result.class, metaDataMap);
		}

		public getSpecData_result() {
		}

		public getSpecData_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getSpecData_result(getSpecData_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public getSpecData_result deepCopy() {
			return new getSpecData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public getSpecData_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getSpecData_result)
				return this.equals((getSpecData_result) that);
			return false;
		}

		public boolean equals(getSpecData_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getSpecData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getSpecData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getSpecData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSpecData_resultStandardScheme getScheme() {
				return new getSpecData_resultStandardScheme();
			}
		}

		private static class getSpecData_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getSpecData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecData_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getSpecData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public getSpecData_resultTupleScheme getScheme() {
				return new getSpecData_resultTupleScheme();
			}
		}

		private static class getSpecData_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getSpecData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getSpecData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getSpecData_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setDefTarget_args
			implements org.apache.thrift.TBase<setDefTarget_args, setDefTarget_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<setDefTarget_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setDefTarget_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setDefTarget_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setDefTarget_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDefTarget_args.class, metaDataMap);
		}

		public setDefTarget_args() {
		}

		public setDefTarget_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setDefTarget_args(setDefTarget_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public setDefTarget_args deepCopy() {
			return new setDefTarget_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public setDefTarget_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setDefTarget_args)
				return this.equals((setDefTarget_args) that);
			return false;
		}

		public boolean equals(setDefTarget_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setDefTarget_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setDefTarget_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setDefTarget_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDefTarget_argsStandardScheme getScheme() {
				return new setDefTarget_argsStandardScheme();
			}
		}

		private static class setDefTarget_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setDefTarget_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setDefTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setDefTarget_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setDefTarget_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDefTarget_argsTupleScheme getScheme() {
				return new setDefTarget_argsTupleScheme();
			}
		}

		private static class setDefTarget_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setDefTarget_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setDefTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setDefTarget_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setDefTarget_result
			implements org.apache.thrift.TBase<setDefTarget_result, setDefTarget_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setDefTarget_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setDefTarget_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setDefTarget_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setDefTarget_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDefTarget_result.class, metaDataMap);
		}

		public setDefTarget_result() {
		}

		public setDefTarget_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setDefTarget_result(setDefTarget_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public setDefTarget_result deepCopy() {
			return new setDefTarget_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public setDefTarget_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setDefTarget_result)
				return this.equals((setDefTarget_result) that);
			return false;
		}

		public boolean equals(setDefTarget_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setDefTarget_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setDefTarget_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setDefTarget_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setDefTarget_resultStandardScheme getScheme() {
				return new setDefTarget_resultStandardScheme();
			}
		}

		private static class setDefTarget_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setDefTarget_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setDefTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setDefTarget_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setDefTarget_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDefTarget_resultTupleScheme getScheme() {
				return new setDefTarget_resultTupleScheme();
			}
		}

		private static class setDefTarget_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setDefTarget_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setDefTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setDefTarget_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class tallestCow_args implements org.apache.thrift.TBase<tallestCow_args, tallestCow_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<tallestCow_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"tallestCow_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new tallestCow_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new tallestCow_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tallestCow_args.class, metaDataMap);
		}

		public tallestCow_args() {
		}

		public tallestCow_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public tallestCow_args(tallestCow_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public tallestCow_args deepCopy() {
			return new tallestCow_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public tallestCow_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof tallestCow_args)
				return this.equals((tallestCow_args) that);
			return false;
		}

		public boolean equals(tallestCow_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(tallestCow_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("tallestCow_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class tallestCow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public tallestCow_argsStandardScheme getScheme() {
				return new tallestCow_argsStandardScheme();
			}
		}

		private static class tallestCow_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<tallestCow_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, tallestCow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, tallestCow_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class tallestCow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public tallestCow_argsTupleScheme getScheme() {
				return new tallestCow_argsTupleScheme();
			}
		}

		private static class tallestCow_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<tallestCow_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, tallestCow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, tallestCow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class tallestCow_result
			implements org.apache.thrift.TBase<tallestCow_result, tallestCow_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<tallestCow_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"tallestCow_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new tallestCow_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new tallestCow_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tallestCow_result.class, metaDataMap);
		}

		public tallestCow_result() {
		}

		public tallestCow_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public tallestCow_result(tallestCow_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public tallestCow_result deepCopy() {
			return new tallestCow_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public tallestCow_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof tallestCow_result)
				return this.equals((tallestCow_result) that);
			return false;
		}

		public boolean equals(tallestCow_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(tallestCow_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("tallestCow_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class tallestCow_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public tallestCow_resultStandardScheme getScheme() {
				return new tallestCow_resultStandardScheme();
			}
		}

		private static class tallestCow_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<tallestCow_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, tallestCow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, tallestCow_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class tallestCow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public tallestCow_resultTupleScheme getScheme() {
				return new tallestCow_resultTupleScheme();
			}
		}

		private static class tallestCow_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<tallestCow_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, tallestCow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, tallestCow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class orgCompareParam_args
			implements org.apache.thrift.TBase<orgCompareParam_args, orgCompareParam_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<orgCompareParam_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orgCompareParam_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new orgCompareParam_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new orgCompareParam_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orgCompareParam_args.class, metaDataMap);
		}

		public orgCompareParam_args() {
		}

		public orgCompareParam_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orgCompareParam_args(orgCompareParam_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public orgCompareParam_args deepCopy() {
			return new orgCompareParam_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public orgCompareParam_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof orgCompareParam_args)
				return this.equals((orgCompareParam_args) that);
			return false;
		}

		public boolean equals(orgCompareParam_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(orgCompareParam_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("orgCompareParam_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orgCompareParam_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompareParam_argsStandardScheme getScheme() {
				return new orgCompareParam_argsStandardScheme();
			}
		}

		private static class orgCompareParam_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<orgCompareParam_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orgCompareParam_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orgCompareParam_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orgCompareParam_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompareParam_argsTupleScheme getScheme() {
				return new orgCompareParam_argsTupleScheme();
			}
		}

		private static class orgCompareParam_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<orgCompareParam_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orgCompareParam_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orgCompareParam_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class orgCompareParam_result
			implements org.apache.thrift.TBase<orgCompareParam_result, orgCompareParam_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<orgCompareParam_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orgCompareParam_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new orgCompareParam_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new orgCompareParam_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orgCompareParam_result.class, metaDataMap);
		}

		public orgCompareParam_result() {
		}

		public orgCompareParam_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orgCompareParam_result(orgCompareParam_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public orgCompareParam_result deepCopy() {
			return new orgCompareParam_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public orgCompareParam_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof orgCompareParam_result)
				return this.equals((orgCompareParam_result) that);
			return false;
		}

		public boolean equals(orgCompareParam_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(orgCompareParam_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("orgCompareParam_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orgCompareParam_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompareParam_resultStandardScheme getScheme() {
				return new orgCompareParam_resultStandardScheme();
			}
		}

		private static class orgCompareParam_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<orgCompareParam_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orgCompareParam_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orgCompareParam_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orgCompareParam_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompareParam_resultTupleScheme getScheme() {
				return new orgCompareParam_resultTupleScheme();
			}
		}

		private static class orgCompareParam_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<orgCompareParam_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orgCompareParam_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orgCompareParam_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class orgCompare_args implements org.apache.thrift.TBase<orgCompare_args, orgCompare_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<orgCompare_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orgCompare_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new orgCompare_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new orgCompare_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orgCompare_args.class, metaDataMap);
		}

		public orgCompare_args() {
		}

		public orgCompare_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orgCompare_args(orgCompare_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public orgCompare_args deepCopy() {
			return new orgCompare_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public orgCompare_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof orgCompare_args)
				return this.equals((orgCompare_args) that);
			return false;
		}

		public boolean equals(orgCompare_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(orgCompare_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("orgCompare_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orgCompare_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompare_argsStandardScheme getScheme() {
				return new orgCompare_argsStandardScheme();
			}
		}

		private static class orgCompare_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<orgCompare_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orgCompare_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orgCompare_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orgCompare_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompare_argsTupleScheme getScheme() {
				return new orgCompare_argsTupleScheme();
			}
		}

		private static class orgCompare_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<orgCompare_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orgCompare_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orgCompare_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class orgCompare_result
			implements org.apache.thrift.TBase<orgCompare_result, orgCompare_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<orgCompare_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orgCompare_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new orgCompare_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new orgCompare_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orgCompare_result.class, metaDataMap);
		}

		public orgCompare_result() {
		}

		public orgCompare_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orgCompare_result(orgCompare_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public orgCompare_result deepCopy() {
			return new orgCompare_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public orgCompare_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof orgCompare_result)
				return this.equals((orgCompare_result) that);
			return false;
		}

		public boolean equals(orgCompare_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(orgCompare_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("orgCompare_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orgCompare_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompare_resultStandardScheme getScheme() {
				return new orgCompare_resultStandardScheme();
			}
		}

		private static class orgCompare_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<orgCompare_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orgCompare_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orgCompare_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orgCompare_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public orgCompare_resultTupleScheme getScheme() {
				return new orgCompare_resultTupleScheme();
			}
		}

		private static class orgCompare_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<orgCompare_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orgCompare_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orgCompare_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class exportBill_args implements org.apache.thrift.TBase<exportBill_args, exportBill_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<exportBill_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"exportBill_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exportBill_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exportBill_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportBill_args.class, metaDataMap);
		}

		public exportBill_args() {
		}

		public exportBill_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public exportBill_args(exportBill_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public exportBill_args deepCopy() {
			return new exportBill_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public exportBill_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof exportBill_args)
				return this.equals((exportBill_args) that);
			return false;
		}

		public boolean equals(exportBill_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(exportBill_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("exportBill_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class exportBill_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public exportBill_argsStandardScheme getScheme() {
				return new exportBill_argsStandardScheme();
			}
		}

		private static class exportBill_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<exportBill_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, exportBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, exportBill_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class exportBill_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public exportBill_argsTupleScheme getScheme() {
				return new exportBill_argsTupleScheme();
			}
		}

		private static class exportBill_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<exportBill_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, exportBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, exportBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class exportBill_result
			implements org.apache.thrift.TBase<exportBill_result, exportBill_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<exportBill_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"exportBill_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exportBill_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exportBill_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportBill_result.class, metaDataMap);
		}

		public exportBill_result() {
		}

		public exportBill_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public exportBill_result(exportBill_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public exportBill_result deepCopy() {
			return new exportBill_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public exportBill_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof exportBill_result)
				return this.equals((exportBill_result) that);
			return false;
		}

		public boolean equals(exportBill_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(exportBill_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("exportBill_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class exportBill_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public exportBill_resultStandardScheme getScheme() {
				return new exportBill_resultStandardScheme();
			}
		}

		private static class exportBill_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<exportBill_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, exportBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, exportBill_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class exportBill_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public exportBill_resultTupleScheme getScheme() {
				return new exportBill_resultTupleScheme();
			}
		}

		private static class exportBill_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<exportBill_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, exportBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, exportBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class downloadBill_args
			implements org.apache.thrift.TBase<downloadBill_args, downloadBill_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<downloadBill_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"downloadBill_args");

		private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"json", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new downloadBill_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new downloadBill_argsTupleSchemeFactory();

		public java.lang.String json; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			JSON((short) 4, "json");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 4: // JSON
					return JSON;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downloadBill_args.class, metaDataMap);
		}

		public downloadBill_args() {
		}

		public downloadBill_args(java.lang.String json) {
			this();
			this.json = json;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public downloadBill_args(downloadBill_args other) {
			if (other.isSetJson()) {
				this.json = other.json;
			}
		}

		public downloadBill_args deepCopy() {
			return new downloadBill_args(this);
		}

		@Override
		public void clear() {
			this.json = null;
		}

		public java.lang.String getJson() {
			return this.json;
		}

		public downloadBill_args setJson(java.lang.String json) {
			this.json = json;
			return this;
		}

		public void unsetJson() {
			this.json = null;
		}

		/**
		 * Returns true if field json is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetJson() {
			return this.json != null;
		}

		public void setJsonIsSet(boolean value) {
			if (!value) {
				this.json = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case JSON:
				if (value == null) {
					unsetJson();
				} else {
					setJson((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case JSON:
				return getJson();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case JSON:
				return isSetJson();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof downloadBill_args)
				return this.equals((downloadBill_args) that);
			return false;
		}

		public boolean equals(downloadBill_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_json = true && this.isSetJson();
			boolean that_present_json = true && that.isSetJson();
			if (this_present_json || that_present_json) {
				if (!(this_present_json && that_present_json))
					return false;
				if (!this.json.equals(that.json))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetJson()) ? 131071 : 524287);
			if (isSetJson())
				hashCode = hashCode * 8191 + json.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(downloadBill_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetJson()).compareTo(other.isSetJson());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJson()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, other.json);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("downloadBill_args(");
			boolean first = true;

			sb.append("json:");
			if (this.json == null) {
				sb.append("null");
			} else {
				sb.append(this.json);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class downloadBill_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public downloadBill_argsStandardScheme getScheme() {
				return new downloadBill_argsStandardScheme();
			}
		}

		private static class downloadBill_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<downloadBill_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, downloadBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 4: // JSON
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.json = iprot.readString();
							struct.setJsonIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, downloadBill_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.json != null) {
					oprot.writeFieldBegin(JSON_FIELD_DESC);
					oprot.writeString(struct.json);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class downloadBill_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public downloadBill_argsTupleScheme getScheme() {
				return new downloadBill_argsTupleScheme();
			}
		}

		private static class downloadBill_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<downloadBill_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, downloadBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetJson()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetJson()) {
					oprot.writeString(struct.json);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, downloadBill_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.json = iprot.readString();
					struct.setJsonIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class downloadBill_result
			implements org.apache.thrift.TBase<downloadBill_result, downloadBill_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<downloadBill_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"downloadBill_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new downloadBill_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new downloadBill_resultTupleSchemeFactory();

		public ResponseBeanDto success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResponseBeanDto.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downloadBill_result.class, metaDataMap);
		}

		public downloadBill_result() {
		}

		public downloadBill_result(ResponseBeanDto success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public downloadBill_result(downloadBill_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResponseBeanDto(other.success);
			}
		}

		public downloadBill_result deepCopy() {
			return new downloadBill_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public ResponseBeanDto getSuccess() {
			return this.success;
		}

		public downloadBill_result setSuccess(ResponseBeanDto success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((ResponseBeanDto) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof downloadBill_result)
				return this.equals((downloadBill_result) that);
			return false;
		}

		public boolean equals(downloadBill_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(downloadBill_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("downloadBill_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class downloadBill_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public downloadBill_resultStandardScheme getScheme() {
				return new downloadBill_resultStandardScheme();
			}
		}

		private static class downloadBill_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<downloadBill_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, downloadBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResponseBeanDto();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, downloadBill_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class downloadBill_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public downloadBill_resultTupleScheme getScheme() {
				return new downloadBill_resultTupleScheme();
			}
		}

		private static class downloadBill_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<downloadBill_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, downloadBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, downloadBill_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new ResponseBeanDto();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

}
