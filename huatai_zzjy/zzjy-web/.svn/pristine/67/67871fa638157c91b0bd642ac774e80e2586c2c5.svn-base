/* * 以下为ajax */	var ajaxCommon =	{		type : "post",// 这为定值		datatype : "json",// 该值还有html,json,xml		async : false,//是否异步。true为异步，false为同步		submit_url : "",		data : {},		/**		 * 这个方法做了一些操作、然后调用回调函数 		 * fn : 调用的方法 		 * args : 调用方法的参数		 */		doCallback:function(fn, args){			fn.apply(this, args);		},		/**		* ajax公共方法		* type :提交的类型(post, get)		* datatype : 接受数据格式有html,json,xml三种格式		* url : 提交的地址		* data : 要提交到服务器的数据		* callbackFun : 回调方法,便于解析		*/		ajax:function(type, async, datatype, url, data, callbackFun) {			$.ajax({				type : type,				async : async,				url : url + "?st=" + Math.floor(Math.random() * ( 100000 + 1)),				dataType : datatype,				data : data,//this.inputDateEncode(data),				success : function(xml) {					//动态调用方法、并传递参数					ajaxCommon.doCallback(callbackFun, [ xml ]);					//alert(callbackFun);					//eval("callbackClick("+xml+")");					//eval("callbackClick()");					/*if("html" == datatype){						alert(xml);					}else if("json" == datatype){						//alert("xml");						//1. 						alert("productInfo="+xml.loginusertype);					}else if("xml" == datatype){						result(xml);					}else{						alert("参数datatype填写错误,该值有html,json,xml这几种类型,请重新填写");					}*/				},				error:function(XMLHttpRequest, textStatus, errorThrown){					if (textStatus == "timeout") {						alert("系统错误，请稍后重试!");					} else if (textStatus = "parsererror") {						alert("系统错误，请稍后重试.");					} else {						alert("系统错误，请稍后重试！");					}				}			});		},		/**		* 提交类型为xml 返回数据解析案例		*		*/		result:function(xml) {			jQuery(xml).find("msgstr").each(function(i) {				alert((i + 1) + "********" + jQuery(this).text()); //这里的this表示xml文件中每个item项  			});			jQuery(xml).find("infomation").each(					function(i) {						alert((i + 1) + "********infomation/loginusertype="								+ jQuery(this).children("loginusertype").text());					});			jQuery(xml).find("loginusertype").each(function(i) {				alert((i + 1) + "********loginusertype=" + jQuery(this).text());			});			jQuery(xml).find("useridid").each(function(i) {				alert((i + 1) + "********useridid=" + jQuery(this).text());			});			jQuery(xml).find("result").each(function(i) {				jQuery(this).find("msgstr").each(					function(i) {						alert((i + 1)+ "********result/msgstr="+ jQuery(this).text());				});				jQuery(this).find("infomation").each(					function(i) {						alert((i + 1)+ "********result/infomation/loginusertype="+ jQuery(this).children("loginusertype").text());						alert((i + 1)+ "********result/infomation/useridid="+ jQuery(this).children("useridid").text());				});			});		},		/**		* 提交前对数据进行加密操作址		* data : 要加密的数据		*/		inputDateEncode:function(data) {			var key = "";			var value = "";			var keyvalue = "";			var datestr = data.split("&");//对字符串以&符进行分隔			var datestrlength = datestr.length;			for (i = 0; i < datestrlength; i++) {				var str = datestr[i].split("=");//对字符串以=符进行分隔				var strlength = str.length;				for (j = 0; j < strlength; j++) {					if (0 == j) {						key = str[j] + "=";						keyvalue = keyvalue + key;					} else {						value = this.encodeurl(str[j]) + "&";//(isObject(str[j])?encodeurl(str[j]):str[j])+"&";//进行加密						keyvalue = keyvalue + value;					}				}			}			return keyvalue;		},		/**		* encodeURI 加密		* encodeurl : 加密参数		*/		encodeurl:function(encodeurl) {			return encodeURI(encodeURI(encodeurl));		},		isObject:function (source) {			return 'function' == typeof source || !!(source && 'object' == typeof source);		}	}	/*	 * 以下为map	 */	function Mapzhl() {		var struct = function(key, value) {			this.key = key;			this.value = value;		}		//put		var put = function(key, value) {			for ( var i = 0; i < this.arr.length; i++) {				if (this.arr[i].key === key) {					this.arr[i].value = value;					return;				}			}			this.arr[this.arr.length] = new struct(key, value);		}		//get		var get = function(key) {			for ( var i = 0; i < this.arr.length; i++) {				if (this.arr[i].key === key) {					return this.arr[i].value;				}			}			return null;		}		//remove		var remove = function(key) {			var v;			for ( var i = 0; i < this.arr.length; i++) {				v = this.arr.pop();				if (v.key === key) {					continue;				}				this.arr.unshift(v);			}		}		//removeAll		var removeAll = function() {			this.arr.splice(0,this.arr.length);		}		//size		var size = function() {			return this.arr.length;		}		//isEmpty		var isEmpty = function() {			//alert(this.arr.length);			return this.arr.length <= 0;		}		this.arr = new Array();		this.get = get;		this.put = put;		this.remove = remove;		this.removeAll = removeAll;		this.size = size;		this.isEmpty = isEmpty;		/*var map = new Mapzhl();		 map.put("re","redhacker");		 map.put("do","douguoqiang");		 map.put("gq","dougq");		 alert("map的大小为：" + map.size())		 alert("key为re的map中存储的对象为：" + map.get("re"));		 map.remove("re");		 alert("移除key为re的对象后，获取key为re的map中存储的对象为：" + map.get("re"));		 alert("map移除一个元素后的大小为：" + map.size());		 alert("map是否是一个空map:" + map.isEmpty());		 */	}		//去掉空格	String.prototype.Trim = function() 	{ 	return this.replace(/(^\s*)|(\s*$)/g, ""); 	}	//去掉左空格	String.prototype.LTrim = function() 	{ 	return this.replace(/(^\s*)/g, ""); 	}	//去掉右空格	String.prototype.RTrim = function() 	{ 	return this.replace(/(\s*$)/g, ""); 	}		/**	 * 格式化小数	 * 参数说明：num 要格式化的数字 n 保留小数位alert(formatNum(1234005651.789,2)); 	 * 	 */	function formatNum(num,n)	{	    num = String(num.toFixed(n));	    var re = /(-?\d+)(\d{3})/;	    while(re.test(num)) num = num.replace(re,"$1,$2")	    return num;	}	 
	function formSerialize(id){		//alert($(id+" "+id).serialize());		return $(id).serialize();	}